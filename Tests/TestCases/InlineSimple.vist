// RUN: -Ohigh -emit-vir
// CHECK: VIR

func identity :: Int -> Int = do
    return $0

func foo :: Int -> Int = (a) {
    let x = a + 1
    return identity x
}

print (foo 12)

// VIR-CHECK:
// VIR: func @main : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 12 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %4
// VIR:   %2 = int_literal 1 	// users: %1, %3, %3
// VIR:   %3 = struct %Int, (%2: #Builtin.Int64) 	// user: %5
// VIR:   %4 = struct_extract %1: #Int, !value 	// user: %i_add
// VIR:   %5 = struct_extract %3: #Int, !value 	// user: %i_add
// VIR:   %i_add = builtin i_add %4: #Builtin.Int64, %5: #Builtin.Int64 	// users: %overflow, %value
// VIR:   %overflow = tuple_extract %i_add: (#Builtin.Int64, #Builtin.Bool), !1 	// user: %6
// VIR:   cond_fail %overflow: #Builtin.Bool
// VIR:   %value = tuple_extract %i_add: (#Builtin.Int64, #Builtin.Bool), !0 	// user: %7
// VIR:   %7 = struct %Int, (%value: #Builtin.Int64) 	// user: %8
// VIR:   %8 = call @print_tI (%7: #Int)
// VIR:   return ()
// VIR: }
