// RUN: -Ohigh -emit-vir
// CHECK: VIR

// VIR-CHECK:
// VIR: func @identity_tI : &thin (#Int) -> #Int {
// VIR: $entry(%$0: #Int):
// VIR:   return %$0
// VIR: }
func identity :: Int -> Int = do
return $0

// VIR-CHECK:
// VIR: func @foo_tI : &thin (#Int) -> #Int {
// VIR: $entry(%a: #Int):
// VIR:   %0 = int_literal 1 	// user: %i_add
// VIR:   %1 = struct_extract %a: #Int, !value 	// user: %i_add
// VIR:   %i_add = builtin i_add %1: #Builtin.Int64, %0: #Builtin.Int64 	// users: %overflow, %value
// VIR:   %overflow = tuple_extract %i_add: (#Builtin.Int64, #Builtin.Bool), !1 	// user: %2
// VIR:   cond_fail %overflow: #Builtin.Bool
// VIR:   %value = tuple_extract %i_add: (#Builtin.Int64, #Builtin.Bool), !0 	// user: %3
// VIR:   %3 = struct %Int, (%value: #Builtin.Int64) 	// user: %4
// VIR:   return %3
// VIR: }
func foo :: Int -> Int = (a) {
let x = a + 1
return identity x
}

// VIR-CHECK:
// VIR: func @main : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 13 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = call @print_tI (%1: #Int)
// VIR:   return ()
// VIR: }
print (foo 12)

