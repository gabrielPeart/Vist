// RUN: -Ohigh -emit-vir
// CHECK: VIR

type Foo { var x: Int }
type Baz { var foo: Foo }


// VIR-CHECK:
// VIR: func @test_t : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 222 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = struct %Foo, (%1: #Int) 	// user: %3
// VIR:   %3 = struct_extract %2: #Foo, !x 	// user: %4
// VIR:   %4 = call @print_tI (%3: #Int)
// VIR:   return ()
// VIR: }
func test :: () = { // tests the output isnt being invalidated
    let f = Foo 222
    let b = Baz f
    
    let u = f.x
    print u
}

// VIR-CHECK:
// VIR: func @test2_t : &thin () -> #Int {
// VIR: $entry:
// VIR:   %0 = int_literal 1 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   return %1
// VIR: }
func test2 :: () -> Int= {
    let a = 1
    let b = 22
    let c = 2
    return a
}

// VIR-CHECK:
// VIR: func @trapSimplify_t : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 12 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = call @print_tI (%1: #Int)
// VIR:   %3 = builtin trap
// VIR: }
func trapSimplify :: () = {
    print 12
    let x = 9223372036854775807 + 1
    print x
    print 100
}
