
type %Int = { %Builtin.Int64 }
type %Range = { %Int, %Int }

func @..-L_Int_Int : &thin (%Int, %Int) -> %Range

func @-A_Int_Int : &thin (%Int, %Int) -> %Int

func @-P_Int_Int : &thin (%Int, %Int) -> %Int

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 0  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %4
  %2 = int_literal 3  	// user: %3
  %3 = struct %Int (%2: %Builtin.Int64)  	// user: %4
  %4 = call @..._Int_Int (%1: %Int, %3: %Int)  	// users: %5, %6
  %5 = struct_extract %4: %Range, #Range.start  	// user: %7
  %6 = struct_extract %4: %Range, #Range.end  	// user: %8
  %7 = struct_extract %5: %Int, #Int.value  	// user: %count.it
  %8 = struct_extract %6: %Int, #Int.value  	// user: %13
  break $loop(%7: %Builtin.Int64)

$loop(%loop.count: %Builtin.Int64):			// preds: entry, loop
  %10 = struct %Int (%7: %Builtin.Int64)  	// user: %11
  %11 = call @print_Int (%10: %Int) 
  %12 = int_literal 1  	// user: %count.it
  %count.it = builtin i_add_overflow %7: %Builtin.Int64, %12: %Builtin.Int64  	// users: %13, %14
  %13 = builtin cmp_lte %count.it: %Builtin.Int64, %8: %Builtin.Int64  	// user: 
  break %13: %Builtin.Bool, $loop(%count.it: %Builtin.Int64), $loop.exit

$loop.exit:			// preds: loop
  %15 = int_literal 1  	// user: %16
  %16 = struct %Int (%15: %Builtin.Int64)  	// user: %18
  %17 = alloc %Int  	// users: %18, %30, %33, %37
  store %16 in %17: %*Int 
  %19 = int_literal 2  	// user: %20
  %20 = struct %Int (%19: %Builtin.Int64)  	// user: %23
  %21 = int_literal 5  	// user: %22
  %22 = struct %Int (%21: %Builtin.Int64)  	// user: %23
  %23 = call @..-L_Int_Int (%20: %Int, %22: %Int)  	// users: %24, %25
  %24 = struct_extract %23: %Range, #Range.start  	// user: %26
  %25 = struct_extract %23: %Range, #Range.end  	// user: %27
  %26 = struct_extract %24: %Int, #Int.value  	// user: %count.it
  %27 = struct_extract %25: %Int, #Int.value  	// user: %39
  break $loop(%26: %Builtin.Int64)

$loop(%loop.count: %Builtin.Int64):			// preds: loop.exit, loop
  %29 = struct %Int (%26: %Builtin.Int64)  	// user: %31
  %30 = load %17: %*Int  	// user: %31
  %31 = call @-A_Int_Int (%29: %Int, %30: %Int)  	// user: %32
  %32 = call @print_Int (%31: %Int) 
  %33 = load %17: %*Int  	// user: %36
  %34 = int_literal 1  	// user: %35
  %35 = struct %Int (%34: %Builtin.Int64)  	// user: %36
  %36 = call @-P_Int_Int (%33: %Int, %35: %Int)  	// user: %37
  store %36 in %17: %*Int 
  %38 = int_literal 1  	// user: %count.it
  %count.it = builtin i_add_overflow %26: %Builtin.Int64, %38: %Builtin.Int64  	// users: %39, %40
  %39 = builtin cmp_lte %count.it: %Builtin.Int64, %27: %Builtin.Int64  	// user: 
  break %39: %Builtin.Bool, $loop(%count.it: %Builtin.Int64), $loop.exit

$loop.exit:			// preds: loop
  return ()
}

func @..._Int_Int : &thin (%Int, %Int) -> %Range

func @print_Int : &thin (%Int) -> %Builtin.Void