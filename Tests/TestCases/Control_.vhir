
type %Bool = { %Builtin.Bool }
type %Int = { %Builtin.Int64 }

func @-A_Int_Int : &thin (%Int, %Int) -> %Int

func @print_Bool : &thin (%Bool) -> %Builtin.Void

func @-G_Int_Int : &thin (%Int, %Int) -> %Bool

func @-L_Int_Int : &thin (%Int, %Int) -> %Bool

func @print_Int : &thin (%Int) -> %Builtin.Void

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 3  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %a
  variable_decl %a = %1: %Int  	// users: %7, %16, %25
  %2 = int_literal 2  	// user: %3
  %3 = struct %Int (%2: %Builtin.Int64)  	// user: %6
  %4 = int_literal 100  	// user: %5
  %5 = struct %Int (%4: %Builtin.Int64)  	// user: %6
  %6 = call @-A_Int_Int (%3: %Int, %5: %Int)  	// user: %7
  %7 = call @-L_Int_Int (%a: %Int, %6: %Int)  	// user: %8
  %8 = struct_extract %7: %Bool, #value  	// user: nil
  break %8: %Builtin.Bool, $if.0, $exit

$if.0:			// preds: entry
  %10 = int_literal 100  	// user: %11
  %11 = struct %Int (%10: %Builtin.Int64)  	// user: %12
  %12 = call @print_Int (%11: %Int) 
  break $exit

$exit:			// preds: entry, if.0
  %14 = int_literal 4  	// user: %15
  %15 = struct %Int (%14: %Builtin.Int64)  	// user: %16
  %16 = call @-G_Int_Int (%a: %Int, %15: %Int)  	// user: %17
  %17 = struct_extract %16: %Bool, #value  	// user: nil
  break %17: %Builtin.Bool, $if.0, $fail.0

$if.0:			// preds: exit
  %19 = int_literal 1  	// user: %20
  %20 = struct %Int (%19: %Builtin.Int64)  	// user: %21
  %21 = call @print_Int (%20: %Int) 
  break $exit

$fail.0:			// preds: exit
  %23 = int_literal 3  	// user: %24
  %24 = struct %Int (%23: %Builtin.Int64)  	// user: %25
  %25 = call @-E-E_Int_Int (%a: %Int, %24: %Int)  	// user: %26
  %26 = struct_extract %25: %Bool, #value  	// user: nil
  break %26: %Builtin.Bool, $if.1, $exit

$if.1:			// preds: fail.0
  %28 = int_literal 11  	// user: %29
  %29 = struct %Int (%28: %Builtin.Int64)  	// user: %30
  %30 = call @print_Int (%29: %Int) 
  break $exit

$exit:			// preds: if.0, fail.0, if.1
  %32 = bool_literal false  	// user: %33
  %33 = struct %Bool (%32: %Builtin.Bool)  	// user: %34
  %34 = struct_extract %33: %Bool, #value  	// user: nil
  break %34: %Builtin.Bool, $if.0, $fail.0

$if.0:			// preds: exit
  %36 = int_literal 1  	// user: %37
  %37 = struct %Int (%36: %Builtin.Int64)  	// user: %38
  %38 = call @print_Int (%37: %Int) 
  break $exit

$fail.0:			// preds: exit
  %40 = bool_literal false  	// user: %41
  %41 = struct %Bool (%40: %Builtin.Bool)  	// user: %42
  %42 = struct_extract %41: %Bool, #value  	// user: nil
  break %42: %Builtin.Bool, $if.1, $fail.1

$if.1:			// preds: fail.0
  %44 = bool_literal false  	// user: %45
  %45 = struct %Bool (%44: %Builtin.Bool)  	// user: %46
  %46 = call @print_Bool (%45: %Bool) 
  break $exit

$fail.1:			// preds: fail.0
  break $else.2

$else.2:			// preds: fail.1
  %49 = int_literal 20  	// user: %50
  %50 = struct %Int (%49: %Builtin.Int64)  	// user: %51
  %51 = call @print_Int (%50: %Int) 
  break $exit

$exit:			// preds: if.0, if.1, else.2
  return ()
}

func @-E-E_Int_Int : &thin (%Int, %Int) -> %Bool