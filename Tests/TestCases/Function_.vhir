
type %Bool = { %Builtin.Bool }
type %Int = { %Builtin.Int64 }

func @print_Int : &thin (%Int) -> %Builtin.Void

func @void_ : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 41  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %2
  %2 = call @print_Int (%1: %Int) 
  return ()
}

func @two_ : &thin () -> %Int {
$entry:
  %0 = int_literal 2  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %2
  return %1
}

func @-L-E_Int_Int : &thin (%Int, %Int) -> %Bool

func @-P_Int_Int : &thin (%Int, %Int) -> %Int

func @factorial_Int : &thin (%Int) -> %Int {
$entry(%a: %Int):
  %0 = int_literal 1  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %2
  %2 = call @-L-E_Int_Int (%a: %Int, %1: %Int)  	// user: %3
  %3 = struct_extract %2: %Bool, #Bool.value  	// user: 
  break %3: %Builtin.Bool, $if.0, $fail.0

$if.0:			// preds: entry
  %5 = int_literal 1  	// user: %6
  %6 = struct %Int (%5: %Builtin.Int64)  	// user: %7
  return %6

$fail.0:			// preds: entry
  break $else.1

$else.1:			// preds: fail.0
  %9 = int_literal 1  	// user: %10
  %10 = struct %Int (%9: %Builtin.Int64)  	// user: %11
  %11 = call @-M_Int_Int (%a: %Int, %10: %Int)  	// user: %12
  %12 = call @factorial_Int (%11: %Int)  	// user: %13
  %13 = call @-A_Int_Int (%a: %Int, %12: %Int)  	// user: %14
  return %13
}

func @-M_Int_Int : &thin (%Int, %Int) -> %Int

func @-A_Int_Int : &thin (%Int, %Int) -> %Int

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %2
  %2 = call @factorial_Int (%1: %Int)  	// user: %3
  %3 = call @print_Int (%2: %Int) 
  %4 = int_literal 10  	// user: %5
  %5 = struct %Int (%4: %Builtin.Int64)  	// user: %6
  %6 = call @factorial_Int (%5: %Int)  	// user: %7
  %7 = call @print_Int (%6: %Int) 
  %8 = int_literal 1  	// user: %9
  %9 = struct %Int (%8: %Builtin.Int64)  	// user: %12
  %10 = int_literal 3  	// user: %11
  %11 = struct %Int (%10: %Builtin.Int64)  	// user: %12
  %12 = call @-P_Int_Int (%9: %Int, %11: %Int)  	// user: %13
  %13 = call @factorial_Int (%12: %Int)  	// user: %14
  %14 = call @print_Int (%13: %Int) 
  %15 = int_literal 2  	// user: %16
  %16 = struct %Int (%15: %Builtin.Int64)  	// user: %17
  %17 = call @dupe_Int (%16: %Int)  	// user: %dupe
  variable_decl %dupe = %17: (%Int, %Int)  	// users: %18, %19
  %18 = tuple_extract %dupe: (%Int, %Int), 0  	// user: %20
  %19 = tuple_extract %dupe: (%Int, %Int), 1  	// user: %20
  %20 = call @-P_Int_Int (%18: %Int, %19: %Int)  	// user: %21
  %21 = call @factorial_Int (%20: %Int)  	// user: %w
  variable_decl %w = %21: %Int  	// user: %22
  %22 = call @print_Int (%w: %Int) 
  %23 = int_literal 3  	// user: %24
  %24 = struct %Int (%23: %Builtin.Int64)  	// user: %25
  %25 = call @factorial_Int (%24: %Int)  	// user: %26
  %26 = call @factorial_Int (%25: %Int)  	// user: %27
  %27 = call @print_Int (%26: %Int) 
  %28 = call @void_ () 
  %29 = call @two_ ()  	// user: %30
  %30 = call @print_Int (%29: %Int) 
  return ()
}

func @dupe_Int : &thin (%Int) -> (%Int, %Int) {
$entry(%a: %Int):
  %0 = tuple (%a: %Int, %a: %Int)  	// user: %1
  return %0
}