func @fib_Int : &thin (%Int) -> %Int {
$entry(%a: %Int):
  %0 = int_literal 0  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %2
  %2 = call @-L_Int_Int (%a: %Int, %1: %Int)  	// user: %3
  %3 = struct_extract %2: %Bool, #Bool.value  	// user: 
  break %3: %Builtin.Bool, $if.0, $exit

$if.0:			// preds: entry
  %5 = call @fatalError_ () 
  break $exit

$exit:			// preds: entry, if.0
  %7 = int_literal 1  	// user: %8
  %8 = struct %Int (%7: %Builtin.Int64)  	// user: %9
  %9 = call @-L-E_Int_Int (%a: %Int, %8: %Int)  	// user: %10
  %10 = struct_extract %9: %Bool, #Bool.value  	// user: 
  break %10: %Builtin.Bool, $if.0, $fail.0

$if.0:			// preds: exit
  %12 = int_literal 1  	// user: %13
  %13 = struct %Int (%12: %Builtin.Int64)  	// user: %14
  return %13

$fail.0:			// preds: exit
  break $else.1

$else.1:			// preds: fail.0
  %16 = int_literal 1  	// user: %17
  %17 = struct %Int (%16: %Builtin.Int64)  	// user: %18
  %18 = call @-M_Int_Int (%a: %Int, %17: %Int)  	// user: %19
  %19 = call @fib_Int (%18: %Int)  	// user: %24
  %20 = int_literal 2  	// user: %21
  %21 = struct %Int (%20: %Builtin.Int64)  	// user: %22
  %22 = call @-M_Int_Int (%a: %Int, %21: %Int)  	// user: %23
  %23 = call @fib_Int (%22: %Int)  	// user: %24
  %24 = call @-P_Int_Int (%19: %Int, %23: %Int)  	// user: %25
  return %24
}

func @-L_Int_Int : &thin (%Int, %Int) -> %Bool

func @fatalError_ : &thin () -> %Builtin.Void

func @-L-E_Int_Int : &thin (%Int, %Int) -> %Bool

func @-M_Int_Int : &thin (%Int, %Int) -> %Int

func @-P_Int_Int : &thin (%Int, %Int) -> %Int

func @..._Int_Int : &thin (%Int, %Int) -> %Range

func @print_Int : &thin (%Int) -> %Builtin.Void