// RUN: -Ohigh -emit-vir
// CHECK: VIR

// this file checks the flattening of struct and tuple combonations


// VIR-CHECK:
// VIR: func @mutating_t : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 6 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = call @print_tI (%1: #Int)
// VIR:   return ()
// VIR: }
func mutating :: () = {
    var t = (1, 2)
    t.0 = 2
    print t.1 + 4
}

// VIR-CHECK:
// VIR: func @nonMutating_t : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 9 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = call @print_tI (%1: #Int)
// VIR:   return ()
// VIR: }
func nonMutating :: () = {
    let t = (3, 4)
    print t.1 + 5
}


type Box { let a: Int }

func testMultilpleStructs :: () = {
    let b = Box 1
    let t = (b, b)
    print t.0.a + 2
}
// VIR-CHECK:
// VIR: func @main : &thin () -> #Builtin.Void {
// VIR: $entry:
// VIR:   %0 = int_literal 3 	// user: %1
// VIR:   %1 = struct %Int, (%0: #Builtin.Int64) 	// user: %2
// VIR:   %2 = call @print_tI (%1: #Int)
// VIR:   return ()
// VIR: }

