
// type foo, { i64 i64 } type
// implicit memberwise initialser is bottomdded
type StackOf2 {
    var bottom: Int
    var top: Int
    
    func sum :: () -> Int = do return bottom + top
    func pop :: () -> Int = do return top
}

func push :: Int StackOf2 -> StackOf2 = (val stack) do
    return StackOf2 stack.top val

func empty :: -> StackOf2 = do
    return StackOf2 0 0


var stack = StackOf2 2 10

print (stack.sum ())
// test: 12

stack = push 3 stack
print (stack.pop ())
// test: 3

stack = empty ()

print stack.bottom == stack.top
// test: true

