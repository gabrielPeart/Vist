
type %Gen = { %Int }
type %Int = { %Builtin.Int64 }

func @generate_mGen : &method (%*Gen) -> %Int {
$entry(%self: %*Gen):
  %num = struct_element %self: %*Gen, #num  	// user: %0
  %0 = load %num: %*I  	// user: %1
  yield @loop_thunk  (%0: %Int) 
}

func @generate : &method (%*Gen) -> %Int

func @Gen_tI : &thin (%Int) -> %Gen {
$entry(%$0: %Int):
  %self = alloc %Gen  	// users: %num, %1
  %num = struct_element %self: %*Gen, #num  	// user: %0
  store %$0 in %num: %*I 
  %1 = load %self: %*Gen  	// user: %2
  return %1
}

func @loop_thunk : &thin (%Int) -> %Builtin.Void {
$entry(%a: %Int):
  %0 = call @print_tI (%a: %Int) 
  yield_unwind
}

func @print_tI : &thin (%Int) -> %Builtin.Void

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %2
  %2 = call @Gen_tI (%1: %Int)  	// user: %gen
  variable_decl %gen = %2: %Gen  	// user: %4
  %3 = alloc %Gen  	// users: %4, %generate
  store %gen in %3: %*Gen 
  %generate = call @generate_mGen (%3: %*Gen) 
  return ()
}