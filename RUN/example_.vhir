
type %Int = { %Builtin.Int64 }
type %Foo.refcounted = { %*Foo, %Builtin.Int32 }
type %Foo = { %Int }
type %RefcountedObject = { %Builtin.OpaquePointer, %Builtin.Int32 }

func @fooer_tI : &thin (%Int) -> %Foo.refcounted {
$entry(%$0: %Int):
  %0 = call @Foo_tI (%$0: %Int)  	// user: %2
  %1 = alloc %Foo.refcounted  	// users: %2, nil, %3
  store %0 in %1: %*Foo.refcounted 
  %3 = load %1: %*Foo.refcounted  	// user: %f
  variable_decl %f = %3: %Foo.refcounted  	// user: %5
  %4 = alloc %Foo.refcounted  	// users: %5, nil, %6, %7, %8
  store %f in %4: %*Foo.refcounted 
  %6 = retain_object %4: %*Foo.refcounted 
  %7 = release_unowned_object %4: %*Foo.refcounted 
  %8 = load %4: %*Foo.refcounted  	// user: %9
  return %8
}

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 4  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %2
  %2 = call @fooer_tI (%1: %Int)  	// user: %4
  %3 = alloc %Foo.refcounted  	// users: %4, nil, %5
  store %2 in %3: %*Foo.refcounted 
  %5 = dealloc_unowned_object %3: %*Foo.refcounted 
  return ()
}

func @Foo_tI : &thin (%Int) -> %Foo.refcounted {
$entry(%$0: %Int):
  %storage = alloc_object %Foo.refcounted  	// user: %0
  %0 = bitcast %storage: %*RefcountedObject to %*Foo.refcounted  	// users: %1, %2, %5, %6
  %1 = retain_object %0: %*Foo.refcounted 
  %2 = struct_element %0: %*Foo.refcounted, #object  	// user: %3
  %3 = load %2: %**Foo  	// user: %a
  %a = struct_element %3: %*Foo, #a  	// user: %4
  store %$0 in %a: %*I 
  %5 = release_unowned_object %0: %*Foo.refcounted 
  %6 = load %0: %*Foo.refcounted  	// user: %7
  return %6
}