
type %HalfOpenRange = { %Int, %Int }
type %Bool = { %Builtin.Bool }
type %Int = { %Builtin.Int64 }

global %y.global: %Int

func @HalfOpenRange_tII : &thin (%Int, %Int) -> %HalfOpenRange {
$entry(%$0: %Int, %$1: %Int):
  %self = alloc %HalfOpenRange  	// users: %start, %end, %2
  %start = struct_element %self: %*HalfOpenRange, #start  	// user: %0
  %end = struct_element %self: %*HalfOpenRange, #end  	// user: %1
  store %$0 in %start: %*I 
  store %$1 in %end: %*I 
  %2 = load %self: %*HalfOpenRange  	// user: %3
  return %2
}

func @-L_tII : &thin (%Int, %Int) -> %Bool

func @main.loop_thunk : &thin (%Int) -> %Builtin.Void {
$entry(%a: %Int):
  %0 = load %y.global: %*I  	// user: %1
  %1 = call @-P_tII (%a: %Int, %0: %Int)  	// user: %2
  %2 = call @print_tI (%1: %Int) 
  return ()
}

func @print_tI : &thin (%Int) -> %Builtin.Void

func @-P_tII : &thin (%Int, %Int) -> %Int

func @generate_mHalfOpenRangePtI : &method (%HalfOpenRange, %*tI) -> %Builtin.Void {
$entry(%self: %HalfOpenRange, %loop_thunk: %*tI):
  %start = struct_extract %self: %HalfOpenRange, #start  	// user: %1
  %0 = alloc %Int  	// users: %1, %3, %6, %8, %12
  store %start in %0: %*I 
  break $cond

$cond:			// preds: entry, loop
  %3 = load %0: %*I  	// user: %4
  %end = struct_extract %self: %HalfOpenRange, #end  	// user: %4
  %4 = call @-L_tII (%3: %Int, %end: %Int)  	// user: %cond
  %cond = struct_extract %4: %Bool, #value  	// user: nil
  break %cond: %Builtin.Bool, $loop, $loop.exit

$loop:			// preds: cond
  %6 = load %0: %*I  	// user: %7
  %7 = apply %loop_thunk (%6: %Int) 
  %8 = load %0: %*I  	// user: %11
  %9 = int_literal 1  	// user: %10
  %10 = struct %I (%9: %Builtin.Int64)  	// user: %11
  %11 = call @-P_tII (%8: %Int, %10: %Int)  	// user: %12
  store %11 in %0: %*I 
  break $cond

$loop.exit:			// preds: cond
  return ()
}

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %4
  %2 = int_literal 10  	// user: %3
  %3 = struct %I (%2: %Builtin.Int64)  	// user: %4
  %4 = call @HalfOpenRange_tII (%1: %Int, %3: %Int)  	// user: %range
  variable_decl %range = %4: %HalfOpenRange  	// user: %8
  %5 = int_literal 1  	// user: %6
  %6 = struct %I (%5: %Builtin.Int64)  	// user: %y
  variable_decl %y = %6: %Int  	// user: %7
  store %y in %y.global: %*I 
  %8 = call @generate_mHalfOpenRangePtI (%range: %HalfOpenRange, %main.loop_thunk: %*tI) 
  return ()
}
