
type %Int = { %Builtin.Int64 }
type %Bool = { %Builtin.Bool }

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %4
  %2 = int_literal 2  	// user: %3
  %3 = struct %Int (%2: %Builtin.Int64)  	// user: %4
  %4 = call @-L_Int_Int (%1: %Int, %3: %Int)  	// user: %5
  %5 = struct_extract %4: %Bool, #Bool.value  	// user: 
  break %5: %Builtin.Bool, $if.0, $exit

$if.0:			// preds: entry
  %7 = int_literal 1100  	// user: %8
  %8 = struct %Int (%7: %Builtin.Int64)  	// user: %9
  %9 = call @print_Int (%8: %Int) 
  break $exit

$exit:			// preds: entry, if.0
  return ()
}

func @-L_Int_Int : &thin (%Int, %Int) -> %Bool

func @print_Int : &thin (%Int) -> %Builtin.Void