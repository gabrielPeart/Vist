
type %Int = { %Builtin.Int64 }
type %Bool = { %Builtin.Bool }

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// user: %9
  %2 = int_literal 1  	// user: %3
  %3 = struct %Int (%2: %Builtin.Int64)  	// user: %8
  %4 = int_literal 1  	// user: %5
  %5 = struct %Int (%4: %Builtin.Int64)  	// user: %8
  %6 = bool_literal false  	// user: %7
  %7 = struct %Bool (%6: %Builtin.Bool)  	// user: %8
  %8 = tuple (%3: %Int, %5: %Int, %7: %Bool)  	// user: %9
  %9 = tuple (%1: %Int, %8: (%Int, %Int, %Bool))  	// user: %11
  %10 = alloc (%Int, (%Int, %Int, %Bool))  	// user: %11
  store %9 in %10: %*Int.Int.Int.Bool.tuple.tuple 
  %12 = bool_literal true  	// user: %13
  %13 = struct %Bool (%12: %Builtin.Bool)  	// user: %16
  %14 = tuple_element %10: %*Int.Int.Int.Bool.tuple.tuple, 1  	// user: %15
  %15 = tuple_element %14: %*Int.Int.Bool.tuple, 2  	// user: %16
  store %13 in %15: %*Bool 
  %17 = load %10: %*Int.Int.Int.Bool.tuple.tuple  	// user: %18
  %18 = tuple_extract %17: (%Int, (%Int, %Int, %Bool)), 1  	// user: %19
  %19 = tuple_extract %18: (%Int, %Int, %Bool), 2  	// user: %20
  %20 = call @print_Bool (%19: %Bool) 
  return ()
}

func @print_Bool : &thin (%Bool) -> %Builtin.Void