
type %Bool = { %Builtin.Bool }
type %Int = { %Builtin.Int64 }

func @main : () -> %Builtin.Void {
$entry:
  %0 = int_literal 2  	// uses: %1
  %1 = struct %Int (%0: %Builtin.Int64)  	// uses: %a
  variable_decl %a = %1: %Int 
  %2 = int_literal 1  	// uses: %3
  %3 = struct %Int (%2: %Builtin.Int64)  	// uses: %b
  variable_decl %b = %3: %Int 
  break $cond

$cond:			// preds: entry, loop
  %5 = bool_literal false  	// uses: %6
  %6 = struct %Bool (%5: %Builtin.Bool)  	// uses: %cond
  %cond = struct_extract %6: %Bool, #Bool.value  	// uses: 
  break %cond: %Builtin.Bool, $loop, $loop.exit

$loop:			// preds: cond
  %8 = int_literal 1  	// uses: %9
  %9 = struct %Int (%8: %Builtin.Int64)  	// uses: %10
  %10 = call @print_Int (%9: %Int) 
  break $cond

$loop.exit:			// preds: cond
  return ()
}

func @print_Int : (%Int) -> %Builtin.Void