
type %String = { %Builtin.OpaquePointer, %Int, %Int }
type %Bool = { %Builtin.Bool }
type %Int = { %Builtin.Int64 }

func @print_tI : &thin (%Int) -> %Builtin.Void

func @print_tString : &thin (%String) -> %Builtin.Void

func @String_topi64b : &thin (%Builtin.OpaquePointer, %Builtin.Int64, %Builtin.Bool) -> %String

func @print_tB : &thin (%Bool) -> %Builtin.Void

func @isUTF8Encoded_mString : &method (%*String) -> %Bool

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = string_literal utf16 "aaaaðŸ¤”"  	// user: %1
  %size = int_literal 9  	// user: %1
  %isUTF8 = bool_literal false  	// user: %1
  %1 = call @String_topi64b (%0: %Builtin.OpaquePointer, %size: %Builtin.Int64, %isUTF8: %Builtin.Bool)  	// user: %b
  variable_decl %b = %1: %String  	// users: %2, %5, %9, %12
  %2 = struct_extract %b: %String, #length  	// user: %3
  %3 = call @print_tI (%2: %Int) 
  %4 = alloc %String  	// users: %5, %6
  store %b in %4: %*String 
  %6 = call @bufferCapacity_mString (%4: %*String)  	// user: %7
  %7 = call @print_tI (%6: %Int) 
  %8 = alloc %String  	// users: %9, %10
  store %b in %8: %*String 
  %10 = call @isUTF8Encoded_mString (%8: %*String)  	// user: %11
  %11 = call @print_tB (%10: %Bool) 
  %12 = call @print_tString (%b: %String) 
  return ()
}

func @bufferCapacity_mString : &method (%*String) -> %Int