

type Int {
    var value: LLVM.Int64

    init Int = |o| {
        value = o.value
    }

    init LLVM.Int = |v| {
        value = v
    }

}



type Bool {
    var value: LLVM.Bool

    init Bool = |o| {
        value = o.value
    }

    init LLVM.Bool = |v| {
        value = v
    }
}



type Double {
    var value: LLVM.Double

    init Double = |o| {
        value = o.value
    }

    init LLVM.Double = |v| {
        value = v
    }
}


func print: Int = |a| do print(a.value)
func print: Bool = |a| do print(a.value)
func print: Double = |a| do print(a.value)





func foo: Int Int -> Int = |a b| do
    return Int(LLVM.i_add(a.value b.value))


let bo = Bool(true)
let xx = Double(3.0)



let a = Int(3)
let b = Int(a)

let c = foo(a b)

print(c)
print(bo)
print(xx)

//print(foo(1 2))
