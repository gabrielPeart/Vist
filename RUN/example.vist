


// type foo, { i64 i64 } type
// implicit memberwise initialser is added
type StackOf2 {
    var a: Int
    var b: Int
    
    // a complex initialiser
    init Int = (v) {
        a = v
        b = v * 2
    }
    
    func sum :: () -> Int = do return a + b
    
    func pop :: () -> Int = do return b
    
    @mutating
    func push :: Int = (u) {
        a = b
        b = u
    }
    
}

/*
 Currently `self` is accessed by passing in the first arg
 This `ParameterStructVariable` isnt able to be mutated :9
 We need a way of mutating state in methods
 */




//print (stack-pop 1) // syntax idea

var stack = StackOf2 2 10

print (stack.sum () + stack.pop ())

stack.push 3
print (stack.pop ())

print stack.a == stack.b

let stack2 = StackOf2 12
