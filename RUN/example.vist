

// ----------------------------------------------------
// types
// ----------------------------------------------------

type Int {
    var value: Builtin.Int64
    
    init () = {
        let v = 0
        value = v.value
    }
}
type Int32 {
    var value: Builtin.Int32
}

type Bool {
    var value: Builtin.Bool
    
    init () = {
        let b = false
        value = b.value
    }
}

type Double {
    var value: Builtin.Double
}

type Range {
    let start: Int
    let end: Int
}


//type Array {
//
//    var count: Int
//    var capacity: Int
//    var ptr: Builtin.Pointer
//
//}


// ----------------------------------------------------
// free functions
// ----------------------------------------------------

@public @inline func print :: Int = (a) do _print a.value
@public @inline func print :: Int32 = (a) do _print a.value
@public @inline func print :: Bool = (a) do _print a.value
@public @inline func print :: Double = (a) do _print a.value

// TODO: print message

@inline func _expect :: Bool Bool -> Bool = (val assume) do
    return Bool (Builtin.expect val.value assume.value)

@public @inline @noreturn func fatalError :: () = do Builtin.trap ()
@public @inline func assert :: Bool = do
    if _expect $0 true do () else do Builtin.trap ()


// internal function to stdlib, takes a Builtin.Int and fails if true
@inline func condFail :: Builtin.Bool = (cond) do
    if _expect (Bool cond) false do Builtin.trap ()


// ----------------------------------------------------
// operators
// ----------------------------------------------------

// int

@public @inline @operator(80)
func + :: Int Int -> Int = (a b) {
    let v = Builtin.i_add a.value b.value
    Builtin.cond_fail v.1
    return Int v.0
}

@public @inline @operator(80)
func - :: Int Int -> Int = (a b) {
    let v = Builtin.i_sub a.value b.value
    condFail v.1
    return Int v.0
}

@public @inline @operator(100)
func * :: Int Int -> Int = (a b) {
    let v = Builtin.i_mul a.value b.value
    condFail v.1
    return Int v.0
}

@public @inline @operator(20)
func == :: Int Int -> Bool = (a b) do
    return Bool (Builtin.i_eq a.value b.value)










