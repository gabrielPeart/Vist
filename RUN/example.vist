

type Int {
    var value: LLVM.Int64

    init Int = |o| {
        value = o.value
    }

    init LLVM.Int = |v| {
        value = v
    }

}



type Bool {
    var value: LLVM.Bool

    init Bool = |o| {
        value = o.value
    }

    init LLVM.Bool = |v| {
        value = v
    }
}



type Double {
    var value: LLVM.Double

    init Double = |o| {
        value = o.value
    }

    init LLVM.Double = |v| {
        value = v
    }
}



@inline func print: Int = |a| do print(a.value)
@inline func print: Bool = |a| do print(a.value)
@inline func print: Double = |a| do print(a.value)


@inline
func add: Int Int -> Int = |a b| do
    return Int(LLVM.i_add(a.value b.value))

@inline
func add: Double Double -> Double = |a b| do
    return Double(LLVM.f_add(a.value b.value))

@inline
func cmp_lt: Int Int -> LLVM.Bool = |a b| do
    return LLVM.i_cmp_lt(a.value b.value)

@inline
@operator(80)
func +: Int Int -> Int = |a b| do
    return Int(LLVM.i_add(a.value b.value))


let a = Int(3)
let b = Int(4)

let x = a + b

print(x)
