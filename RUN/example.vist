concept Eq {
    var a: Int, b: Int
    
    func sum :: -> Int
}

type Bar {
    var x: Bool, b: Int, a: Int
    
    func sum :: -> Int = do
    return a + b
}

type Baz {
    var a: Int, b: Int
    
    func sum :: -> Int = do return 1
}

func foo :: Eq Int -> Int = (a b) do
return a.sum () + b
func foo2 :: Eq Int -> Int = (a b) do
return a.a + (a.b * 2) + b

let bar = Bar true 11 4
let baz = Baz 2 3

print (foo bar 2) // test: 17
print (foo2 bar 2) // test: 28
print (foo baz 2) // test: 3

print 1 << 2
print 8 >> 3

print 6 ~& 5
print 5 ~| 3
print 5 ~^ 3

type Foo {
    var a: Bar, b: Bool
}


var f = Foo (Bar false 1 1) false

f.a.x = true

print f.a.x

var a = (1, (2, 2), f)

a.0 = 2
a.1 = (1, 1)

print a.0
a.1 .1 = 4

print a.1 .1

