

concept Eq {
    var a: Int
}

@public
func foo :: Eq Int -> Int = (a b) do
    return a.a + b


type Bar {
    var b: Bool
    var a: Int
}

let bar = Bar true 4
let foo = foo bar 2

print foo


/*
 
 
 
 
 
type Foo {
    var a: Int
}





type Bar (T | Eq) {
    let t: T
}


let b = (Foo 1)
*/

//func foo T :: T T -> Bool = (a b) do
//    return true







//type Array (Element | Foo Bar) {
//
//    var count: Int
//    var capacity: Int
//    var ptr: LLVM.Pointer
//}




// constrained by Eq
//func equal (T | Eq) :: T T -> Bool = (a b) do
//    return a == b


