
type %String = { %Builtin.OpaquePointer, %Int, %Int }
type %Int = { %Builtin.Int64 }



func @print_tI : &thin (%Int) -> %Builtin.Void

func @print_tString : &thin (%String) -> %Builtin.Void

func @main : &thin () -> %Builtin.Void {
$entry:
  %0 = int_literal 1  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %2
  %2 = call @foo_tI (%1: %Int) 
  %3 = string_literal utf8 "memes"  	// user: %4
  %size = int_literal 6  	// user: %4
  %isUTF8 = bool_literal true  	// user: %4
  %4 = call @String_topi64b (%3: %Builtin.OpaquePointer, %size: %Builtin.Int64, %isUTF8: %Builtin.Bool)  	// user: %5
  %5 = call @print_tString (%4: %String) 
  %6 = string_literal utf16 "ðŸ˜ŽðŸ˜—memes"  	// user: %7
  %size = int_literal 14  	// user: %7
  %isUTF8 = bool_literal false  	// user: %7
  %7 = call @String_topi64b (%6: %Builtin.OpaquePointer, %size: %Builtin.Int64, %isUTF8: %Builtin.Bool)  	// user: %8
  %8 = call @print_tString (%7: %String) 
  return ()
}

func @foo_tI : &thin (%Int) -> %Builtin.Void {
$entry(%$0: %Int):
  %0 = call @print_tI (%$0: %Int) 
  return ()
}

func @String_topi64b : &thin (%Builtin.OpaquePointer, %Builtin.Int64, %Builtin.Bool) -> %String
