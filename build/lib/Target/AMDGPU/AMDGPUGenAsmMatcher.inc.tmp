/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Assembly Matcher Source Fragment                                           *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/


#ifdef GET_ASSEMBLER_HEADER
#undef GET_ASSEMBLER_HEADER
  // This should be included into the middle of the declaration of
  // your subclasses implementation of MCTargetAsmParser.
  uint64_t ComputeAvailableFeatures(const FeatureBitset& FB) const;
  void convertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                       const OperandVector &Operands);
  void convertToMapAndConstraints(unsigned Kind,
                           const OperandVector &Operands) override;
  bool mnemonicIsValid(StringRef Mnemonic, unsigned VariantID) override;
  unsigned MatchInstructionImpl(const OperandVector &Operands,
                                MCInst &Inst,
                                uint64_t &ErrorInfo, bool matchingInlineAsm,
                                unsigned VariantID = 0);

  enum OperandMatchResultTy {
    MatchOperand_Success,    // operand matched successfully
    MatchOperand_NoMatch,    // operand did not match
    MatchOperand_ParseFail   // operand matched but had errors
  };
  OperandMatchResultTy MatchOperandParserImpl(
    OperandVector &Operands,
    StringRef Mnemonic);
  OperandMatchResultTy tryCustomParseOperand(
    OperandVector &Operands,
    unsigned MCK);

#endif // GET_ASSEMBLER_HEADER_INFO


#ifdef GET_OPERAND_DIAGNOSTIC_TYPES
#undef GET_OPERAND_DIAGNOSTIC_TYPES

#endif // GET_OPERAND_DIAGNOSTIC_TYPES


#ifdef GET_REGISTER_MATCHER
#undef GET_REGISTER_MATCHER

// Flags for subtarget features that participate in instruction matching.
enum SubtargetFeatureFlag : uint8_t {
  Feature_isSICI = (1ULL << 5),
  Feature_isCIOnly = (1ULL << 1),
  Feature_isVI = (1ULL << 6),
  Feature_DisableInst = (1ULL << 0),
  Feature_isGCN = (1ULL << 3),
  Feature_isSI = (1ULL << 4),
  Feature_isCIVI = (1ULL << 2),
  Feature_None = 0
};

#endif // GET_REGISTER_MATCHER


#ifdef GET_SUBTARGET_FEATURE_NAME
#undef GET_SUBTARGET_FEATURE_NAME

// User-level names for subtarget features that participate in
// instruction matching.
static const char *getSubtargetFeatureName(uint64_t Val) {
  switch(Val) {
  case Feature_isSICI: return "";
  case Feature_isCIOnly: return "";
  case Feature_isVI: return "";
  case Feature_DisableInst: return "";
  case Feature_isGCN: return "";
  case Feature_isSI: return "";
  case Feature_isCIVI: return "";
  default: return "(unknown)";
  }
}

#endif // GET_SUBTARGET_FEATURE_NAME


#ifdef GET_MATCHER_IMPLEMENTATION
#undef GET_MATCHER_IMPLEMENTATION

static void applyMnemonicAliases(StringRef &Mnemonic, uint64_t Features, unsigned VariantID) {
  switch (VariantID) {
    case 0:
      switch (Mnemonic.size()) {
      default: break;
      case 9:	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "dd_u32", 6))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_add_u32"
            Mnemonic = "v_add_i32";
          return;
        case 'n':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "op_e", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[8] != '2')
              break;
            Mnemonic = "v_nop";	 // "v_nop_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[8] != '4')
              break;
            Mnemonic = "v_nop";	 // "v_nop_e64"
            return;
          }
          break;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "ub_u32", 6))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_sub_u32"
            Mnemonic = "v_sub_i32";
          return;
        }
        break;
      case 12:	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "r_b32_e", 7))
            break;
          switch (Mnemonic[10]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[11] != '2')
              break;
            Mnemonic = "v_or_b32";	 // "v_or_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[11] != '4')
              break;
            Mnemonic = "v_or_b32";	 // "v_or_b32_e64"
            return;
          }
          break;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "ubrev_u32", 9))
            break;
          if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_subrev_u32"
            Mnemonic = "v_subrev_i32";
          return;
        }
        break;
      case 13:	 // 99 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 11 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'd':	 // 9 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 5 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_add_f16";	 // "v_add_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_add_f16";	 // "v_add_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_add_f32";	 // "v_add_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_add_f32";	 // "v_add_f32_e64"
                  return;
                }
                break;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                  break;
                Mnemonic = "v_add_f64";	 // "v_add_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_add_i32";	 // "v_add_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_add_i32";	 // "v_add_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "16_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_add_u16";	 // "v_add_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_add_u16";	 // "v_add_u16_e64"
                return;
              }
              break;
            }
            break;
          case 'n':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_b32_e", 7))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_and_b32";	 // "v_and_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_and_b32";	 // "v_and_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'b':	 // 5 strings to match.
          if (Mnemonic[3] != 'f')
            break;
          switch (Mnemonic[4]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (Mnemonic[5] != '_')
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "32_e64", 6))
                break;
              Mnemonic = "v_bfe_i32";	 // "v_bfe_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "32_e64", 6))
                break;
              Mnemonic = "v_bfe_u32";	 // "v_bfe_u32_e64"
              return;
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+5, "_b32_e64", 8))
              break;
            Mnemonic = "v_bfi_b32";	 // "v_bfi_b32_e64"
            return;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+5, "_b32_e", 6))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 6 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'l':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "rexcp_e", 7))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_clrexcp";	 // "v_clrexcp_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_clrexcp";	 // "v_clrexcp_e64"
              return;
            }
            break;
          case 'o':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "s_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_cos_f16";	 // "v_cos_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_cos_f16";	 // "v_cos_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_cos_f32";	 // "v_cos_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_cos_f32";	 // "v_cos_f32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'e':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "xp_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_exp_f16";	 // "v_exp_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_exp_f16";	 // "v_exp_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_exp_f32";	 // "v_exp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_exp_f32";	 // "v_exp_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ma_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_e64", 5))
              break;
            Mnemonic = "v_fma_f32";	 // "v_fma_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_fma_f64";	 // "v_fma_f64_e64"
            return;
          }
          break;
        case 'l':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_f", 4))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_log_f16";	 // "v_log_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_log_f16";	 // "v_log_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_log_f32";	 // "v_log_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_log_f32";	 // "v_log_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 38 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 18 strings to match.
            switch (Mnemonic[4]) {
            default: break;
            case 'c':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+5, "_f", 2))
                break;
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_mac_f16";	 // "v_mac_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_mac_f16";	 // "v_mac_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_mac_f32";	 // "v_mac_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_mac_f32";	 // "v_mac_f32_e64"
                  return;
                }
                break;
              }
              break;
            case 'd':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+5, "_f32_e64", 8))
                break;
              Mnemonic = "v_mad_f32";	 // "v_mad_f32_e64"
              return;
            case 'x':	 // 13 strings to match.
              if (Mnemonic[5] != '_')
                break;
              switch (Mnemonic[6]) {
              default: break;
              case 'f':	 // 5 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_f16";	 // "v_max_f16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_f16";	 // "v_max_f16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_f32";	 // "v_max_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_f32";	 // "v_max_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                    break;
                  Mnemonic = "v_max_f64";	 // "v_max_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 4 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_i16";	 // "v_max_i16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_i16";	 // "v_max_i16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_i32";	 // "v_max_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_i32";	 // "v_max_i32_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'u':	 // 4 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "6_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_u16";	 // "v_max_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_u16";	 // "v_max_u16_e64"
                    return;
                  }
                  break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "2_e", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[12] != '2')
                      break;
                    Mnemonic = "v_max_u32";	 // "v_max_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[12] != '4')
                      break;
                    Mnemonic = "v_max_u32";	 // "v_max_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'i':	 // 13 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 5 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_f16";	 // "v_min_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_f16";	 // "v_min_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_f32";	 // "v_min_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_f32";	 // "v_min_f32_e64"
                  return;
                }
                break;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                  break;
                Mnemonic = "v_min_f64";	 // "v_min_f64_e64"
                return;
              }
              break;
            case 'i':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_i16";	 // "v_min_i16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_i16";	 // "v_min_i16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_i32";	 // "v_min_i32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_i32";	 // "v_min_i32_e64"
                  return;
                }
                break;
              }
              break;
            case 'u':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_u16";	 // "v_min_u16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_u16";	 // "v_min_u16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_min_u32";	 // "v_min_u32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_min_u32";	 // "v_min_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "v_b32_e", 7))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mov_b32";	 // "v_mov_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mov_b32";	 // "v_mov_b32_e64"
              return;
            }
            break;
          case 'u':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_mul_f16";	 // "v_mul_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_mul_f16";	 // "v_mul_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_mul_f32";	 // "v_mul_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_mul_f32";	 // "v_mul_f32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                break;
              Mnemonic = "v_mul_f64";	 // "v_mul_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'n':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ot_b32_e", 8))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_not_b32";	 // "v_not_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_not_b32";	 // "v_not_b32_e64"
            return;
          }
          break;
        case 'r':	 // 12 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "4_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e64"
                return;
              }
              break;
            }
            break;
          case 's':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "4_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 13 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+4, "d_u32_e64", 9))
              break;
            Mnemonic = "v_sad_u32";	 // "v_sad_u32_e64"
            return;
          case 'i':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_f", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sin_f16";	 // "v_sin_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sin_f16";	 // "v_sin_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sin_f32";	 // "v_sin_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sin_f32";	 // "v_sin_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 8 strings to match.
            if (memcmp(Mnemonic.data()+4, "b_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 4 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_sub_f16";	 // "v_sub_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_sub_f16";	 // "v_sub_f16_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_e", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[12] != '2')
                    break;
                  Mnemonic = "v_sub_f32";	 // "v_sub_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[12] != '4')
                    break;
                  Mnemonic = "v_sub_f32";	 // "v_sub_f32_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sub_i32";	 // "v_sub_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sub_i32";	 // "v_sub_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "16_e", 4))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_sub_u16";	 // "v_sub_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_sub_u16";	 // "v_sub_u16_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "or_b32_e", 8))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_xor_b32";	 // "v_xor_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_xor_b32";	 // "v_xor_b32_e64"
            return;
          }
          break;
        }
        break;
      case 14:	 // 40 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 5 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'd':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "dc_u32_e", 8))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_addc_u32";	 // "v_addc_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_addc_u32";	 // "v_addc_u32_e64"
              return;
            }
            break;
          case 's':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "hr_i", 4))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_ashr_i64";	 // "v_ashr_i64_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "eil_f", 5))
            break;
          switch (Mnemonic[8]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "6_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "2_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "4_e", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "fb", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'h':	 // 4 strings to match.
            if (Mnemonic[6] != '_')
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "32_e", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "32_e", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b32_e", 6))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "sh", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'l':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_lshl_b64";	 // "v_lshl_b64_e64"
              return;
            }
            break;
          case 'r':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+6, "_b", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+9, "4_e64", 5))
                break;
              Mnemonic = "v_lshr_b64";	 // "v_lshr_b64_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 9 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "x3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_f32";	 // "v_max3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_i32";	 // "v_max3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_max3_u32";	 // "v_max3_u32_e64"
              return;
            }
            break;
          case 'e':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "d3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_f32";	 // "v_med3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_i32";	 // "v_med3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_med3_u32";	 // "v_med3_u32_e64"
              return;
            }
            break;
          case 'i':	 // 3 strings to match.
            if (memcmp(Mnemonic.data()+4, "n3_", 3))
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'f':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_f32";	 // "v_min3_f32_e64"
              return;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_i32";	 // "v_min3_i32_e64"
              return;
            case 'u':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "32_e64", 6))
                break;
              Mnemonic = "v_min3_u32";	 // "v_min3_u32_e64"
              return;
            }
            break;
          }
          break;
        case 's':	 // 8 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'q':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "rt_f", 4))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "6_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "2_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "4_e", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[13] != '2')
                  break;
                Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[13] != '4')
                  break;
                Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "bb_u32_e", 8))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[13] != '2')
                break;
              Mnemonic = "v_subb_u32";	 // "v_subb_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[13] != '4')
                break;
              Mnemonic = "v_subb_u32";	 // "v_subb_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 15:	 // 49 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'b':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "frev_b32_e", 10))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e64"
            return;
          }
          break;
        case 'c':	 // 14 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp_", 3))
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 6 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_f32";	 // "v_cmp_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_f64";	 // "v_cmp_f_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_i32";	 // "v_cmp_f_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_i64";	 // "v_cmp_f_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_u32";	 // "v_cmp_f_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_f_u64";	 // "v_cmp_f_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "_f", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_o_f32";	 // "v_cmp_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_o_f64";	 // "v_cmp_o_f64_e64"
              return;
            }
            break;
          case 't':	 // 4 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_i32";	 // "v_cmp_t_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_i64";	 // "v_cmp_t_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_u32";	 // "v_cmp_t_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_t_u64";	 // "v_cmp_t_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "_f", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_u_f32";	 // "v_cmp_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_u_f64";	 // "v_cmp_u_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'f':	 // 12 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'l':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "oor_f", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "6_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f16";	 // "v_floor_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f16";	 // "v_floor_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "2_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f32";	 // "v_floor_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f32";	 // "v_floor_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "4_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_floor_f64";	 // "v_floor_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_floor_f64";	 // "v_floor_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'r':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "act_f", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "6_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f16";	 // "v_fract_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f16";	 // "v_fract_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "2_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f32";	 // "v_fract_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f32";	 // "v_fract_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "4_e", 3))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[14] != '2')
                  break;
                Mnemonic = "v_fract_f64";	 // "v_fract_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[14] != '4')
                  break;
                Mnemonic = "v_fract_f64";	 // "v_fract_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'l':	 // 5 strings to match.
          if (memcmp(Mnemonic.data()+3, "dexp_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_ldexp_f64";	 // "v_ldexp_f64_e64"
            return;
          }
          break;
        case 'm':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "ad", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'a':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "k_f", 3))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_e32", 5))
                break;
              Mnemonic = "v_madak_f16";	 // "v_madak_f16_e32"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e32", 5))
                break;
              Mnemonic = "v_madak_f32";	 // "v_madak_f32_e32"
              return;
            }
            break;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "k_f", 3))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_e32", 5))
                break;
              Mnemonic = "v_madmk_f16";	 // "v_madmk_f16_e32"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_e32", 5))
                break;
              Mnemonic = "v_madmk_f32";	 // "v_madmk_f32_e32"
              return;
            }
            break;
          }
          break;
        case 'r':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "ndne_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "4_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e64"
              return;
            }
            break;
          }
          break;
        case 't':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "runc_f", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "6_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "2_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "4_e", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[14] != '2')
                break;
              Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[14] != '4')
                break;
              Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 16:	 // 75 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 60 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 56 strings to match.
            if (Mnemonic[4] != 'p')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 36 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+7, "q_", 2))
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_f32";	 // "v_cmp_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_f64";	 // "v_cmp_eq_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_i32";	 // "v_cmp_eq_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_i64";	 // "v_cmp_eq_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_u32";	 // "v_cmp_eq_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_eq_u64";	 // "v_cmp_eq_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'g':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_f32";	 // "v_cmp_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_f64";	 // "v_cmp_ge_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_i32";	 // "v_cmp_ge_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_i64";	 // "v_cmp_ge_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_u32";	 // "v_cmp_ge_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ge_u64";	 // "v_cmp_ge_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_f32";	 // "v_cmp_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_f64";	 // "v_cmp_gt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_i32";	 // "v_cmp_gt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_i64";	 // "v_cmp_gt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_u32";	 // "v_cmp_gt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_gt_u64";	 // "v_cmp_gt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'l':	 // 14 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_f32";	 // "v_cmp_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_f64";	 // "v_cmp_le_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_i32";	 // "v_cmp_le_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_i64";	 // "v_cmp_le_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_u32";	 // "v_cmp_le_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_le_u64";	 // "v_cmp_le_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "_f", 2))
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_lg_f32";	 // "v_cmp_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_lg_f64";	 // "v_cmp_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[8] != '_')
                    break;
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_f32";	 // "v_cmp_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_f64";	 // "v_cmp_lt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_i32";	 // "v_cmp_lt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_i64";	 // "v_cmp_lt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[10]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_u32";	 // "v_cmp_lt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_lt_u64";	 // "v_cmp_lt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'n':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+7, "e_", 2))
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_i32";	 // "v_cmp_ne_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_i64";	 // "v_cmp_ne_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_u32";	 // "v_cmp_ne_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_ne_u64";	 // "v_cmp_ne_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 's':	 // 6 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'f':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_f_f32";	 // "v_cmps_f_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_f_f64";	 // "v_cmps_f_f64_e64"
                  return;
                }
                break;
              case 'o':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_o_f32";	 // "v_cmps_o_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_o_f64";	 // "v_cmps_o_f64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_u_f32";	 // "v_cmps_u_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_u_f64";	 // "v_cmps_u_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'x':	 // 14 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'f':	 // 6 strings to match.
                if (Mnemonic[8] != '_')
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_f32";	 // "v_cmpx_f_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_f64";	 // "v_cmpx_f_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_i32";	 // "v_cmpx_f_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_i64";	 // "v_cmpx_f_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_u32";	 // "v_cmpx_f_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_f_u64";	 // "v_cmpx_f_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'o':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_o_f32";	 // "v_cmpx_o_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_o_f64";	 // "v_cmpx_o_f64_e64"
                  return;
                }
                break;
              case 't':	 // 4 strings to match.
                if (Mnemonic[8] != '_')
                  break;
                switch (Mnemonic[9]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_i32";	 // "v_cmpx_t_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_i64";	 // "v_cmpx_t_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_u32";	 // "v_cmpx_t_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_t_u64";	 // "v_cmpx_t_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "_f", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_u_f32";	 // "v_cmpx_u_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_u_f64";	 // "v_cmpx_u_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "be", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "d_f32_e64", 9))
                break;
              Mnemonic = "v_cubeid_f32";	 // "v_cubeid_f32_e64"
              return;
            case 'm':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "a_f32_e64", 9))
                break;
              Mnemonic = "v_cubema_f32";	 // "v_cubema_f32_e64"
              return;
            case 's':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
                break;
              Mnemonic = "v_cubesc_f32";	 // "v_cubesc_f32_e64"
              return;
            case 't':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
                break;
              Mnemonic = "v_cubetc_f32";	 // "v_cubetc_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 7 strings to match.
          if (memcmp(Mnemonic.data()+3, "ul", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case '_':	 // 6 strings to match.
            switch (Mnemonic[6]) {
            default: break;
            case 'h':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "i_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_hi_i32";	 // "v_mul_hi_i32_e64"
                return;
              case 'u':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_hi_u32";	 // "v_mul_hi_u32_e64"
                return;
              }
              break;
            case 'l':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "o_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+10, "32_e64", 6))
                  break;
                Mnemonic = "v_mul_lo_i32";	 // "v_mul_lo_i32_e64"
                return;
              case 'u':	 // 3 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '1':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "6_e", 3))
                    break;
                  switch (Mnemonic[14]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[15] != '2')
                      break;
                    Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[15] != '4')
                      break;
                    Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e64"
                    return;
                  }
                  break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_mul_lo_u32";	 // "v_mul_lo_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+6, "it_f32_e64", 10))
              break;
            Mnemonic = "v_mullit_f32";	 // "v_mullit_f32_e64"
            return;
          }
          break;
        case 's':	 // 8 strings to match.
          if (memcmp(Mnemonic.data()+3, "ubrev_", 6))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'f':	 // 4 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "6_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "2_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_e", 4))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[15] != '2')
                break;
              Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[15] != '4')
                break;
              Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_e", 4))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[15] != '2')
                break;
              Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[15] != '4')
                break;
              Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 17:	 // 133 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 5 strings to match.
          if (memcmp(Mnemonic.data()+3, "shrrev_", 7))
            break;
          switch (Mnemonic[10]) {
          default: break;
          case 'b':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+11, "16_e", 4))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e64"
              return;
            }
            break;
          case 'i':	 // 3 strings to match.
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_ashrrev_i64";	 // "v_ashrrev_i64_e64"
              return;
            }
            break;
          }
          break;
        case 'c':	 // 102 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 68 strings to match.
            if (Mnemonic[4] != 'p')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 14 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case 'n':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "q_f", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmp_neq_f32";	 // "v_cmp_neq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmp_neq_f64";	 // "v_cmp_neq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nge_f32";	 // "v_cmp_nge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nge_f64";	 // "v_cmp_nge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ngt_f32";	 // "v_cmp_ngt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_ngt_f64";	 // "v_cmp_ngt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nle_f32";	 // "v_cmp_nle_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nle_f64";	 // "v_cmp_nle_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlg_f32";	 // "v_cmp_nlg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlg_f64";	 // "v_cmp_nlg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlt_f32";	 // "v_cmp_nlt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmp_nlt_f64";	 // "v_cmp_nlt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+7, "ru_f", 4))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_tru_f32";	 // "v_cmp_tru_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_tru_f64";	 // "v_cmp_tru_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 's':	 // 18 strings to match.
              switch (Mnemonic[6]) {
              default: break;
              case '_':	 // 12 strings to match.
                switch (Mnemonic[7]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+8, "q_f", 3))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmps_eq_f32";	 // "v_cmps_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmps_eq_f64";	 // "v_cmps_eq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ge_f32";	 // "v_cmps_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ge_f64";	 // "v_cmps_ge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_gt_f32";	 // "v_cmps_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_gt_f64";	 // "v_cmps_gt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[8]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_le_f32";	 // "v_cmps_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_le_f64";	 // "v_cmps_le_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lg_f32";	 // "v_cmps_lg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lg_f64";	 // "v_cmps_lg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+9, "_f", 2))
                      break;
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lt_f32";	 // "v_cmps_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_lt_f64";	 // "v_cmps_lt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'x':	 // 6 strings to match.
                if (Mnemonic[7] != '_')
                  break;
                switch (Mnemonic[8]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_f_f32";	 // "v_cmpsx_f_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_f_f64";	 // "v_cmpsx_f_f64_e64"
                    return;
                  }
                  break;
                case 'o':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_o_f32";	 // "v_cmpsx_o_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_o_f64";	 // "v_cmpsx_o_f64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_u_f32";	 // "v_cmpsx_u_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_u_f64";	 // "v_cmpsx_u_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'x':	 // 36 strings to match.
              if (Mnemonic[6] != '_')
                break;
              switch (Mnemonic[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "q_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_f32";	 // "v_cmpx_eq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_f64";	 // "v_cmpx_eq_f64_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_i32";	 // "v_cmpx_eq_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_i64";	 // "v_cmpx_eq_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_u32";	 // "v_cmpx_eq_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_eq_u64";	 // "v_cmpx_eq_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'g':	 // 12 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_f32";	 // "v_cmpx_ge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_f64";	 // "v_cmpx_ge_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_i32";	 // "v_cmpx_ge_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_i64";	 // "v_cmpx_ge_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_u32";	 // "v_cmpx_ge_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_ge_u64";	 // "v_cmpx_ge_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_f32";	 // "v_cmpx_gt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_f64";	 // "v_cmpx_gt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_i32";	 // "v_cmpx_gt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_i64";	 // "v_cmpx_gt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_u32";	 // "v_cmpx_gt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_gt_u64";	 // "v_cmpx_gt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'l':	 // 14 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_f32";	 // "v_cmpx_le_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_f64";	 // "v_cmpx_le_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_i32";	 // "v_cmpx_le_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_i64";	 // "v_cmpx_le_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_u32";	 // "v_cmpx_le_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_le_u64";	 // "v_cmpx_le_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "_f", 2))
                    break;
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_lg_f32";	 // "v_cmpx_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_lg_f64";	 // "v_cmpx_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 6 strings to match.
                  if (Mnemonic[9] != '_')
                    break;
                  switch (Mnemonic[10]) {
                  default: break;
                  case 'f':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_f32";	 // "v_cmpx_lt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_f64";	 // "v_cmpx_lt_f64_e64"
                      return;
                    }
                    break;
                  case 'i':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_i32";	 // "v_cmpx_lt_i32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_i64";	 // "v_cmpx_lt_i64_e64"
                      return;
                    }
                    break;
                  case 'u':	 // 2 strings to match.
                    switch (Mnemonic[11]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_u32";	 // "v_cmpx_lt_u32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmpx_lt_u64";	 // "v_cmpx_lt_u64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 'n':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "e_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'i':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_i32";	 // "v_cmpx_ne_i32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_i64";	 // "v_cmpx_ne_i64_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_u32";	 // "v_cmpx_ne_u32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ne_u64";	 // "v_cmpx_ne_u64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "dmask_b32_e", 11))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e64"
              return;
            }
            break;
          case 'v':	 // 32 strings to match.
            if (memcmp(Mnemonic.data()+4, "t_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 20 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "16_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "16_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e64"
                    return;
                  }
                  break;
                }
                break;
              case '3':	 // 8 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 4 strings to match.
                  switch (Mnemonic[11]) {
                  default: break;
                  case '1':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+12, "6_e", 3))
                      break;
                    switch (Mnemonic[15]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (Mnemonic[16] != '2')
                        break;
                      Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e32"
                      return;
                    case '6':	 // 1 string to match.
                      if (Mnemonic[16] != '4')
                        break;
                      Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e64"
                      return;
                    }
                    break;
                  case '6':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+12, "4_e", 3))
                      break;
                    switch (Mnemonic[15]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (Mnemonic[16] != '2')
                        break;
                      Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e32"
                      return;
                    case '6':	 // 1 string to match.
                      if (Mnemonic[16] != '4')
                        break;
                      Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              case '6':	 // 6 strings to match.
                if (memcmp(Mnemonic.data()+8, "4_", 2))
                  break;
                switch (Mnemonic[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e64"
                    return;
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e64"
                    return;
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "32_e", 4))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'i':	 // 6 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e64"
                  return;
                }
                break;
              case '3':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_f", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "2_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "4_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 'u':	 // 6 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e64"
                  return;
                }
                break;
              case '3':	 // 4 strings to match.
                if (memcmp(Mnemonic.data()+8, "2_f", 3))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "2_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e64"
                    return;
                  }
                  break;
                case '6':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+12, "4_e", 3))
                    break;
                  switch (Mnemonic[15]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Mnemonic[16] != '2')
                      break;
                    Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e32"
                    return;
                  case '6':	 // 1 string to match.
                    if (Mnemonic[16] != '4')
                      break;
                    Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'l':	 // 10 strings to match.
          if (memcmp(Mnemonic.data()+3, "sh", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 'l':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+6, "rev_b", 5))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "6_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_lshlrev_b64";	 // "v_lshlrev_b64_e64"
              return;
            }
            break;
          case 'r':	 // 5 strings to match.
            if (memcmp(Mnemonic.data()+6, "rev_b", 5))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "6_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_lshrrev_b64";	 // "v_lshrrev_b64_e64"
              return;
            }
            break;
          }
          break;
        case 'm':	 // 14 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "d_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "2_i24_e64", 9))
                  break;
                Mnemonic = "v_mad_i32_i24";	 // "v_mad_i32_i24_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_i32_e64", 9))
                  break;
                Mnemonic = "v_mad_i64_i32";	 // "v_mad_i64_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "2_u24_e64", 9))
                  break;
                Mnemonic = "v_mad_u32_u24";	 // "v_mad_u32_u24_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+8, "4_u32_e64", 9))
                  break;
                Mnemonic = "v_mad_u64_u32";	 // "v_mad_u64_u32_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 6 strings to match.
            if (Mnemonic[4] != 'v')
              break;
            switch (Mnemonic[5]) {
            default: break;
            case '_':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+6, "fed_b32_e", 9))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e64"
                return;
              }
              break;
            case 'r':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+6, "el", 2))
                break;
              switch (Mnemonic[8]) {
              default: break;
              case 'd':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e64"
                  return;
                }
                break;
              case 's':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_i24_e", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_u24_e", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "ubbrev_u32_e", 12))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e64"
            return;
          }
          break;
        }
        break;
      case 18:	 // 49 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "lignbit_b32_e64", 15))
            break;
          Mnemonic = "v_alignbit_b32";	 // "v_alignbit_b32_e64"
          return;
        case 'b':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "cnt_u32_b32_e", 13))
            break;
          switch (Mnemonic[16]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[17] != '2')
              break;
            Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[17] != '4')
              break;
            Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e64"
            return;
          }
          break;
        case 'c':	 // 40 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case 's':	 // 26 strings to match.
            switch (Mnemonic[6]) {
            default: break;
            case '_':	 // 14 strings to match.
              switch (Mnemonic[7]) {
              default: break;
              case 'n':	 // 12 strings to match.
                switch (Mnemonic[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+9, "q_f", 3))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmps_neq_f32";	 // "v_cmps_neq_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmps_neq_f64";	 // "v_cmps_neq_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 4 strings to match.
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nge_f32";	 // "v_cmps_nge_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nge_f64";	 // "v_cmps_nge_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ngt_f32";	 // "v_cmps_ngt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_ngt_f64";	 // "v_cmps_ngt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                case 'l':	 // 6 strings to match.
                  switch (Mnemonic[9]) {
                  default: break;
                  case 'e':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nle_f32";	 // "v_cmps_nle_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nle_f64";	 // "v_cmps_nle_f64_e64"
                      return;
                    }
                    break;
                  case 'g':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlg_f32";	 // "v_cmps_nlg_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlg_f64";	 // "v_cmps_nlg_f64_e64"
                      return;
                    }
                    break;
                  case 't':	 // 2 strings to match.
                    if (memcmp(Mnemonic.data()+10, "_f", 2))
                      break;
                    switch (Mnemonic[12]) {
                    default: break;
                    case '3':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlt_f32";	 // "v_cmps_nlt_f32_e64"
                      return;
                    case '6':	 // 1 string to match.
                      if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                        break;
                      Mnemonic = "v_cmps_nlt_f64";	 // "v_cmps_nlt_f64_e64"
                      return;
                    }
                    break;
                  }
                  break;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+8, "ru_f", 4))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_tru_f32";	 // "v_cmps_tru_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_tru_f64";	 // "v_cmps_tru_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'x':	 // 12 strings to match.
              if (Mnemonic[7] != '_')
                break;
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "q_f", 3))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_eq_f32";	 // "v_cmpsx_eq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_eq_f64";	 // "v_cmpsx_eq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ge_f32";	 // "v_cmpsx_ge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ge_f64";	 // "v_cmpsx_ge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_gt_f32";	 // "v_cmpsx_gt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_gt_f64";	 // "v_cmpsx_gt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_le_f32";	 // "v_cmpsx_le_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_le_f64";	 // "v_cmpsx_le_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lg_f32";	 // "v_cmpsx_lg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lg_f64";	 // "v_cmpsx_lg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lt_f32";	 // "v_cmpsx_lt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_lt_f64";	 // "v_cmpsx_lt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 14 strings to match.
            if (Mnemonic[6] != '_')
              break;
            switch (Mnemonic[7]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "q_f", 3))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_neq_f32";	 // "v_cmpx_neq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_neq_f64";	 // "v_cmpx_neq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nge_f32";	 // "v_cmpx_nge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nge_f64";	 // "v_cmpx_nge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ngt_f32";	 // "v_cmpx_ngt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_ngt_f64";	 // "v_cmpx_ngt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nle_f32";	 // "v_cmpx_nle_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nle_f64";	 // "v_cmpx_nle_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlg_f32";	 // "v_cmpx_nlg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlg_f64";	 // "v_cmpx_nlg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+10, "_f", 2))
                    break;
                  switch (Mnemonic[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlt_f32";	 // "v_cmpx_nlt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpx_nlt_f64";	 // "v_cmpx_nlt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "ru_f", 4))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_tru_f32";	 // "v_cmpx_tru_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_tru_f64";	 // "v_cmpx_tru_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'd':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "iv_fmas_f", 9))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "2_e64", 5))
              break;
            Mnemonic = "v_div_fmas_f32";	 // "v_div_fmas_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "4_e64", 5))
              break;
            Mnemonic = "v_div_fmas_f64";	 // "v_div_fmas_f64_e64"
            return;
          }
          break;
        case 'm':	 // 4 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "vrelsd_b32_e", 12))
              break;
            switch (Mnemonic[16]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[17] != '2')
                break;
              Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[17] != '4')
                break;
              Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e64"
              return;
            }
            break;
          case 'q':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "sad_u", 5))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "6_u8_e64", 8))
                break;
              Mnemonic = "v_mqsad_u16_u8";	 // "v_mqsad_u16_u8_e64"
              return;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+10, "2_u8_e64", 8))
                break;
              Mnemonic = "v_mqsad_u32_u8";	 // "v_mqsad_u32_u8_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 19:	 // 33 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "lignbyte_b32_e64", 16))
            break;
          Mnemonic = "v_alignbyte_b32";	 // "v_alignbyte_b32_e64"
          return;
        case 'c':	 // 16 strings to match.
          if (memcmp(Mnemonic.data()+3, "mp", 2))
            break;
          switch (Mnemonic[5]) {
          default: break;
          case '_':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+6, "class_f", 7))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_class_f32";	 // "v_cmp_class_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_class_f64";	 // "v_cmp_class_f64_e64"
              return;
            }
            break;
          case 's':	 // 14 strings to match.
            if (memcmp(Mnemonic.data()+6, "x_", 2))
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "q_f", 3))
                  break;
                switch (Mnemonic[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_neq_f32";	 // "v_cmpsx_neq_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpsx_neq_f64";	 // "v_cmpsx_neq_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nge_f32";	 // "v_cmpsx_nge_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nge_f64";	 // "v_cmpsx_nge_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ngt_f32";	 // "v_cmpsx_ngt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_ngt_f64";	 // "v_cmpsx_ngt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nle_f32";	 // "v_cmpsx_nle_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nle_f64";	 // "v_cmpsx_nle_f64_e64"
                    return;
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlg_f32";	 // "v_cmpsx_nlg_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlg_f64";	 // "v_cmpsx_nlg_f64_e64"
                    return;
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Mnemonic.data()+11, "_f", 2))
                    break;
                  switch (Mnemonic[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlt_f32";	 // "v_cmpsx_nlt_f32_e64"
                    return;
                  case '6':	 // 1 string to match.
                    if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                      break;
                    Mnemonic = "v_cmpsx_nlt_f64";	 // "v_cmpsx_nlt_f64_e64"
                    return;
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "ru_f", 4))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_tru_f32";	 // "v_cmpsx_tru_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_tru_f64";	 // "v_cmpsx_tru_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'd':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+3, "iv_", 3))
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "ixup_f", 6))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_div_fixup_f32";	 // "v_div_fixup_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_div_fixup_f64";	 // "v_div_fixup_f64_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "cale_f", 6))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_div_scale_f32";	 // "v_div_scale_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_div_scale_f64";	 // "v_div_scale_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_clamp_f32_e", 14))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e64"
            return;
          }
          break;
        case 'r':	 // 10 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'c':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "lamp_f", 6))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+14, "2_e", 3))
                  break;
                switch (Mnemonic[17]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[18] != '2')
                    break;
                  Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[18] != '4')
                    break;
                  Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e64"
                  return;
                }
                break;
              case '6':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+14, "4_e", 3))
                  break;
                switch (Mnemonic[17]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[18] != '2')
                    break;
                  Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[18] != '4')
                    break;
                  Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "flag_f32_e", 10))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e64"
                return;
              }
              break;
            }
            break;
          case 's':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_clamp_f", 9))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+14, "2_e", 3))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+14, "4_e", 3))
                break;
              switch (Mnemonic[17]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[18] != '2')
                  break;
                Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[18] != '4')
                  break;
                Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 20:	 // 45 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 16 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'm':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "px_class_f", 10))
              break;
            switch (Mnemonic[14]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+15, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_class_f32";	 // "v_cmpx_class_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+15, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_class_f64";	 // "v_cmpx_class_f64_e64"
              return;
            }
            break;
          case 'v':	 // 14 strings to match.
            if (memcmp(Mnemonic.data()+4, "t_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'f':	 // 8 strings to match.
              if (memcmp(Mnemonic.data()+7, "32_ubyte", 8))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '0':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e64"
                  return;
                }
                break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e64"
                  return;
                }
                break;
              case '2':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e64"
                  return;
                }
                break;
              case '3':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+16, "_e", 2))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e64"
                  return;
                }
                break;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "ff_f32_i4_e", 11))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e64"
                return;
              }
              break;
            case 'p':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "k_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "16_i32_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "16_u32_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'e':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "xp_legacy_f32_e", 15))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e64"
            return;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "rexp_mant_f", 11))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "6_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "2_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+15, "4_e", 3))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "og_legacy_f32_e", 15))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e64"
            return;
          }
          break;
        case 'm':	 // 13 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'a':	 // 5 strings to match.
            switch (Mnemonic[4]) {
            default: break;
            case 'c':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e64"
                return;
              }
              break;
            case 'd':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e64", 15))
                break;
              Mnemonic = "v_mad_legacy_f32";	 // "v_mad_legacy_f32_e64"
              return;
            case 'x':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e64"
                return;
              }
              break;
            }
            break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "n_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e64"
              return;
            }
            break;
          case 'u':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+4, "l_", 2))
              break;
            switch (Mnemonic[6]) {
            default: break;
            case 'h':	 // 4 strings to match.
              if (memcmp(Mnemonic.data()+7, "i_", 2))
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "32_i24_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "32_u24_e", 8))
                  break;
                switch (Mnemonic[18]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[19] != '2')
                    break;
                  Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[19] != '4')
                    break;
                  Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+7, "egacy_f32_e", 11))
                break;
              switch (Mnemonic[18]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[19] != '2')
                  break;
                Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[19] != '4')
                  break;
                Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'q':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "sad_pk_u16_u8_e64", 17))
            break;
          Mnemonic = "v_qsad_pk_u16_u8";	 // "v_qsad_pk_u16_u8_e64"
          return;
        case 'r':	 // 4 strings to match.
          switch (Mnemonic[3]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "p_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+4, "q_legacy_f32_e", 14))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e64"
              return;
            }
            break;
          }
          break;
        case 't':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+3, "rig_preop_f64_e64", 17))
            break;
          Mnemonic = "v_trig_preop_f64";	 // "v_trig_preop_f64_e64"
          return;
        }
        break;
      case 21:	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_cvt_", 6))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "lr_i32_f32_e", 12))
            break;
          switch (Mnemonic[19]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[20] != '2')
              break;
            Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[20] != '4')
              break;
            Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e64"
            return;
          }
          break;
        case 'r':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "pi_i32_f32_e", 12))
            break;
          switch (Mnemonic[19]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[20] != '2')
              break;
            Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[20] != '4')
              break;
            Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e64"
            return;
          }
          break;
        }
        break;
      case 22:	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_mbcnt_", 8))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'h':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "i_u32_b32_e", 11))
            break;
          switch (Mnemonic[20]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[21] != '2')
              break;
            Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[21] != '4')
              break;
            Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e64"
            return;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "o_u32_b32_e", 11))
            break;
          switch (Mnemonic[20]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[21] != '2')
              break;
            Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[21] != '4')
              break;
            Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e64"
            return;
          }
          break;
        }
        break;
      case 23:	 // 8 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_", 2))
          break;
        switch (Mnemonic[2]) {
        default: break;
        case 'c':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+3, "vt_pkrtz_f16_f32_e", 18))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e64"
            return;
          }
          break;
        case 'f':	 // 6 strings to match.
          if (memcmp(Mnemonic.data()+3, "rexp_exp_i", 10))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "6_f16_e", 7))
              break;
            switch (Mnemonic[21]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[22] != '2')
                break;
              Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[22] != '4')
                break;
              Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+14, "2_f", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+18, "2_e", 3))
                break;
              switch (Mnemonic[21]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[22] != '2')
                  break;
                Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[22] != '4')
                  break;
                Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+18, "4_e", 3))
                break;
              switch (Mnemonic[21]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[22] != '2')
                  break;
                Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[22] != '4')
                  break;
                Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 24:	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+0, "v_cvt_pk", 8))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'a':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "ccum_u8_f32_e", 13))
            break;
          switch (Mnemonic[22]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[23] != '2')
              break;
            Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[23] != '4')
              break;
            Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e64"
            return;
          }
          break;
        case 'n':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+9, "orm_", 4))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
              break;
            switch (Mnemonic[22]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[23] != '2')
                break;
              Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[23] != '4')
                break;
              Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
              break;
            switch (Mnemonic[22]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[23] != '2')
                break;
              Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[23] != '4')
                break;
              Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      }
    break;
  }
  switch (Mnemonic.size()) {
  default: break;
  case 9:	 // 4 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "dd_u32", 6))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_add_u32"
        Mnemonic = "v_add_i32";
      return;
    case 'n':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "op_e", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[8] != '2')
          break;
        Mnemonic = "v_nop";	 // "v_nop_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[8] != '4')
          break;
        Mnemonic = "v_nop";	 // "v_nop_e64"
        return;
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "ub_u32", 6))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_sub_u32"
        Mnemonic = "v_sub_i32";
      return;
    }
    break;
  case 12:	 // 3 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'o':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "r_b32_e", 7))
        break;
      switch (Mnemonic[10]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[11] != '2')
          break;
        Mnemonic = "v_or_b32";	 // "v_or_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[11] != '4')
          break;
        Mnemonic = "v_or_b32";	 // "v_or_b32_e64"
        return;
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "ubrev_u32", 9))
        break;
      if ((Features & Feature_isGCN) == Feature_isGCN)	 // "v_subrev_u32"
        Mnemonic = "v_subrev_i32";
      return;
    }
    break;
  case 13:	 // 99 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 11 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'd':	 // 9 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 5 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_add_f16";	 // "v_add_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_add_f16";	 // "v_add_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_add_f32";	 // "v_add_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_add_f32";	 // "v_add_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_add_f64";	 // "v_add_f64_e64"
            return;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_add_i32";	 // "v_add_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_add_i32";	 // "v_add_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "16_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_add_u16";	 // "v_add_u16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_add_u16";	 // "v_add_u16_e64"
            return;
          }
          break;
        }
        break;
      case 'n':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_b32_e", 7))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_and_b32";	 // "v_and_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_and_b32";	 // "v_and_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'b':	 // 5 strings to match.
      if (Mnemonic[3] != 'f')
        break;
      switch (Mnemonic[4]) {
      default: break;
      case 'e':	 // 2 strings to match.
        if (Mnemonic[5] != '_')
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "32_e64", 6))
            break;
          Mnemonic = "v_bfe_i32";	 // "v_bfe_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "32_e64", 6))
            break;
          Mnemonic = "v_bfe_u32";	 // "v_bfe_u32_e64"
          return;
        }
        break;
      case 'i':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+5, "_b32_e64", 8))
          break;
        Mnemonic = "v_bfi_b32";	 // "v_bfi_b32_e64"
        return;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+5, "_b32_e", 6))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_bfm_b32";	 // "v_bfm_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 6 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "rexcp_e", 7))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_clrexcp";	 // "v_clrexcp_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_clrexcp";	 // "v_clrexcp_e64"
          return;
        }
        break;
      case 'o':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "s_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_cos_f16";	 // "v_cos_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_cos_f16";	 // "v_cos_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_cos_f32";	 // "v_cos_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_cos_f32";	 // "v_cos_f32_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'e':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "xp_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "6_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_exp_f16";	 // "v_exp_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_exp_f16";	 // "v_exp_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "2_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_exp_f32";	 // "v_exp_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_exp_f32";	 // "v_exp_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ma_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '3':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+8, "2_e64", 5))
          break;
        Mnemonic = "v_fma_f32";	 // "v_fma_f32_e64"
        return;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+8, "4_e64", 5))
          break;
        Mnemonic = "v_fma_f64";	 // "v_fma_f64_e64"
        return;
      }
      break;
    case 'l':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_f", 4))
        break;
      switch (Mnemonic[7]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "6_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_log_f16";	 // "v_log_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_log_f16";	 // "v_log_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+8, "2_e", 3))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_log_f32";	 // "v_log_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_log_f32";	 // "v_log_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 38 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 18 strings to match.
        switch (Mnemonic[4]) {
        default: break;
        case 'c':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+5, "_f", 2))
            break;
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mac_f16";	 // "v_mac_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mac_f16";	 // "v_mac_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_mac_f32";	 // "v_mac_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_mac_f32";	 // "v_mac_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+5, "_f32_e64", 8))
            break;
          Mnemonic = "v_mad_f32";	 // "v_mad_f32_e64"
          return;
        case 'x':	 // 13 strings to match.
          if (Mnemonic[5] != '_')
            break;
          switch (Mnemonic[6]) {
          default: break;
          case 'f':	 // 5 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_f16";	 // "v_max_f16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_f16";	 // "v_max_f16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_f32";	 // "v_max_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_f32";	 // "v_max_f32_e64"
                return;
              }
              break;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+8, "4_e64", 5))
                break;
              Mnemonic = "v_max_f64";	 // "v_max_f64_e64"
              return;
            }
            break;
          case 'i':	 // 4 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_i16";	 // "v_max_i16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_i16";	 // "v_max_i16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_i32";	 // "v_max_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_i32";	 // "v_max_i32_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 4 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "6_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_u16";	 // "v_max_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_u16";	 // "v_max_u16_e64"
                return;
              }
              break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "2_e", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[12] != '2')
                  break;
                Mnemonic = "v_max_u32";	 // "v_max_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[12] != '4')
                  break;
                Mnemonic = "v_max_u32";	 // "v_max_u32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'i':	 // 13 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 5 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_f16";	 // "v_min_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_f16";	 // "v_min_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_f32";	 // "v_min_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_f32";	 // "v_min_f32_e64"
              return;
            }
            break;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_e64", 5))
              break;
            Mnemonic = "v_min_f64";	 // "v_min_f64_e64"
            return;
          }
          break;
        case 'i':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_i16";	 // "v_min_i16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_i16";	 // "v_min_i16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_i32";	 // "v_min_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_i32";	 // "v_min_i32_e64"
              return;
            }
            break;
          }
          break;
        case 'u':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_u16";	 // "v_min_u16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_u16";	 // "v_min_u16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_min_u32";	 // "v_min_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_min_u32";	 // "v_min_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "v_b32_e", 7))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[12] != '2')
            break;
          Mnemonic = "v_mov_b32";	 // "v_mov_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[12] != '4')
            break;
          Mnemonic = "v_mov_b32";	 // "v_mov_b32_e64"
          return;
        }
        break;
      case 'u':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_mul_f16";	 // "v_mul_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_mul_f16";	 // "v_mul_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_mul_f32";	 // "v_mul_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_mul_f32";	 // "v_mul_f32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "4_e64", 5))
            break;
          Mnemonic = "v_mul_f64";	 // "v_mul_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'n':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ot_b32_e", 8))
        break;
      switch (Mnemonic[11]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[12] != '2')
          break;
        Mnemonic = "v_not_b32";	 // "v_not_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[12] != '4')
          break;
        Mnemonic = "v_not_b32";	 // "v_not_b32_e64"
        return;
      }
      break;
    case 'r':	 // 12 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f16";	 // "v_rcp_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f32";	 // "v_rcp_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "4_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rcp_f64";	 // "v_rcp_f64_e64"
            return;
          }
          break;
        }
        break;
      case 's':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f16";	 // "v_rsq_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f32";	 // "v_rsq_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "4_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_rsq_f64";	 // "v_rsq_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 's':	 // 13 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+4, "d_u32_e64", 9))
          break;
        Mnemonic = "v_sad_u32";	 // "v_sad_u32_e64"
        return;
      case 'i':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_f", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "6_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sin_f16";	 // "v_sin_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sin_f16";	 // "v_sin_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "2_e", 3))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sin_f32";	 // "v_sin_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sin_f32";	 // "v_sin_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 8 strings to match.
        if (memcmp(Mnemonic.data()+4, "b_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 4 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_sub_f16";	 // "v_sub_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_sub_f16";	 // "v_sub_f16_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_e", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[12] != '2')
                break;
              Mnemonic = "v_sub_f32";	 // "v_sub_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[12] != '4')
                break;
              Mnemonic = "v_sub_f32";	 // "v_sub_f32_e64"
              return;
            }
            break;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sub_i32";	 // "v_sub_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sub_i32";	 // "v_sub_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "16_e", 4))
            break;
          switch (Mnemonic[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[12] != '2')
              break;
            Mnemonic = "v_sub_u16";	 // "v_sub_u16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[12] != '4')
              break;
            Mnemonic = "v_sub_u16";	 // "v_sub_u16_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'x':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "or_b32_e", 8))
        break;
      switch (Mnemonic[11]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[12] != '2')
          break;
        Mnemonic = "v_xor_b32";	 // "v_xor_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[12] != '4')
          break;
        Mnemonic = "v_xor_b32";	 // "v_xor_b32_e64"
        return;
      }
      break;
    }
    break;
  case 14:	 // 40 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 5 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'd':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "dc_u32_e", 8))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_addc_u32";	 // "v_addc_u32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_addc_u32";	 // "v_addc_u32_e64"
          return;
        }
        break;
      case 's':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "hr_i", 4))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ashr_i32";	 // "v_ashr_i32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_ashr_i64";	 // "v_ashr_i64_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "eil_f", 5))
        break;
      switch (Mnemonic[8]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "6_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f16";	 // "v_ceil_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "2_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f32";	 // "v_ceil_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+9, "4_e", 3))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ceil_f64";	 // "v_ceil_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "fb", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'h':	 // 4 strings to match.
        if (Mnemonic[6] != '_')
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "32_e", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ffbh_i32";	 // "v_ffbh_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "32_e", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_ffbh_u32";	 // "v_ffbh_u32_e64"
            return;
          }
          break;
        }
        break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b32_e", 6))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_ffbl_b32";	 // "v_ffbl_b32_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "sh", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'l':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_lshl_b32";	 // "v_lshl_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_lshl_b64";	 // "v_lshl_b64_e64"
          return;
        }
        break;
      case 'r':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+6, "_b", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_lshr_b32";	 // "v_lshr_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+9, "4_e64", 5))
            break;
          Mnemonic = "v_lshr_b64";	 // "v_lshr_b64_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 9 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "x3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_f32";	 // "v_max3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_i32";	 // "v_max3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_max3_u32";	 // "v_max3_u32_e64"
          return;
        }
        break;
      case 'e':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "d3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_f32";	 // "v_med3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_i32";	 // "v_med3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_med3_u32";	 // "v_med3_u32_e64"
          return;
        }
        break;
      case 'i':	 // 3 strings to match.
        if (memcmp(Mnemonic.data()+4, "n3_", 3))
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_f32";	 // "v_min3_f32_e64"
          return;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_i32";	 // "v_min3_i32_e64"
          return;
        case 'u':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+8, "32_e64", 6))
            break;
          Mnemonic = "v_min3_u32";	 // "v_min3_u32_e64"
          return;
        }
        break;
      }
      break;
    case 's':	 // 8 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'q':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "rt_f", 4))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "6_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f16";	 // "v_sqrt_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "2_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f32";	 // "v_sqrt_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "4_e", 3))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[13] != '2')
              break;
            Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[13] != '4')
              break;
            Mnemonic = "v_sqrt_f64";	 // "v_sqrt_f64_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "bb_u32_e", 8))
          break;
        switch (Mnemonic[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[13] != '2')
            break;
          Mnemonic = "v_subb_u32";	 // "v_subb_u32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[13] != '4')
            break;
          Mnemonic = "v_subb_u32";	 // "v_subb_u32_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 15:	 // 49 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "frev_b32_e", 10))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[14] != '2')
          break;
        Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[14] != '4')
          break;
        Mnemonic = "v_bfrev_b32";	 // "v_bfrev_b32_e64"
        return;
      }
      break;
    case 'c':	 // 14 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp_", 3))
        break;
      switch (Mnemonic[6]) {
      default: break;
      case 'f':	 // 6 strings to match.
        if (Mnemonic[7] != '_')
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'f':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_f32";	 // "v_cmp_f_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_f64";	 // "v_cmp_f_f64_e64"
            return;
          }
          break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_i32";	 // "v_cmp_f_i32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_i64";	 // "v_cmp_f_i64_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_f_u32";	 // "v_cmp_f_u32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_f_u64";	 // "v_cmp_f_u64_e64"
            return;
          }
          break;
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "_f", 2))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_o_f32";	 // "v_cmp_o_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_o_f64";	 // "v_cmp_o_f64_e64"
          return;
        }
        break;
      case 't':	 // 4 strings to match.
        if (Mnemonic[7] != '_')
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_t_i32";	 // "v_cmp_t_i32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_t_i64";	 // "v_cmp_t_i64_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "2_e64", 5))
              break;
            Mnemonic = "v_cmp_t_u32";	 // "v_cmp_t_u32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "4_e64", 5))
              break;
            Mnemonic = "v_cmp_t_u64";	 // "v_cmp_t_u64_e64"
            return;
          }
          break;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "_f", 2))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_u_f32";	 // "v_cmp_u_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_u_f64";	 // "v_cmp_u_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'f':	 // 12 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'l':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "oor_f", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "6_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f16";	 // "v_floor_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f16";	 // "v_floor_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "2_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f32";	 // "v_floor_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f32";	 // "v_floor_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "4_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_floor_f64";	 // "v_floor_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_floor_f64";	 // "v_floor_f64_e64"
            return;
          }
          break;
        }
        break;
      case 'r':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "act_f", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "6_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f16";	 // "v_fract_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f16";	 // "v_fract_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "2_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f32";	 // "v_fract_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f32";	 // "v_fract_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+10, "4_e", 3))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[14] != '2')
              break;
            Mnemonic = "v_fract_f64";	 // "v_fract_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[14] != '4')
              break;
            Mnemonic = "v_fract_f64";	 // "v_fract_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'l':	 // 5 strings to match.
      if (memcmp(Mnemonic.data()+3, "dexp_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_ldexp_f16";	 // "v_ldexp_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_ldexp_f32";	 // "v_ldexp_f32_e64"
          return;
        }
        break;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+10, "4_e64", 5))
          break;
        Mnemonic = "v_ldexp_f64";	 // "v_ldexp_f64_e64"
        return;
      }
      break;
    case 'm':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "ad", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'a':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "k_f", 3))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_e32", 5))
            break;
          Mnemonic = "v_madak_f16";	 // "v_madak_f16_e32"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e32", 5))
            break;
          Mnemonic = "v_madak_f32";	 // "v_madak_f32_e32"
          return;
        }
        break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "k_f", 3))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_e32", 5))
            break;
          Mnemonic = "v_madmk_f16";	 // "v_madmk_f16_e32"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_e32", 5))
            break;
          Mnemonic = "v_madmk_f32";	 // "v_madmk_f32_e32"
          return;
        }
        break;
      }
      break;
    case 'r':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "ndne_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f16";	 // "v_rndne_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f32";	 // "v_rndne_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "4_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_rndne_f64";	 // "v_rndne_f64_e64"
          return;
        }
        break;
      }
      break;
    case 't':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "runc_f", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "6_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f16";	 // "v_trunc_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "2_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f32";	 // "v_trunc_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "4_e", 3))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[14] != '2')
            break;
          Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[14] != '4')
            break;
          Mnemonic = "v_trunc_f64";	 // "v_trunc_f64_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 16:	 // 75 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 60 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 56 strings to match.
        if (Mnemonic[4] != 'p')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 36 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case 'e':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+7, "q_", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_f32";	 // "v_cmp_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_f64";	 // "v_cmp_eq_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_i32";	 // "v_cmp_eq_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_i64";	 // "v_cmp_eq_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_u32";	 // "v_cmp_eq_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_eq_u64";	 // "v_cmp_eq_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'g':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_f32";	 // "v_cmp_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_f64";	 // "v_cmp_ge_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_i32";	 // "v_cmp_ge_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_i64";	 // "v_cmp_ge_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_u32";	 // "v_cmp_ge_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ge_u64";	 // "v_cmp_ge_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_f32";	 // "v_cmp_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_f64";	 // "v_cmp_gt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_i32";	 // "v_cmp_gt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_i64";	 // "v_cmp_gt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_u32";	 // "v_cmp_gt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_gt_u64";	 // "v_cmp_gt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 14 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_f32";	 // "v_cmp_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_f64";	 // "v_cmp_le_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_i32";	 // "v_cmp_le_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_i64";	 // "v_cmp_le_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_u32";	 // "v_cmp_le_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_le_u64";	 // "v_cmp_le_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "_f", 2))
                break;
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_lg_f32";	 // "v_cmp_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_lg_f64";	 // "v_cmp_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[8] != '_')
                break;
              switch (Mnemonic[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_f32";	 // "v_cmp_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_f64";	 // "v_cmp_lt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_i32";	 // "v_cmp_lt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_i64";	 // "v_cmp_lt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_u32";	 // "v_cmp_lt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_lt_u64";	 // "v_cmp_lt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+7, "e_", 2))
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_i32";	 // "v_cmp_ne_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_i64";	 // "v_cmp_ne_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_u32";	 // "v_cmp_ne_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_ne_u64";	 // "v_cmp_ne_u64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 6 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'f':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_f_f32";	 // "v_cmps_f_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_f_f64";	 // "v_cmps_f_f64_e64"
              return;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_o_f32";	 // "v_cmps_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_o_f64";	 // "v_cmps_o_f64_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_u_f32";	 // "v_cmps_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_u_f64";	 // "v_cmps_u_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'x':	 // 14 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'f':	 // 6 strings to match.
            if (Mnemonic[8] != '_')
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_f32";	 // "v_cmpx_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_f64";	 // "v_cmpx_f_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_i32";	 // "v_cmpx_f_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_i64";	 // "v_cmpx_f_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_u32";	 // "v_cmpx_f_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_f_u64";	 // "v_cmpx_f_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_o_f32";	 // "v_cmpx_o_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_o_f64";	 // "v_cmpx_o_f64_e64"
              return;
            }
            break;
          case 't':	 // 4 strings to match.
            if (Mnemonic[8] != '_')
              break;
            switch (Mnemonic[9]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_i32";	 // "v_cmpx_t_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_i64";	 // "v_cmpx_t_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_u32";	 // "v_cmpx_t_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_t_u64";	 // "v_cmpx_t_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "_f", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_u_f32";	 // "v_cmpx_u_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_u_f64";	 // "v_cmpx_u_f64_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'u':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "be", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "d_f32_e64", 9))
            break;
          Mnemonic = "v_cubeid_f32";	 // "v_cubeid_f32_e64"
          return;
        case 'm':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "a_f32_e64", 9))
            break;
          Mnemonic = "v_cubema_f32";	 // "v_cubema_f32_e64"
          return;
        case 's':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
            break;
          Mnemonic = "v_cubesc_f32";	 // "v_cubesc_f32_e64"
          return;
        case 't':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+7, "c_f32_e64", 9))
            break;
          Mnemonic = "v_cubetc_f32";	 // "v_cubetc_f32_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 7 strings to match.
      if (memcmp(Mnemonic.data()+3, "ul", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case '_':	 // 6 strings to match.
        switch (Mnemonic[6]) {
        default: break;
        case 'h':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "i_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_hi_i32";	 // "v_mul_hi_i32_e64"
            return;
          case 'u':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_hi_u32";	 // "v_mul_hi_u32_e64"
            return;
          }
          break;
        case 'l':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "o_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+10, "32_e64", 6))
              break;
            Mnemonic = "v_mul_lo_i32";	 // "v_mul_lo_i32_e64"
            return;
          case 'u':	 // 3 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case '1':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "6_e", 3))
                break;
              switch (Mnemonic[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[15] != '2')
                  break;
                Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[15] != '4')
                  break;
                Mnemonic = "v_mul_lo_u16";	 // "v_mul_lo_u16_e64"
                return;
              }
              break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+11, "2_e64", 5))
                break;
              Mnemonic = "v_mul_lo_u32";	 // "v_mul_lo_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'l':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+6, "it_f32_e64", 10))
          break;
        Mnemonic = "v_mullit_f32";	 // "v_mullit_f32_e64"
        return;
      }
      break;
    case 's':	 // 8 strings to match.
      if (memcmp(Mnemonic.data()+3, "ubrev_", 6))
        break;
      switch (Mnemonic[9]) {
      default: break;
      case 'f':	 // 4 strings to match.
        switch (Mnemonic[10]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+11, "6_e", 3))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[15] != '2')
              break;
            Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[15] != '4')
              break;
            Mnemonic = "v_subrev_f16";	 // "v_subrev_f16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+11, "2_e", 3))
            break;
          switch (Mnemonic[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[15] != '2')
              break;
            Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[15] != '4')
              break;
            Mnemonic = "v_subrev_f32";	 // "v_subrev_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "32_e", 4))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[15] != '2')
            break;
          Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[15] != '4')
            break;
          Mnemonic = "v_subrev_i32";	 // "v_subrev_i32_e64"
          return;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+10, "16_e", 4))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[15] != '2')
            break;
          Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[15] != '4')
            break;
          Mnemonic = "v_subrev_u16";	 // "v_subrev_u16_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 17:	 // 133 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 5 strings to match.
      if (memcmp(Mnemonic.data()+3, "shrrev_", 7))
        break;
      switch (Mnemonic[10]) {
      default: break;
      case 'b':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+11, "16_e", 4))
          break;
        switch (Mnemonic[15]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[16] != '2')
            break;
          Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[16] != '4')
            break;
          Mnemonic = "v_ashrrev_b16";	 // "v_ashrrev_b16_e64"
          return;
        }
        break;
      case 'i':	 // 3 strings to match.
        switch (Mnemonic[11]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_ashrrev_i32";	 // "v_ashrrev_i32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_ashrrev_i64";	 // "v_ashrrev_i64_e64"
          return;
        }
        break;
      }
      break;
    case 'c':	 // 102 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 68 strings to match.
        if (Mnemonic[4] != 'p')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 14 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "q_f", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmp_neq_f32";	 // "v_cmp_neq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmp_neq_f64";	 // "v_cmp_neq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nge_f32";	 // "v_cmp_nge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nge_f64";	 // "v_cmp_nge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ngt_f32";	 // "v_cmp_ngt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_ngt_f64";	 // "v_cmp_ngt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nle_f32";	 // "v_cmp_nle_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nle_f64";	 // "v_cmp_nle_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlg_f32";	 // "v_cmp_nlg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlg_f64";	 // "v_cmp_nlg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlt_f32";	 // "v_cmp_nlt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmp_nlt_f64";	 // "v_cmp_nlt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+7, "ru_f", 4))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                break;
              Mnemonic = "v_cmp_tru_f32";	 // "v_cmp_tru_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                break;
              Mnemonic = "v_cmp_tru_f64";	 // "v_cmp_tru_f64_e64"
              return;
            }
            break;
          }
          break;
        case 's':	 // 18 strings to match.
          switch (Mnemonic[6]) {
          default: break;
          case '_':	 // 12 strings to match.
            switch (Mnemonic[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+8, "q_f", 3))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmps_eq_f32";	 // "v_cmps_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmps_eq_f64";	 // "v_cmps_eq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ge_f32";	 // "v_cmps_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ge_f64";	 // "v_cmps_ge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_gt_f32";	 // "v_cmps_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_gt_f64";	 // "v_cmps_gt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_le_f32";	 // "v_cmps_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_le_f64";	 // "v_cmps_le_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lg_f32";	 // "v_cmps_lg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lg_f64";	 // "v_cmps_lg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+9, "_f", 2))
                  break;
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lt_f32";	 // "v_cmps_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_lt_f64";	 // "v_cmps_lt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 6 strings to match.
            if (Mnemonic[7] != '_')
              break;
            switch (Mnemonic[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_f_f32";	 // "v_cmpsx_f_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_f_f64";	 // "v_cmpsx_f_f64_e64"
                return;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_o_f32";	 // "v_cmpsx_o_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_o_f64";	 // "v_cmpsx_o_f64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_u_f32";	 // "v_cmpsx_u_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_u_f64";	 // "v_cmpsx_u_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 36 strings to match.
          if (Mnemonic[6] != '_')
            break;
          switch (Mnemonic[7]) {
          default: break;
          case 'e':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "q_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_f32";	 // "v_cmpx_eq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_f64";	 // "v_cmpx_eq_f64_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_i32";	 // "v_cmpx_eq_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_i64";	 // "v_cmpx_eq_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_u32";	 // "v_cmpx_eq_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_eq_u64";	 // "v_cmpx_eq_u64_e64"
                return;
              }
              break;
            }
            break;
          case 'g':	 // 12 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_f32";	 // "v_cmpx_ge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_f64";	 // "v_cmpx_ge_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_i32";	 // "v_cmpx_ge_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_i64";	 // "v_cmpx_ge_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_u32";	 // "v_cmpx_ge_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_ge_u64";	 // "v_cmpx_ge_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_f32";	 // "v_cmpx_gt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_f64";	 // "v_cmpx_gt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_i32";	 // "v_cmpx_gt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_i64";	 // "v_cmpx_gt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_u32";	 // "v_cmpx_gt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_gt_u64";	 // "v_cmpx_gt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 14 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_f32";	 // "v_cmpx_le_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_f64";	 // "v_cmpx_le_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_i32";	 // "v_cmpx_le_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_i64";	 // "v_cmpx_le_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_u32";	 // "v_cmpx_le_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_le_u64";	 // "v_cmpx_le_u64_e64"
                  return;
                }
                break;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "_f", 2))
                break;
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_lg_f32";	 // "v_cmpx_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_lg_f64";	 // "v_cmpx_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Mnemonic[9] != '_')
                break;
              switch (Mnemonic[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_f32";	 // "v_cmpx_lt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_f64";	 // "v_cmpx_lt_f64_e64"
                  return;
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_i32";	 // "v_cmpx_lt_i32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_i64";	 // "v_cmpx_lt_i64_e64"
                  return;
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Mnemonic[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_u32";	 // "v_cmpx_lt_u32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmpx_lt_u64";	 // "v_cmpx_lt_u64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "e_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_i32";	 // "v_cmpx_ne_i32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_i64";	 // "v_cmpx_ne_i64_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_u32";	 // "v_cmpx_ne_u32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+12, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ne_u64";	 // "v_cmpx_ne_u64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'n':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "dmask_b32_e", 11))
          break;
        switch (Mnemonic[15]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[16] != '2')
            break;
          Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[16] != '4')
            break;
          Mnemonic = "v_cndmask_b32";	 // "v_cndmask_b32_e64"
          return;
        }
        break;
      case 'v':	 // 32 strings to match.
        if (memcmp(Mnemonic.data()+4, "t_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 20 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_f32";	 // "v_cvt_f16_f32_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "16_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_i16";	 // "v_cvt_f16_i16_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "16_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f16_u16";	 // "v_cvt_f16_u16_e64"
                return;
              }
              break;
            }
            break;
          case '3':	 // 8 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 4 strings to match.
              switch (Mnemonic[11]) {
              default: break;
              case '1':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+12, "6_e", 3))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_f16";	 // "v_cvt_f32_f16_e64"
                  return;
                }
                break;
              case '6':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+12, "4_e", 3))
                  break;
                switch (Mnemonic[15]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Mnemonic[16] != '2')
                    break;
                  Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e32"
                  return;
                case '6':	 // 1 string to match.
                  if (Mnemonic[16] != '4')
                    break;
                  Mnemonic = "v_cvt_f32_f64";	 // "v_cvt_f32_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f32_i32";	 // "v_cvt_f32_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f32_u32";	 // "v_cvt_f32_u32_e64"
                return;
              }
              break;
            }
            break;
          case '6':	 // 6 strings to match.
            if (memcmp(Mnemonic.data()+8, "4_", 2))
              break;
            switch (Mnemonic[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_f32";	 // "v_cvt_f64_f32_e64"
                return;
              }
              break;
            case 'i':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_i32";	 // "v_cvt_f64_i32_e64"
                return;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "32_e", 4))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_f64_u32";	 // "v_cvt_f64_u32_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'i':	 // 6 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cvt_i16_f16";	 // "v_cvt_i16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_f", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_i32_f32";	 // "v_cvt_i32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "4_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_i32_f64";	 // "v_cvt_i32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 'u':	 // 6 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "6_f16_e", 7))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_cvt_u16_f16";	 // "v_cvt_u16_f16_e64"
              return;
            }
            break;
          case '3':	 // 4 strings to match.
            if (memcmp(Mnemonic.data()+8, "2_f", 3))
              break;
            switch (Mnemonic[11]) {
            default: break;
            case '3':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "2_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_u32_f32";	 // "v_cvt_u32_f32_e64"
                return;
              }
              break;
            case '6':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+12, "4_e", 3))
                break;
              switch (Mnemonic[15]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Mnemonic[16] != '2')
                  break;
                Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e32"
                return;
              case '6':	 // 1 string to match.
                if (Mnemonic[16] != '4')
                  break;
                Mnemonic = "v_cvt_u32_f64";	 // "v_cvt_u32_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 'l':	 // 10 strings to match.
      if (memcmp(Mnemonic.data()+3, "sh", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 'l':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+6, "rev_b", 5))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "6_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshlrev_b16";	 // "v_lshlrev_b16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshlrev_b32";	 // "v_lshlrev_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_lshlrev_b64";	 // "v_lshlrev_b64_e64"
          return;
        }
        break;
      case 'r':	 // 5 strings to match.
        if (memcmp(Mnemonic.data()+6, "rev_b", 5))
          break;
        switch (Mnemonic[11]) {
        default: break;
        case '1':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "6_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshrrev_b16";	 // "v_lshrrev_b16_e64"
            return;
          }
          break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+12, "2_e", 3))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_lshrrev_b32";	 // "v_lshrrev_b32_e64"
            return;
          }
          break;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+12, "4_e64", 5))
            break;
          Mnemonic = "v_lshrrev_b64";	 // "v_lshrrev_b64_e64"
          return;
        }
        break;
      }
      break;
    case 'm':	 // 14 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "d_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 2 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_i24_e64", 9))
              break;
            Mnemonic = "v_mad_i32_i24";	 // "v_mad_i32_i24_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_i32_e64", 9))
              break;
            Mnemonic = "v_mad_i64_i32";	 // "v_mad_i64_i32_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "2_u24_e64", 9))
              break;
            Mnemonic = "v_mad_u32_u24";	 // "v_mad_u32_u24_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+8, "4_u32_e64", 9))
              break;
            Mnemonic = "v_mad_u64_u32";	 // "v_mad_u64_u32_e64"
            return;
          }
          break;
        }
        break;
      case 'o':	 // 6 strings to match.
        if (Mnemonic[4] != 'v')
          break;
        switch (Mnemonic[5]) {
        default: break;
        case '_':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+6, "fed_b32_e", 9))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mov_fed_b32";	 // "v_mov_fed_b32_e64"
            return;
          }
          break;
        case 'r':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+6, "el", 2))
            break;
          switch (Mnemonic[8]) {
          default: break;
          case 'd':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_movreld_b32";	 // "v_movreld_b32_e64"
              return;
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "_b32_e", 6))
              break;
            switch (Mnemonic[15]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[16] != '2')
                break;
              Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[16] != '4')
                break;
              Mnemonic = "v_movrels_b32";	 // "v_movrels_b32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      case 'u':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_i24_e", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mul_i32_i24";	 // "v_mul_i32_i24_e64"
            return;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_u24_e", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[16] != '2')
              break;
            Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[16] != '4')
              break;
            Mnemonic = "v_mul_u32_u24";	 // "v_mul_u32_u24_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 's':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "ubbrev_u32_e", 12))
        break;
      switch (Mnemonic[15]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[16] != '2')
          break;
        Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[16] != '4')
          break;
        Mnemonic = "v_subbrev_u32";	 // "v_subbrev_u32_e64"
        return;
      }
      break;
    }
    break;
  case 18:	 // 49 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "lignbit_b32_e64", 15))
        break;
      Mnemonic = "v_alignbit_b32";	 // "v_alignbit_b32_e64"
      return;
    case 'b':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "cnt_u32_b32_e", 13))
        break;
      switch (Mnemonic[16]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[17] != '2')
          break;
        Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[17] != '4')
          break;
        Mnemonic = "v_bcnt_u32_b32";	 // "v_bcnt_u32_b32_e64"
        return;
      }
      break;
    case 'c':	 // 40 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case 's':	 // 26 strings to match.
        switch (Mnemonic[6]) {
        default: break;
        case '_':	 // 14 strings to match.
          switch (Mnemonic[7]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Mnemonic[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+9, "q_f", 3))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmps_neq_f32";	 // "v_cmps_neq_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmps_neq_f64";	 // "v_cmps_neq_f64_e64"
                return;
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nge_f32";	 // "v_cmps_nge_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nge_f64";	 // "v_cmps_nge_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ngt_f32";	 // "v_cmps_ngt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_ngt_f64";	 // "v_cmps_ngt_f64_e64"
                  return;
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Mnemonic[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nle_f32";	 // "v_cmps_nle_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nle_f64";	 // "v_cmps_nle_f64_e64"
                  return;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlg_f32";	 // "v_cmps_nlg_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlg_f64";	 // "v_cmps_nlg_f64_e64"
                  return;
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Mnemonic.data()+10, "_f", 2))
                  break;
                switch (Mnemonic[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlt_f32";	 // "v_cmps_nlt_f32_e64"
                  return;
                case '6':	 // 1 string to match.
                  if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                    break;
                  Mnemonic = "v_cmps_nlt_f64";	 // "v_cmps_nlt_f64_e64"
                  return;
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+8, "ru_f", 4))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmps_tru_f32";	 // "v_cmps_tru_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmps_tru_f64";	 // "v_cmps_tru_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'x':	 // 12 strings to match.
          if (Mnemonic[7] != '_')
            break;
          switch (Mnemonic[8]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "q_f", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmpsx_eq_f32";	 // "v_cmpsx_eq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmpsx_eq_f64";	 // "v_cmpsx_eq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ge_f32";	 // "v_cmpsx_ge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ge_f64";	 // "v_cmpsx_ge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_gt_f32";	 // "v_cmpsx_gt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_gt_f64";	 // "v_cmpsx_gt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_le_f32";	 // "v_cmpsx_le_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_le_f64";	 // "v_cmpsx_le_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lg_f32";	 // "v_cmpsx_lg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lg_f64";	 // "v_cmpsx_lg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lt_f32";	 // "v_cmpsx_lt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_lt_f64";	 // "v_cmpsx_lt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'x':	 // 14 strings to match.
        if (Mnemonic[6] != '_')
          break;
        switch (Mnemonic[7]) {
        default: break;
        case 'n':	 // 12 strings to match.
          switch (Mnemonic[8]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+9, "q_f", 3))
              break;
            switch (Mnemonic[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                break;
              Mnemonic = "v_cmpx_neq_f32";	 // "v_cmpx_neq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                break;
              Mnemonic = "v_cmpx_neq_f64";	 // "v_cmpx_neq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nge_f32";	 // "v_cmpx_nge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nge_f64";	 // "v_cmpx_nge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ngt_f32";	 // "v_cmpx_ngt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_ngt_f64";	 // "v_cmpx_ngt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nle_f32";	 // "v_cmpx_nle_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nle_f64";	 // "v_cmpx_nle_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlg_f32";	 // "v_cmpx_nlg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlg_f64";	 // "v_cmpx_nlg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+10, "_f", 2))
                break;
              switch (Mnemonic[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlt_f32";	 // "v_cmpx_nlt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+13, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpx_nlt_f64";	 // "v_cmpx_nlt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 't':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+8, "ru_f", 4))
            break;
          switch (Mnemonic[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "2_e64", 5))
              break;
            Mnemonic = "v_cmpx_tru_f32";	 // "v_cmpx_tru_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+13, "4_e64", 5))
              break;
            Mnemonic = "v_cmpx_tru_f64";	 // "v_cmpx_tru_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'd':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "iv_fmas_f", 9))
        break;
      switch (Mnemonic[12]) {
      default: break;
      case '3':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+13, "2_e64", 5))
          break;
        Mnemonic = "v_div_fmas_f32";	 // "v_div_fmas_f32_e64"
        return;
      case '6':	 // 1 string to match.
        if (memcmp(Mnemonic.data()+13, "4_e64", 5))
          break;
        Mnemonic = "v_div_fmas_f64";	 // "v_div_fmas_f64_e64"
        return;
      }
      break;
    case 'm':	 // 4 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "vrelsd_b32_e", 12))
          break;
        switch (Mnemonic[16]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[17] != '2')
            break;
          Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[17] != '4')
            break;
          Mnemonic = "v_movrelsd_b32";	 // "v_movrelsd_b32_e64"
          return;
        }
        break;
      case 'q':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "sad_u", 5))
          break;
        switch (Mnemonic[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "6_u8_e64", 8))
            break;
          Mnemonic = "v_mqsad_u16_u8";	 // "v_mqsad_u16_u8_e64"
          return;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+10, "2_u8_e64", 8))
            break;
          Mnemonic = "v_mqsad_u32_u8";	 // "v_mqsad_u32_u8_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  case 19:	 // 33 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'a':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "lignbyte_b32_e64", 16))
        break;
      Mnemonic = "v_alignbyte_b32";	 // "v_alignbyte_b32_e64"
      return;
    case 'c':	 // 16 strings to match.
      if (memcmp(Mnemonic.data()+3, "mp", 2))
        break;
      switch (Mnemonic[5]) {
      default: break;
      case '_':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+6, "class_f", 7))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_cmp_class_f32";	 // "v_cmp_class_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_cmp_class_f64";	 // "v_cmp_class_f64_e64"
          return;
        }
        break;
      case 's':	 // 14 strings to match.
        if (memcmp(Mnemonic.data()+6, "x_", 2))
          break;
        switch (Mnemonic[8]) {
        default: break;
        case 'n':	 // 12 strings to match.
          switch (Mnemonic[9]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "q_f", 3))
              break;
            switch (Mnemonic[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                break;
              Mnemonic = "v_cmpsx_neq_f32";	 // "v_cmpsx_neq_f32_e64"
              return;
            case '6':	 // 1 string to match.
              if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                break;
              Mnemonic = "v_cmpsx_neq_f64";	 // "v_cmpsx_neq_f64_e64"
              return;
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nge_f32";	 // "v_cmpsx_nge_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nge_f64";	 // "v_cmpsx_nge_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ngt_f32";	 // "v_cmpsx_ngt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_ngt_f64";	 // "v_cmpsx_ngt_f64_e64"
                return;
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Mnemonic[10]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nle_f32";	 // "v_cmpsx_nle_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nle_f64";	 // "v_cmpsx_nle_f64_e64"
                return;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlg_f32";	 // "v_cmpsx_nlg_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlg_f64";	 // "v_cmpsx_nlg_f64_e64"
                return;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Mnemonic.data()+11, "_f", 2))
                break;
              switch (Mnemonic[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "2_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlt_f32";	 // "v_cmpsx_nlt_f32_e64"
                return;
              case '6':	 // 1 string to match.
                if (memcmp(Mnemonic.data()+14, "4_e64", 5))
                  break;
                Mnemonic = "v_cmpsx_nlt_f64";	 // "v_cmpsx_nlt_f64_e64"
                return;
              }
              break;
            }
            break;
          }
          break;
        case 't':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+9, "ru_f", 4))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+14, "2_e64", 5))
              break;
            Mnemonic = "v_cmpsx_tru_f32";	 // "v_cmpsx_tru_f32_e64"
            return;
          case '6':	 // 1 string to match.
            if (memcmp(Mnemonic.data()+14, "4_e64", 5))
              break;
            Mnemonic = "v_cmpsx_tru_f64";	 // "v_cmpsx_tru_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'd':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+3, "iv_", 3))
        break;
      switch (Mnemonic[6]) {
      default: break;
      case 'f':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "ixup_f", 6))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_div_fixup_f32";	 // "v_div_fixup_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_div_fixup_f64";	 // "v_div_fixup_f64_e64"
          return;
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+7, "cale_f", 6))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "2_e64", 5))
            break;
          Mnemonic = "v_div_scale_f32";	 // "v_div_scale_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+14, "4_e64", 5))
            break;
          Mnemonic = "v_div_scale_f64";	 // "v_div_scale_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_clamp_f32_e", 14))
        break;
      switch (Mnemonic[17]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[18] != '2')
          break;
        Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[18] != '4')
          break;
        Mnemonic = "v_log_clamp_f32";	 // "v_log_clamp_f32_e64"
        return;
      }
      break;
    case 'r':	 // 10 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'c':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "lamp_f", 6))
            break;
          switch (Mnemonic[13]) {
          default: break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "2_e", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[18] != '2')
                break;
              Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[18] != '4')
                break;
              Mnemonic = "v_rcp_clamp_f32";	 // "v_rcp_clamp_f32_e64"
              return;
            }
            break;
          case '6':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+14, "4_e", 3))
              break;
            switch (Mnemonic[17]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[18] != '2')
                break;
              Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[18] != '4')
                break;
              Mnemonic = "v_rcp_clamp_f64";	 // "v_rcp_clamp_f64_e64"
              return;
            }
            break;
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "flag_f32_e", 10))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rcp_iflag_f32";	 // "v_rcp_iflag_f32_e64"
            return;
          }
          break;
        }
        break;
      case 's':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_clamp_f", 9))
          break;
        switch (Mnemonic[13]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+14, "2_e", 3))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rsq_clamp_f32";	 // "v_rsq_clamp_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+14, "4_e", 3))
            break;
          switch (Mnemonic[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[18] != '2')
              break;
            Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[18] != '4')
              break;
            Mnemonic = "v_rsq_clamp_f64";	 // "v_rsq_clamp_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 20:	 // 45 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 16 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "px_class_f", 10))
          break;
        switch (Mnemonic[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+15, "2_e64", 5))
            break;
          Mnemonic = "v_cmpx_class_f32";	 // "v_cmpx_class_f32_e64"
          return;
        case '6':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+15, "4_e64", 5))
            break;
          Mnemonic = "v_cmpx_class_f64";	 // "v_cmpx_class_f64_e64"
          return;
        }
        break;
      case 'v':	 // 14 strings to match.
        if (memcmp(Mnemonic.data()+4, "t_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'f':	 // 8 strings to match.
          if (memcmp(Mnemonic.data()+7, "32_ubyte", 8))
            break;
          switch (Mnemonic[15]) {
          default: break;
          case '0':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte0";	 // "v_cvt_f32_ubyte0_e64"
              return;
            }
            break;
          case '1':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte1";	 // "v_cvt_f32_ubyte1_e64"
              return;
            }
            break;
          case '2':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte2";	 // "v_cvt_f32_ubyte2_e64"
              return;
            }
            break;
          case '3':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+16, "_e", 2))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_f32_ubyte3";	 // "v_cvt_f32_ubyte3_e64"
              return;
            }
            break;
          }
          break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "ff_f32_i4_e", 11))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_cvt_off_f32_i4";	 // "v_cvt_off_f32_i4_e64"
            return;
          }
          break;
        case 'p':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "k_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_i32_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_pk_i16_i32";	 // "v_cvt_pk_i16_i32_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "16_u32_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_cvt_pk_u16_u32";	 // "v_cvt_pk_u16_u32_e64"
              return;
            }
            break;
          }
          break;
        }
        break;
      }
      break;
    case 'e':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "xp_legacy_f32_e", 15))
        break;
      switch (Mnemonic[18]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[19] != '2')
          break;
        Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[19] != '4')
          break;
        Mnemonic = "v_exp_legacy_f32";	 // "v_exp_legacy_f32_e64"
        return;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "rexp_mant_f", 11))
        break;
      switch (Mnemonic[14]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "6_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f16";	 // "v_frexp_mant_f16_e64"
          return;
        }
        break;
      case '3':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "2_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f32";	 // "v_frexp_mant_f32_e64"
          return;
        }
        break;
      case '6':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+15, "4_e", 3))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_frexp_mant_f64";	 // "v_frexp_mant_f64_e64"
          return;
        }
        break;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "og_legacy_f32_e", 15))
        break;
      switch (Mnemonic[18]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[19] != '2')
          break;
        Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[19] != '4')
          break;
        Mnemonic = "v_log_legacy_f32";	 // "v_log_legacy_f32_e64"
        return;
      }
      break;
    case 'm':	 // 13 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'a':	 // 5 strings to match.
        switch (Mnemonic[4]) {
        default: break;
        case 'c':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_mac_legacy_f32";	 // "v_mac_legacy_f32_e64"
            return;
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e64", 15))
            break;
          Mnemonic = "v_mad_legacy_f32";	 // "v_mad_legacy_f32_e64"
          return;
        case 'x':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+5, "_legacy_f32_e", 13))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_max_legacy_f32";	 // "v_max_legacy_f32_e64"
            return;
          }
          break;
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "n_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_min_legacy_f32";	 // "v_min_legacy_f32_e64"
          return;
        }
        break;
      case 'u':	 // 6 strings to match.
        if (memcmp(Mnemonic.data()+4, "l_", 2))
          break;
        switch (Mnemonic[6]) {
        default: break;
        case 'h':	 // 4 strings to match.
          if (memcmp(Mnemonic.data()+7, "i_", 2))
            break;
          switch (Mnemonic[9]) {
          default: break;
          case 'i':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_i24_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_mul_hi_i32_i24";	 // "v_mul_hi_i32_i24_e64"
              return;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Mnemonic.data()+10, "32_u24_e", 8))
              break;
            switch (Mnemonic[18]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Mnemonic[19] != '2')
                break;
              Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e32"
              return;
            case '6':	 // 1 string to match.
              if (Mnemonic[19] != '4')
                break;
              Mnemonic = "v_mul_hi_u32_u24";	 // "v_mul_hi_u32_u24_e64"
              return;
            }
            break;
          }
          break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+7, "egacy_f32_e", 11))
            break;
          switch (Mnemonic[18]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[19] != '2')
              break;
            Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[19] != '4')
              break;
            Mnemonic = "v_mul_legacy_f32";	 // "v_mul_legacy_f32_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    case 'q':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "sad_pk_u16_u8_e64", 17))
        break;
      Mnemonic = "v_qsad_pk_u16_u8";	 // "v_qsad_pk_u16_u8_e64"
      return;
    case 'r':	 // 4 strings to match.
      switch (Mnemonic[3]) {
      default: break;
      case 'c':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "p_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_rcp_legacy_f32";	 // "v_rcp_legacy_f32_e64"
          return;
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+4, "q_legacy_f32_e", 14))
          break;
        switch (Mnemonic[18]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[19] != '2')
            break;
          Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[19] != '4')
            break;
          Mnemonic = "v_rsq_legacy_f32";	 // "v_rsq_legacy_f32_e64"
          return;
        }
        break;
      }
      break;
    case 't':	 // 1 string to match.
      if (memcmp(Mnemonic.data()+3, "rig_preop_f64_e64", 17))
        break;
      Mnemonic = "v_trig_preop_f64";	 // "v_trig_preop_f64_e64"
      return;
    }
    break;
  case 21:	 // 4 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_cvt_", 6))
      break;
    switch (Mnemonic[6]) {
    default: break;
    case 'f':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+7, "lr_i32_f32_e", 12))
        break;
      switch (Mnemonic[19]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[20] != '2')
          break;
        Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[20] != '4')
          break;
        Mnemonic = "v_cvt_flr_i32_f32";	 // "v_cvt_flr_i32_f32_e64"
        return;
      }
      break;
    case 'r':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+7, "pi_i32_f32_e", 12))
        break;
      switch (Mnemonic[19]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[20] != '2')
          break;
        Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[20] != '4')
          break;
        Mnemonic = "v_cvt_rpi_i32_f32";	 // "v_cvt_rpi_i32_f32_e64"
        return;
      }
      break;
    }
    break;
  case 22:	 // 4 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_mbcnt_", 8))
      break;
    switch (Mnemonic[8]) {
    default: break;
    case 'h':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "i_u32_b32_e", 11))
        break;
      switch (Mnemonic[20]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[21] != '2')
          break;
        Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[21] != '4')
          break;
        Mnemonic = "v_mbcnt_hi_u32_b32";	 // "v_mbcnt_hi_u32_b32_e64"
        return;
      }
      break;
    case 'l':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "o_u32_b32_e", 11))
        break;
      switch (Mnemonic[20]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[21] != '2')
          break;
        Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[21] != '4')
          break;
        Mnemonic = "v_mbcnt_lo_u32_b32";	 // "v_mbcnt_lo_u32_b32_e64"
        return;
      }
      break;
    }
    break;
  case 23:	 // 8 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_", 2))
      break;
    switch (Mnemonic[2]) {
    default: break;
    case 'c':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+3, "vt_pkrtz_f16_f32_e", 18))
        break;
      switch (Mnemonic[21]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[22] != '2')
          break;
        Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[22] != '4')
          break;
        Mnemonic = "v_cvt_pkrtz_f16_f32";	 // "v_cvt_pkrtz_f16_f32_e64"
        return;
      }
      break;
    case 'f':	 // 6 strings to match.
      if (memcmp(Mnemonic.data()+3, "rexp_exp_i", 10))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case '1':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "6_f16_e", 7))
          break;
        switch (Mnemonic[21]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[22] != '2')
            break;
          Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[22] != '4')
            break;
          Mnemonic = "v_frexp_exp_i16_f16";	 // "v_frexp_exp_i16_f16_e64"
          return;
        }
        break;
      case '3':	 // 4 strings to match.
        if (memcmp(Mnemonic.data()+14, "2_f", 3))
          break;
        switch (Mnemonic[17]) {
        default: break;
        case '3':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+18, "2_e", 3))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_frexp_exp_i32_f32";	 // "v_frexp_exp_i32_f32_e64"
            return;
          }
          break;
        case '6':	 // 2 strings to match.
          if (memcmp(Mnemonic.data()+18, "4_e", 3))
            break;
          switch (Mnemonic[21]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Mnemonic[22] != '2')
              break;
            Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e32"
            return;
          case '6':	 // 1 string to match.
            if (Mnemonic[22] != '4')
              break;
            Mnemonic = "v_frexp_exp_i32_f64";	 // "v_frexp_exp_i32_f64_e64"
            return;
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 24:	 // 6 strings to match.
    if (memcmp(Mnemonic.data()+0, "v_cvt_pk", 8))
      break;
    switch (Mnemonic[8]) {
    default: break;
    case 'a':	 // 2 strings to match.
      if (memcmp(Mnemonic.data()+9, "ccum_u8_f32_e", 13))
        break;
      switch (Mnemonic[22]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Mnemonic[23] != '2')
          break;
        Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e32"
        return;
      case '6':	 // 1 string to match.
        if (Mnemonic[23] != '4')
          break;
        Mnemonic = "v_cvt_pkaccum_u8_f32";	 // "v_cvt_pkaccum_u8_f32_e64"
        return;
      }
      break;
    case 'n':	 // 4 strings to match.
      if (memcmp(Mnemonic.data()+9, "orm_", 4))
        break;
      switch (Mnemonic[13]) {
      default: break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
          break;
        switch (Mnemonic[22]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[23] != '2')
            break;
          Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[23] != '4')
            break;
          Mnemonic = "v_cvt_pknorm_i16_f32";	 // "v_cvt_pknorm_i16_f32_e64"
          return;
        }
        break;
      case 'u':	 // 2 strings to match.
        if (memcmp(Mnemonic.data()+14, "16_f32_e", 8))
          break;
        switch (Mnemonic[22]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Mnemonic[23] != '2')
            break;
          Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e32"
          return;
        case '6':	 // 1 string to match.
          if (Mnemonic[23] != '4')
            break;
          Mnemonic = "v_cvt_pknorm_u16_f32";	 // "v_cvt_pknorm_u16_f32_e64"
          return;
        }
        break;
      }
      break;
    }
    break;
  }
}

namespace {
enum OperatorConversionKind {
  CVT_Done,
  CVT_Reg,
  CVT_Tied,
  CVT_95_addImmOperands,
  CVT_95_Reg,
  CVT_imm_95_0,
  CVT_cvtMubuf,
  CVT_cvtDS,
  CVT_cvtDSOffset01,
  CVT_cvtFlat,
  CVT_95_addRegOrImmOperands,
  CVT_95_addSoppBrTargetOperands,
  CVT_cvtVOP3,
  CVT_NUM_CONVERTERS
};

enum InstructionConversionKind {
  Convert_NoOperands,
  Convert__Imm1_2,
  Convert__Imm1_2__Imm1_4,
  Convert__Reg1_3__Imm1_1,
  Convert__Reg1_5__imm_95_0__Imm1_1__Reg1_2__Reg1_3,
  Convert__Reg1_1,
  Convert__Imm1_3__Imm1_1,
  ConvertCustom_cvtMubuf,
  ConvertCustom_cvtDS,
  ConvertCustom_cvtDSOffset01,
  Convert__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_9,
  ConvertCustom_cvtFlat,
  Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12,
  Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11,
  Convert__Reg1_1__SSrc321_2,
  Convert__Reg1_1__SSrc321_2__SSrc321_3,
  Convert__Reg1_1__Tie0__Imm1_2,
  Convert__Reg1_1__SSrc641_2__SSrc641_3,
  Convert__Reg1_1__SSrc641_2,
  Convert__Reg1_1__SSrc641_2__SSrc321_3,
  Convert__SoppBrTarget1_1,
  Convert__Reg1_1__Reg1_2__Reg1_3,
  Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3,
  Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3,
  Convert__Reg1_1__Reg1_2,
  Convert__Reg1_1__Imm1_2,
  Convert__SSrc321_1__SSrc321_2,
  Convert__Imm1_1,
  Convert__Imm1_1__Imm1_2,
  Convert__SWaitCnt1_1,
  Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13,
  Convert__Reg1_1__VSrc321_2__Reg1_3,
  ConvertCustom_cvtVOP3,
  Convert__Reg1_1__VSrc321_3__Reg1_4,
  Convert__Reg1_1__VCSrc321_3__Reg1_4,
  Convert__Reg1_1__VSrc321_2,
  Convert__Reg1_1__VSrc641_2,
  Convert__VSrc321_2__Reg1_3,
  Convert__VSrc641_2__Reg1_3,
  Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0,
  Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4,
  Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4,
  Convert__Reg1_1__Tie0__Reg1_5__Imm1_6__Imm1_7,
  Convert__Reg1_1__VSrc321_2__Reg1_3__Tie0,
  Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4,
  Convert__Reg1_1__Reg1_2__SCSrc321_3,
  CVT_NUM_SIGNATURES
};

} // end anonymous namespace

static const uint8_t ConversionTable[CVT_NUM_SIGNATURES][27] = {
  // Convert_NoOperands
  { CVT_Done },
  // Convert__Imm1_2
  { CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__Imm1_2__Imm1_4
  { CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_3__Imm1_1
  { CVT_95_Reg, 3, CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Reg1_5__imm_95_0__Imm1_1__Reg1_2__Reg1_3
  { CVT_95_Reg, 5, CVT_imm_95_0, 0, CVT_95_addImmOperands, 1, CVT_95_Reg, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_1
  { CVT_95_Reg, 1, CVT_Done },
  // Convert__Imm1_3__Imm1_1
  { CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 1, CVT_Done },
  // ConvertCustom_cvtMubuf
  { CVT_cvtMubuf, 0, CVT_Done },
  // ConvertCustom_cvtDS
  { CVT_cvtDS, 0, CVT_Done },
  // ConvertCustom_cvtDSOffset01
  { CVT_cvtDSOffset01, 0, CVT_Done },
  // Convert__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_9
  { CVT_95_addImmOperands, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_Reg, 6, CVT_95_Reg, 7, CVT_95_Reg, 8, CVT_95_Reg, 9, CVT_Done },
  // ConvertCustom_cvtFlat
  { CVT_cvtFlat, 0, CVT_Done },
  // Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_addImmOperands, 9, CVT_95_Reg, 10, CVT_95_Reg, 11, CVT_95_Reg, 12, CVT_Done },
  // Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_addImmOperands, 9, CVT_95_Reg, 10, CVT_95_Reg, 11, CVT_Done },
  // Convert__Reg1_1__SSrc321_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_1__SSrc321_2__SSrc321_3
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__Reg1_1__Tie0__Imm1_2
  { CVT_95_Reg, 1, CVT_Tied, 0, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__Reg1_1__SSrc641_2__SSrc641_3
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__Reg1_1__SSrc641_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_1__SSrc641_2__SSrc321_3
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
  // Convert__SoppBrTarget1_1
  { CVT_95_addSoppBrTargetOperands, 1, CVT_Done },
  // Convert__Reg1_1__Reg1_2__Reg1_3
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_Done },
  // Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_Done },
  // Convert__Reg1_1__Reg1_2
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_Done },
  // Convert__Reg1_1__Imm1_2
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__SSrc321_1__SSrc321_2
  { CVT_95_addRegOrImmOperands, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Imm1_1
  { CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Imm1_1__Imm1_2
  { CVT_95_addImmOperands, 1, CVT_95_addImmOperands, 2, CVT_Done },
  // Convert__SWaitCnt1_1
  { CVT_95_addImmOperands, 1, CVT_Done },
  // Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_95_addImmOperands, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_95_addImmOperands, 8, CVT_95_Reg, 9, CVT_95_Reg, 10, CVT_95_addImmOperands, 11, CVT_95_addImmOperands, 12, CVT_95_addRegOrImmOperands, 13, CVT_Done },
  // Convert__Reg1_1__VSrc321_2__Reg1_3
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // ConvertCustom_cvtVOP3
  { CVT_cvtVOP3, 0, CVT_Done },
  // Convert__Reg1_1__VSrc321_3__Reg1_4
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 3, CVT_95_Reg, 4, CVT_Done },
  // Convert__Reg1_1__VCSrc321_3__Reg1_4
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 3, CVT_95_Reg, 4, CVT_Done },
  // Convert__Reg1_1__VSrc321_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__Reg1_1__VSrc641_2
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_Done },
  // Convert__VSrc321_2__Reg1_3
  { CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__VSrc641_2__Reg1_3
  { CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Done },
  // Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0
  { CVT_95_Reg, 1, CVT_imm_95_0, 0, CVT_95_addRegOrImmOperands, 2, CVT_imm_95_0, 0, CVT_95_addRegOrImmOperands, 3, CVT_imm_95_0, 0, CVT_imm_95_0, 0, CVT_Done },
  // Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4
  { CVT_95_Reg, 1, CVT_95_addImmOperands, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addImmOperands, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_1__Tie0__Reg1_5__Imm1_6__Imm1_7
  { CVT_95_Reg, 1, CVT_Tied, 0, CVT_95_Reg, 5, CVT_95_addImmOperands, 6, CVT_95_addImmOperands, 7, CVT_Done },
  // Convert__Reg1_1__VSrc321_2__Reg1_3__Tie0
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_Tied, 0, CVT_Done },
  // Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4
  { CVT_95_Reg, 1, CVT_95_addRegOrImmOperands, 2, CVT_95_Reg, 3, CVT_95_addImmOperands, 4, CVT_Done },
  // Convert__Reg1_1__Reg1_2__SCSrc321_3
  { CVT_95_Reg, 1, CVT_95_Reg, 2, CVT_95_addRegOrImmOperands, 3, CVT_Done },
};

void AMDGPUAsmParser::
convertToMCInst(unsigned Kind, MCInst &Inst, unsigned Opcode,
                const OperandVector &Operands) {
  assert(Kind < CVT_NUM_SIGNATURES && "Invalid signature!");
  const uint8_t *Converter = ConversionTable[Kind];
  Inst.setOpcode(Opcode);
  for (const uint8_t *p = Converter; *p; p+= 2) {
    switch (*p) {
    default: llvm_unreachable("invalid conversion entry!");
    case CVT_Reg:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOperands(Inst, 1);
      break;
    case CVT_Tied:
      Inst.addOperand(Inst.getOperand(*(p + 1)));
      break;
    case CVT_95_addImmOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addImmOperands(Inst, 1);
      break;
    case CVT_95_Reg:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOperands(Inst, 1);
      break;
    case CVT_imm_95_0:
      Inst.addOperand(MCOperand::createImm(0));
      break;
    case CVT_cvtMubuf:
      cvtMubuf(Inst, Operands);
      break;
    case CVT_cvtDS:
      cvtDS(Inst, Operands);
      break;
    case CVT_cvtDSOffset01:
      cvtDSOffset01(Inst, Operands);
      break;
    case CVT_cvtFlat:
      cvtFlat(Inst, Operands);
      break;
    case CVT_95_addRegOrImmOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addRegOrImmOperands(Inst, 1);
      break;
    case CVT_95_addSoppBrTargetOperands:
      static_cast<AMDGPUOperand&>(*Operands[*(p + 1)]).addSoppBrTargetOperands(Inst, 1);
      break;
    case CVT_cvtVOP3:
      cvtVOP3(Inst, Operands);
      break;
    }
  }
}

void AMDGPUAsmParser::
convertToMapAndConstraints(unsigned Kind,
                           const OperandVector &Operands) {
  assert(Kind < CVT_NUM_SIGNATURES && "Invalid signature!");
  unsigned NumMCOperands = 0;
  const uint8_t *Converter = ConversionTable[Kind];
  for (const uint8_t *p = Converter; *p; p+= 2) {
    switch (*p) {
    default: llvm_unreachable("invalid conversion entry!");
    case CVT_Reg:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("r");
      ++NumMCOperands;
      break;
    case CVT_Tied:
      ++NumMCOperands;
      break;
    case CVT_95_addImmOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    case CVT_95_Reg:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("r");
      NumMCOperands += 1;
      break;
    case CVT_imm_95_0:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("");
      ++NumMCOperands;
      break;
    case CVT_95_addRegOrImmOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    case CVT_95_addSoppBrTargetOperands:
      Operands[*(p + 1)]->setMCOperandNum(NumMCOperands);
      Operands[*(p + 1)]->setConstraint("m");
      NumMCOperands += 1;
      break;
    }
  }
}

namespace {

/// MatchClassKind - The kinds of classes which participate in
/// instruction matching.
enum MatchClassKind {
  InvalidMatchClass = 0,
  MCK__COLON_, // ':'
  MCK__64_, // '@'
  MCK_CALL_95_FS, // 'CALL_FS'
  MCK_CF_95_END, // 'CF_END'
  MCK_CONTINUE, // 'CONTINUE'
  MCK_ELSE, // 'ELSE'
  MCK_END_95_LOOP, // 'END_LOOP'
  MCK_INTERP_95_LOAD, // 'INTERP_LOAD'
  MCK_INTERP_95_PAIR_95_XY, // 'INTERP_PAIR_XY'
  MCK_INTERP_95_PAIR_95_ZW, // 'INTERP_PAIR_ZW'
  MCK_JUMP, // 'JUMP'
  MCK_LOOP_95_BREAK, // 'LOOP_BREAK'
  MCK_LOOP_95_START_95_DX10, // 'LOOP_START_DX10'
  MCK_MASK_95_WRITE, // 'MASK_WRITE'
  MCK_PAD, // 'PAD'
  MCK_POP, // 'POP'
  MCK_POP_COLON_, // 'POP:'
  MCK_PUSH, // 'PUSH'
  MCK_PUSH_95_ELSE, // 'PUSH_ELSE'
  MCK_TEX, // 'TEX'
  MCK_VTX, // 'VTX'
  MCK__91_, // '['
  MCK__93_, // ']'
  MCK_addr64, // 'addr64'
  MCK_buffer_95_atomic_95_add, // 'buffer_atomic_add'
  MCK_buffer_95_atomic_95_and, // 'buffer_atomic_and'
  MCK_buffer_95_atomic_95_or, // 'buffer_atomic_or'
  MCK_buffer_95_atomic_95_smax, // 'buffer_atomic_smax'
  MCK_buffer_95_atomic_95_smin, // 'buffer_atomic_smin'
  MCK_buffer_95_atomic_95_sub, // 'buffer_atomic_sub'
  MCK_buffer_95_atomic_95_swap, // 'buffer_atomic_swap'
  MCK_buffer_95_atomic_95_umax, // 'buffer_atomic_umax'
  MCK_buffer_95_atomic_95_umin, // 'buffer_atomic_umin'
  MCK_buffer_95_atomic_95_xor, // 'buffer_atomic_xor'
  MCK_buffer_95_load_95_dword, // 'buffer_load_dword'
  MCK_buffer_95_load_95_dwordx2, // 'buffer_load_dwordx2'
  MCK_buffer_95_load_95_dwordx4, // 'buffer_load_dwordx4'
  MCK_buffer_95_load_95_format_95_x, // 'buffer_load_format_x'
  MCK_buffer_95_load_95_format_95_xy, // 'buffer_load_format_xy'
  MCK_buffer_95_load_95_format_95_xyz, // 'buffer_load_format_xyz'
  MCK_buffer_95_load_95_format_95_xyzw, // 'buffer_load_format_xyzw'
  MCK_buffer_95_load_95_sbyte, // 'buffer_load_sbyte'
  MCK_buffer_95_load_95_sshort, // 'buffer_load_sshort'
  MCK_buffer_95_load_95_ubyte, // 'buffer_load_ubyte'
  MCK_buffer_95_load_95_ushort, // 'buffer_load_ushort'
  MCK_buffer_95_store_95_byte, // 'buffer_store_byte'
  MCK_buffer_95_store_95_dword, // 'buffer_store_dword'
  MCK_buffer_95_store_95_dwordx2, // 'buffer_store_dwordx2'
  MCK_buffer_95_store_95_dwordx4, // 'buffer_store_dwordx4'
  MCK_buffer_95_store_95_format_95_x, // 'buffer_store_format_x'
  MCK_buffer_95_store_95_format_95_xy, // 'buffer_store_format_xy'
  MCK_buffer_95_store_95_format_95_xyz, // 'buffer_store_format_xyz'
  MCK_buffer_95_store_95_format_95_xyzw, // 'buffer_store_format_xyzw'
  MCK_buffer_95_store_95_short, // 'buffer_store_short'
  MCK_buffer_95_wbinvl1, // 'buffer_wbinvl1'
  MCK_buffer_95_wbinvl1_95_sc, // 'buffer_wbinvl1_sc'
  MCK_buffer_95_wbinvl1_95_vol, // 'buffer_wbinvl1_vol'
  MCK_ds_95_add_95_rtn_95_u32, // 'ds_add_rtn_u32'
  MCK_ds_95_add_95_rtn_95_u64, // 'ds_add_rtn_u64'
  MCK_ds_95_add_95_src2_95_u32, // 'ds_add_src2_u32'
  MCK_ds_95_add_95_src2_95_u64, // 'ds_add_src2_u64'
  MCK_ds_95_add_95_u32, // 'ds_add_u32'
  MCK_ds_95_add_95_u64, // 'ds_add_u64'
  MCK_ds_95_and_95_b32, // 'ds_and_b32'
  MCK_ds_95_and_95_b64, // 'ds_and_b64'
  MCK_ds_95_and_95_rtn_95_b32, // 'ds_and_rtn_b32'
  MCK_ds_95_and_95_rtn_95_b64, // 'ds_and_rtn_b64'
  MCK_ds_95_and_95_src2_95_b64, // 'ds_and_src2_b64'
  MCK_ds_95_and_95_src_95_b32, // 'ds_and_src_b32'
  MCK_ds_95_append, // 'ds_append'
  MCK_ds_95_cmpst_95_b32, // 'ds_cmpst_b32'
  MCK_ds_95_cmpst_95_b64, // 'ds_cmpst_b64'
  MCK_ds_95_cmpst_95_f32, // 'ds_cmpst_f32'
  MCK_ds_95_cmpst_95_f64, // 'ds_cmpst_f64'
  MCK_ds_95_cmpst_95_rtn_95_b32, // 'ds_cmpst_rtn_b32'
  MCK_ds_95_cmpst_95_rtn_95_b64, // 'ds_cmpst_rtn_b64'
  MCK_ds_95_cmpst_95_rtn_95_f32, // 'ds_cmpst_rtn_f32'
  MCK_ds_95_cmpst_95_rtn_95_f64, // 'ds_cmpst_rtn_f64'
  MCK_ds_95_consume, // 'ds_consume'
  MCK_ds_95_dec_95_rtn_95_u32, // 'ds_dec_rtn_u32'
  MCK_ds_95_dec_95_rtn_95_u64, // 'ds_dec_rtn_u64'
  MCK_ds_95_dec_95_src2_95_u32, // 'ds_dec_src2_u32'
  MCK_ds_95_dec_95_src2_95_u64, // 'ds_dec_src2_u64'
  MCK_ds_95_dec_95_u32, // 'ds_dec_u32'
  MCK_ds_95_dec_95_u64, // 'ds_dec_u64'
  MCK_ds_95_gws_95_barrier, // 'ds_gws_barrier'
  MCK_ds_95_gws_95_init, // 'ds_gws_init'
  MCK_ds_95_gws_95_sema_95_br, // 'ds_gws_sema_br'
  MCK_ds_95_gws_95_sema_95_p, // 'ds_gws_sema_p'
  MCK_ds_95_gws_95_sema_95_v, // 'ds_gws_sema_v'
  MCK_ds_95_inc_95_rtn_95_u32, // 'ds_inc_rtn_u32'
  MCK_ds_95_inc_95_rtn_95_u64, // 'ds_inc_rtn_u64'
  MCK_ds_95_inc_95_src2_95_u32, // 'ds_inc_src2_u32'
  MCK_ds_95_inc_95_src2_95_u64, // 'ds_inc_src2_u64'
  MCK_ds_95_inc_95_u32, // 'ds_inc_u32'
  MCK_ds_95_inc_95_u64, // 'ds_inc_u64'
  MCK_ds_95_max_95_f32, // 'ds_max_f32'
  MCK_ds_95_max_95_f64, // 'ds_max_f64'
  MCK_ds_95_max_95_i32, // 'ds_max_i32'
  MCK_ds_95_max_95_i64, // 'ds_max_i64'
  MCK_ds_95_max_95_rtn_95_f32, // 'ds_max_rtn_f32'
  MCK_ds_95_max_95_rtn_95_f64, // 'ds_max_rtn_f64'
  MCK_ds_95_max_95_rtn_95_i32, // 'ds_max_rtn_i32'
  MCK_ds_95_max_95_rtn_95_i64, // 'ds_max_rtn_i64'
  MCK_ds_95_max_95_rtn_95_u32, // 'ds_max_rtn_u32'
  MCK_ds_95_max_95_rtn_95_u64, // 'ds_max_rtn_u64'
  MCK_ds_95_max_95_src2_95_f32, // 'ds_max_src2_f32'
  MCK_ds_95_max_95_src2_95_f64, // 'ds_max_src2_f64'
  MCK_ds_95_max_95_src2_95_i32, // 'ds_max_src2_i32'
  MCK_ds_95_max_95_src2_95_i64, // 'ds_max_src2_i64'
  MCK_ds_95_max_95_src2_95_u32, // 'ds_max_src2_u32'
  MCK_ds_95_max_95_src2_95_u64, // 'ds_max_src2_u64'
  MCK_ds_95_max_95_u32, // 'ds_max_u32'
  MCK_ds_95_max_95_u64, // 'ds_max_u64'
  MCK_ds_95_min_95_f32, // 'ds_min_f32'
  MCK_ds_95_min_95_f64, // 'ds_min_f64'
  MCK_ds_95_min_95_i32, // 'ds_min_i32'
  MCK_ds_95_min_95_i64, // 'ds_min_i64'
  MCK_ds_95_min_95_rtn_95_f32, // 'ds_min_rtn_f32'
  MCK_ds_95_min_95_rtn_95_f64, // 'ds_min_rtn_f64'
  MCK_ds_95_min_95_rtn_95_i32, // 'ds_min_rtn_i32'
  MCK_ds_95_min_95_rtn_95_i64, // 'ds_min_rtn_i64'
  MCK_ds_95_min_95_rtn_95_u32, // 'ds_min_rtn_u32'
  MCK_ds_95_min_95_rtn_95_u64, // 'ds_min_rtn_u64'
  MCK_ds_95_min_95_src2_95_f32, // 'ds_min_src2_f32'
  MCK_ds_95_min_95_src2_95_f64, // 'ds_min_src2_f64'
  MCK_ds_95_min_95_src2_95_i32, // 'ds_min_src2_i32'
  MCK_ds_95_min_95_src2_95_i64, // 'ds_min_src2_i64'
  MCK_ds_95_min_95_src2_95_u32, // 'ds_min_src2_u32'
  MCK_ds_95_min_95_src2_95_u64, // 'ds_min_src2_u64'
  MCK_ds_95_min_95_u32, // 'ds_min_u32'
  MCK_ds_95_min_95_u64, // 'ds_min_u64'
  MCK_ds_95_mskor_95_b32, // 'ds_mskor_b32'
  MCK_ds_95_mskor_95_b64, // 'ds_mskor_b64'
  MCK_ds_95_mskor_95_rtn_95_b32, // 'ds_mskor_rtn_b32'
  MCK_ds_95_mskor_95_rtn_95_b64, // 'ds_mskor_rtn_b64'
  MCK_ds_95_or_95_b32, // 'ds_or_b32'
  MCK_ds_95_or_95_b64, // 'ds_or_b64'
  MCK_ds_95_or_95_rtn_95_b32, // 'ds_or_rtn_b32'
  MCK_ds_95_or_95_rtn_95_b64, // 'ds_or_rtn_b64'
  MCK_ds_95_or_95_src2_95_b32, // 'ds_or_src2_b32'
  MCK_ds_95_or_95_src2_95_b64, // 'ds_or_src2_b64'
  MCK_ds_95_ordered_95_count, // 'ds_ordered_count'
  MCK_ds_95_read2_95_b32, // 'ds_read2_b32'
  MCK_ds_95_read2_95_b64, // 'ds_read2_b64'
  MCK_ds_95_read2st64_95_b32, // 'ds_read2st64_b32'
  MCK_ds_95_read2st64_95_b64, // 'ds_read2st64_b64'
  MCK_ds_95_read_95_b32, // 'ds_read_b32'
  MCK_ds_95_read_95_b64, // 'ds_read_b64'
  MCK_ds_95_read_95_i16, // 'ds_read_i16'
  MCK_ds_95_read_95_i8, // 'ds_read_i8'
  MCK_ds_95_read_95_u16, // 'ds_read_u16'
  MCK_ds_95_read_95_u8, // 'ds_read_u8'
  MCK_ds_95_rsub_95_rtn_95_u32, // 'ds_rsub_rtn_u32'
  MCK_ds_95_rsub_95_rtn_95_u64, // 'ds_rsub_rtn_u64'
  MCK_ds_95_rsub_95_src2_95_u32, // 'ds_rsub_src2_u32'
  MCK_ds_95_rsub_95_src2_95_u64, // 'ds_rsub_src2_u64'
  MCK_ds_95_rsub_95_u32, // 'ds_rsub_u32'
  MCK_ds_95_rsub_95_u64, // 'ds_rsub_u64'
  MCK_ds_95_sub_95_rtn_95_u32, // 'ds_sub_rtn_u32'
  MCK_ds_95_sub_95_rtn_95_u64, // 'ds_sub_rtn_u64'
  MCK_ds_95_sub_95_src2_95_u32, // 'ds_sub_src2_u32'
  MCK_ds_95_sub_95_src2_95_u64, // 'ds_sub_src2_u64'
  MCK_ds_95_sub_95_u32, // 'ds_sub_u32'
  MCK_ds_95_sub_95_u64, // 'ds_sub_u64'
  MCK_ds_95_swizzle_95_b32, // 'ds_swizzle_b32'
  MCK_ds_95_wrap_95_rtn_95_f32, // 'ds_wrap_rtn_f32'
  MCK_ds_95_write2_95_b32, // 'ds_write2_b32'
  MCK_ds_95_write2_95_b64, // 'ds_write2_b64'
  MCK_ds_95_write2st64_95_b32, // 'ds_write2st64_b32'
  MCK_ds_95_write2st64_95_b64, // 'ds_write2st64_b64'
  MCK_ds_95_write_95_b16, // 'ds_write_b16'
  MCK_ds_95_write_95_b32, // 'ds_write_b32'
  MCK_ds_95_write_95_b64, // 'ds_write_b64'
  MCK_ds_95_write_95_b8, // 'ds_write_b8'
  MCK_ds_95_write_95_src2_95_b32, // 'ds_write_src2_b32'
  MCK_ds_95_write_95_src2_95_b64, // 'ds_write_src2_b64'
  MCK_ds_95_wrxchg2_95_rtn_95_b32, // 'ds_wrxchg2_rtn_b32'
  MCK_ds_95_wrxchg2_95_rtn_95_b64, // 'ds_wrxchg2_rtn_b64'
  MCK_ds_95_wrxchg2st64_95_rtn_95_b32, // 'ds_wrxchg2st64_rtn_b32'
  MCK_ds_95_wrxchg2st64_95_rtn_95_b64, // 'ds_wrxchg2st64_rtn_b64'
  MCK_ds_95_wrxchg_95_rtn_95_b32, // 'ds_wrxchg_rtn_b32'
  MCK_ds_95_wrxchg_95_rtn_95_b64, // 'ds_wrxchg_rtn_b64'
  MCK_ds_95_xor_95_b32, // 'ds_xor_b32'
  MCK_ds_95_xor_95_b64, // 'ds_xor_b64'
  MCK_ds_95_xor_95_rtn_95_b32, // 'ds_xor_rtn_b32'
  MCK_ds_95_xor_95_rtn_95_b64, // 'ds_xor_rtn_b64'
  MCK_ds_95_xor_95_src2_95_b32, // 'ds_xor_src2_b32'
  MCK_ds_95_xor_95_src2_95_b64, // 'ds_xor_src2_b64'
  MCK_dst1, // 'dst1'
  MCK_exp, // 'exp'
  MCK_flat_95_atomic_95_add, // 'flat_atomic_add'
  MCK_flat_95_atomic_95_add_95_x2, // 'flat_atomic_add_x2'
  MCK_flat_95_atomic_95_and, // 'flat_atomic_and'
  MCK_flat_95_atomic_95_and_95_x2, // 'flat_atomic_and_x2'
  MCK_flat_95_atomic_95_cmpswap, // 'flat_atomic_cmpswap'
  MCK_flat_95_atomic_95_cmpswap_95_x2, // 'flat_atomic_cmpswap_x2'
  MCK_flat_95_atomic_95_dec, // 'flat_atomic_dec'
  MCK_flat_95_atomic_95_dec_95_x2, // 'flat_atomic_dec_x2'
  MCK_flat_95_atomic_95_fcmpswap, // 'flat_atomic_fcmpswap'
  MCK_flat_95_atomic_95_fcmpswap_95_x2, // 'flat_atomic_fcmpswap_x2'
  MCK_flat_95_atomic_95_fmax, // 'flat_atomic_fmax'
  MCK_flat_95_atomic_95_fmax_95_x2, // 'flat_atomic_fmax_x2'
  MCK_flat_95_atomic_95_fmin, // 'flat_atomic_fmin'
  MCK_flat_95_atomic_95_fmin_95_x2, // 'flat_atomic_fmin_x2'
  MCK_flat_95_atomic_95_inc, // 'flat_atomic_inc'
  MCK_flat_95_atomic_95_inc_95_x2, // 'flat_atomic_inc_x2'
  MCK_flat_95_atomic_95_or, // 'flat_atomic_or'
  MCK_flat_95_atomic_95_or_95_x2, // 'flat_atomic_or_x2'
  MCK_flat_95_atomic_95_rsub, // 'flat_atomic_rsub'
  MCK_flat_95_atomic_95_rsub_95_x2, // 'flat_atomic_rsub_x2'
  MCK_flat_95_atomic_95_smax, // 'flat_atomic_smax'
  MCK_flat_95_atomic_95_smax_95_x2, // 'flat_atomic_smax_x2'
  MCK_flat_95_atomic_95_smin, // 'flat_atomic_smin'
  MCK_flat_95_atomic_95_smin_95_x2, // 'flat_atomic_smin_x2'
  MCK_flat_95_atomic_95_sub, // 'flat_atomic_sub'
  MCK_flat_95_atomic_95_sub_95_x2, // 'flat_atomic_sub_x2'
  MCK_flat_95_atomic_95_swap, // 'flat_atomic_swap'
  MCK_flat_95_atomic_95_swap_95_x2, // 'flat_atomic_swap_x2'
  MCK_flat_95_atomic_95_umax, // 'flat_atomic_umax'
  MCK_flat_95_atomic_95_umax_95_x2, // 'flat_atomic_umax_x2'
  MCK_flat_95_atomic_95_umin, // 'flat_atomic_umin'
  MCK_flat_95_atomic_95_umin_95_x2, // 'flat_atomic_umin_x2'
  MCK_flat_95_atomic_95_xor, // 'flat_atomic_xor'
  MCK_flat_95_atomic_95_xor_95_x2, // 'flat_atomic_xor_x2'
  MCK_flat_95_load_95_dword, // 'flat_load_dword'
  MCK_flat_95_load_95_dwordx2, // 'flat_load_dwordx2'
  MCK_flat_95_load_95_dwordx3, // 'flat_load_dwordx3'
  MCK_flat_95_load_95_dwordx4, // 'flat_load_dwordx4'
  MCK_flat_95_load_95_sbyte, // 'flat_load_sbyte'
  MCK_flat_95_load_95_sshort, // 'flat_load_sshort'
  MCK_flat_95_load_95_ubyte, // 'flat_load_ubyte'
  MCK_flat_95_load_95_ushort, // 'flat_load_ushort'
  MCK_flat_95_store_95_byte, // 'flat_store_byte'
  MCK_flat_95_store_95_dword, // 'flat_store_dword'
  MCK_flat_95_store_95_dwordx2, // 'flat_store_dwordx2'
  MCK_flat_95_store_95_dwordx3, // 'flat_store_dwordx3'
  MCK_flat_95_store_95_dwordx4, // 'flat_store_dwordx4'
  MCK_flat_95_store_95_short, // 'flat_store_short'
  MCK_gds, // 'gds'
  MCK_glc, // 'glc'
  MCK_idxen, // 'idxen'
  MCK_image_95_gather4, // 'image_gather4'
  MCK_image_95_gather4_95_b, // 'image_gather4_b'
  MCK_image_95_gather4_95_b_95_cl, // 'image_gather4_b_cl'
  MCK_image_95_gather4_95_b_95_cl_95_o, // 'image_gather4_b_cl_o'
  MCK_image_95_gather4_95_b_95_o, // 'image_gather4_b_o'
  MCK_image_95_gather4_95_c, // 'image_gather4_c'
  MCK_image_95_gather4_95_c_95_b, // 'image_gather4_c_b'
  MCK_image_95_gather4_95_c_95_b_95_cl, // 'image_gather4_c_b_cl'
  MCK_image_95_gather4_95_c_95_b_95_cl_95_o, // 'image_gather4_c_b_cl_o'
  MCK_image_95_gather4_95_c_95_b_95_o, // 'image_gather4_c_b_o'
  MCK_image_95_gather4_95_c_95_cl, // 'image_gather4_c_cl'
  MCK_image_95_gather4_95_c_95_cl_95_o, // 'image_gather4_c_cl_o'
  MCK_image_95_gather4_95_c_95_l, // 'image_gather4_c_l'
  MCK_image_95_gather4_95_c_95_l_95_o, // 'image_gather4_c_l_o'
  MCK_image_95_gather4_95_c_95_lz, // 'image_gather4_c_lz'
  MCK_image_95_gather4_95_c_95_lz_95_o, // 'image_gather4_c_lz_o'
  MCK_image_95_gather4_95_c_95_o, // 'image_gather4_c_o'
  MCK_image_95_gather4_95_cl, // 'image_gather4_cl'
  MCK_image_95_gather4_95_cl_95_o, // 'image_gather4_cl_o'
  MCK_image_95_gather4_95_l, // 'image_gather4_l'
  MCK_image_95_gather4_95_l_95_o, // 'image_gather4_l_o'
  MCK_image_95_gather4_95_lz, // 'image_gather4_lz'
  MCK_image_95_gather4_95_lz_95_o, // 'image_gather4_lz_o'
  MCK_image_95_gather4_95_o, // 'image_gather4_o'
  MCK_image_95_get_95_lod, // 'image_get_lod'
  MCK_image_95_get_95_resinfo, // 'image_get_resinfo'
  MCK_image_95_load, // 'image_load'
  MCK_image_95_load_95_mip, // 'image_load_mip'
  MCK_image_95_sample, // 'image_sample'
  MCK_image_95_sample_95_b, // 'image_sample_b'
  MCK_image_95_sample_95_b_95_cl, // 'image_sample_b_cl'
  MCK_image_95_sample_95_b_95_cl_95_o, // 'image_sample_b_cl_o'
  MCK_image_95_sample_95_b_95_o, // 'image_sample_b_o'
  MCK_image_95_sample_95_c, // 'image_sample_c'
  MCK_image_95_sample_95_c_95_b, // 'image_sample_c_b'
  MCK_image_95_sample_95_c_95_b_95_cl, // 'image_sample_c_b_cl'
  MCK_image_95_sample_95_c_95_b_95_cl_95_o, // 'image_sample_c_b_cl_o'
  MCK_image_95_sample_95_c_95_b_95_o, // 'image_sample_c_b_o'
  MCK_image_95_sample_95_c_95_cd, // 'image_sample_c_cd'
  MCK_image_95_sample_95_c_95_cd_95_cl, // 'image_sample_c_cd_cl'
  MCK_image_95_sample_95_c_95_cd_95_cl_95_o, // 'image_sample_c_cd_cl_o'
  MCK_image_95_sample_95_c_95_cd_95_o, // 'image_sample_c_cd_o'
  MCK_image_95_sample_95_c_95_cl, // 'image_sample_c_cl'
  MCK_image_95_sample_95_c_95_cl_95_o, // 'image_sample_c_cl_o'
  MCK_image_95_sample_95_c_95_d, // 'image_sample_c_d'
  MCK_image_95_sample_95_c_95_d_95_cl, // 'image_sample_c_d_cl'
  MCK_image_95_sample_95_c_95_d_95_cl_95_o, // 'image_sample_c_d_cl_o'
  MCK_image_95_sample_95_c_95_d_95_o, // 'image_sample_c_d_o'
  MCK_image_95_sample_95_c_95_l, // 'image_sample_c_l'
  MCK_image_95_sample_95_c_95_l_95_o, // 'image_sample_c_l_o'
  MCK_image_95_sample_95_c_95_lz, // 'image_sample_c_lz'
  MCK_image_95_sample_95_c_95_lz_95_o, // 'image_sample_c_lz_o'
  MCK_image_95_sample_95_c_95_o, // 'image_sample_c_o'
  MCK_image_95_sample_95_cd, // 'image_sample_cd'
  MCK_image_95_sample_95_cd_95_cl, // 'image_sample_cd_cl'
  MCK_image_95_sample_95_cd_95_cl_95_o, // 'image_sample_cd_cl_o'
  MCK_image_95_sample_95_cd_95_o, // 'image_sample_cd_o'
  MCK_image_95_sample_95_cl, // 'image_sample_cl'
  MCK_image_95_sample_95_cl_95_o, // 'image_sample_cl_o'
  MCK_image_95_sample_95_d, // 'image_sample_d'
  MCK_image_95_sample_95_d_95_cl, // 'image_sample_d_cl'
  MCK_image_95_sample_95_d_95_cl_95_o, // 'image_sample_d_cl_o'
  MCK_image_95_sample_95_d_95_o, // 'image_sample_d_o'
  MCK_image_95_sample_95_l, // 'image_sample_l'
  MCK_image_95_sample_95_l_95_o, // 'image_sample_l_o'
  MCK_image_95_sample_95_lz, // 'image_sample_lz'
  MCK_image_95_sample_95_lz_95_o, // 'image_sample_lz_o'
  MCK_image_95_sample_95_o, // 'image_sample_o'
  MCK_offen, // 'offen'
  MCK_s_95_abs_95_i32, // 's_abs_i32'
  MCK_s_95_absdiff_95_i32, // 's_absdiff_i32'
  MCK_s_95_add_95_i32, // 's_add_i32'
  MCK_s_95_add_95_u32, // 's_add_u32'
  MCK_s_95_addc_95_u32, // 's_addc_u32'
  MCK_s_95_addk_95_i32, // 's_addk_i32'
  MCK_s_95_and_95_b32, // 's_and_b32'
  MCK_s_95_and_95_b64, // 's_and_b64'
  MCK_s_95_and_95_saveexec_95_b64, // 's_and_saveexec_b64'
  MCK_s_95_andn2_95_b32, // 's_andn2_b32'
  MCK_s_95_andn2_95_b64, // 's_andn2_b64'
  MCK_s_95_andn2_95_saveexec_95_b64, // 's_andn2_saveexec_b64'
  MCK_s_95_ashr_95_i32, // 's_ashr_i32'
  MCK_s_95_ashr_95_i64, // 's_ashr_i64'
  MCK_s_95_barrier, // 's_barrier'
  MCK_s_95_bcnt0_95_i32_95_b32, // 's_bcnt0_i32_b32'
  MCK_s_95_bcnt0_95_i32_95_b64, // 's_bcnt0_i32_b64'
  MCK_s_95_bcnt1_95_i32_95_b32, // 's_bcnt1_i32_b32'
  MCK_s_95_bcnt1_95_i32_95_b64, // 's_bcnt1_i32_b64'
  MCK_s_95_bfe_95_i32, // 's_bfe_i32'
  MCK_s_95_bfe_95_i64, // 's_bfe_i64'
  MCK_s_95_bfe_95_u32, // 's_bfe_u32'
  MCK_s_95_bfe_95_u64, // 's_bfe_u64'
  MCK_s_95_bfm_95_b32, // 's_bfm_b32'
  MCK_s_95_bfm_95_b64, // 's_bfm_b64'
  MCK_s_95_bitset0_95_b32, // 's_bitset0_b32'
  MCK_s_95_bitset0_95_b64, // 's_bitset0_b64'
  MCK_s_95_bitset1_95_b32, // 's_bitset1_b32'
  MCK_s_95_bitset1_95_b64, // 's_bitset1_b64'
  MCK_s_95_branch, // 's_branch'
  MCK_s_95_brev_95_b32, // 's_brev_b32'
  MCK_s_95_brev_95_b64, // 's_brev_b64'
  MCK_s_95_buffer_95_load_95_dword, // 's_buffer_load_dword'
  MCK_s_95_buffer_95_load_95_dwordx16, // 's_buffer_load_dwordx16'
  MCK_s_95_buffer_95_load_95_dwordx2, // 's_buffer_load_dwordx2'
  MCK_s_95_buffer_95_load_95_dwordx4, // 's_buffer_load_dwordx4'
  MCK_s_95_buffer_95_load_95_dwordx8, // 's_buffer_load_dwordx8'
  MCK_s_95_cbranch_95_execnz, // 's_cbranch_execnz'
  MCK_s_95_cbranch_95_execz, // 's_cbranch_execz'
  MCK_s_95_cbranch_95_g_95_fork, // 's_cbranch_g_fork'
  MCK_s_95_cbranch_95_i_95_fork, // 's_cbranch_i_fork'
  MCK_s_95_cbranch_95_join, // 's_cbranch_join'
  MCK_s_95_cbranch_95_scc0, // 's_cbranch_scc0'
  MCK_s_95_cbranch_95_scc1, // 's_cbranch_scc1'
  MCK_s_95_cbranch_95_vccnz, // 's_cbranch_vccnz'
  MCK_s_95_cbranch_95_vccz, // 's_cbranch_vccz'
  MCK_s_95_cmov_95_b32, // 's_cmov_b32'
  MCK_s_95_cmov_95_b64, // 's_cmov_b64'
  MCK_s_95_cmovk_95_i32, // 's_cmovk_i32'
  MCK_s_95_cmp_95_eq_95_i32, // 's_cmp_eq_i32'
  MCK_s_95_cmp_95_eq_95_u32, // 's_cmp_eq_u32'
  MCK_s_95_cmp_95_ge_95_i32, // 's_cmp_ge_i32'
  MCK_s_95_cmp_95_ge_95_u32, // 's_cmp_ge_u32'
  MCK_s_95_cmp_95_gt_95_i32, // 's_cmp_gt_i32'
  MCK_s_95_cmp_95_gt_95_u32, // 's_cmp_gt_u32'
  MCK_s_95_cmp_95_le_95_i32, // 's_cmp_le_i32'
  MCK_s_95_cmp_95_le_95_u32, // 's_cmp_le_u32'
  MCK_s_95_cmp_95_lg_95_i32, // 's_cmp_lg_i32'
  MCK_s_95_cmp_95_lg_95_u32, // 's_cmp_lg_u32'
  MCK_s_95_cmp_95_lt_95_i32, // 's_cmp_lt_i32'
  MCK_s_95_cmp_95_lt_95_u32, // 's_cmp_lt_u32'
  MCK_s_95_cmpk_95_eq_95_i32, // 's_cmpk_eq_i32'
  MCK_s_95_cmpk_95_eq_95_u32, // 's_cmpk_eq_u32'
  MCK_s_95_cmpk_95_ge_95_i32, // 's_cmpk_ge_i32'
  MCK_s_95_cmpk_95_ge_95_u32, // 's_cmpk_ge_u32'
  MCK_s_95_cmpk_95_gt_95_i32, // 's_cmpk_gt_i32'
  MCK_s_95_cmpk_95_gt_95_u32, // 's_cmpk_gt_u32'
  MCK_s_95_cmpk_95_le_95_i32, // 's_cmpk_le_i32'
  MCK_s_95_cmpk_95_le_95_u32, // 's_cmpk_le_u32'
  MCK_s_95_cmpk_95_lg_95_i32, // 's_cmpk_lg_i32'
  MCK_s_95_cmpk_95_lg_95_u32, // 's_cmpk_lg_u32'
  MCK_s_95_cmpk_95_lt_95_i32, // 's_cmpk_lt_i32'
  MCK_s_95_cmpk_95_lt_95_u32, // 's_cmpk_lt_u32'
  MCK_s_95_cselect_95_b32, // 's_cselect_b32'
  MCK_s_95_cselect_95_b64, // 's_cselect_b64'
  MCK_s_95_dcache_95_inv, // 's_dcache_inv'
  MCK_s_95_dcache_95_inv_95_vol, // 's_dcache_inv_vol'
  MCK_s_95_dcache_95_wb, // 's_dcache_wb'
  MCK_s_95_dcache_95_wb_95_vol, // 's_dcache_wb_vol'
  MCK_s_95_decperflevel, // 's_decperflevel'
  MCK_s_95_endpgm, // 's_endpgm'
  MCK_s_95_ff0_95_i32_95_b32, // 's_ff0_i32_b32'
  MCK_s_95_ff0_95_i32_95_b64, // 's_ff0_i32_b64'
  MCK_s_95_ff1_95_i32_95_b32, // 's_ff1_i32_b32'
  MCK_s_95_ff1_95_i32_95_b64, // 's_ff1_i32_b64'
  MCK_s_95_flbit_95_i32, // 's_flbit_i32'
  MCK_s_95_flbit_95_i32_95_b32, // 's_flbit_i32_b32'
  MCK_s_95_flbit_95_i32_95_b64, // 's_flbit_i32_b64'
  MCK_s_95_flbit_95_i32_95_i64, // 's_flbit_i32_i64'
  MCK_s_95_getpc_95_b64, // 's_getpc_b64'
  MCK_s_95_getreg_95_b32, // 's_getreg_b32'
  MCK_s_95_icache_95_inv, // 's_icache_inv'
  MCK_s_95_incperflevel, // 's_incperflevel'
  MCK_s_95_load_95_dword, // 's_load_dword'
  MCK_s_95_load_95_dwordx16, // 's_load_dwordx16'
  MCK_s_95_load_95_dwordx2, // 's_load_dwordx2'
  MCK_s_95_load_95_dwordx4, // 's_load_dwordx4'
  MCK_s_95_load_95_dwordx8, // 's_load_dwordx8'
  MCK_s_95_lshl_95_b32, // 's_lshl_b32'
  MCK_s_95_lshl_95_b64, // 's_lshl_b64'
  MCK_s_95_lshr_95_b32, // 's_lshr_b32'
  MCK_s_95_lshr_95_b64, // 's_lshr_b64'
  MCK_s_95_max_95_i32, // 's_max_i32'
  MCK_s_95_max_95_u32, // 's_max_u32'
  MCK_s_95_min_95_i32, // 's_min_i32'
  MCK_s_95_min_95_u32, // 's_min_u32'
  MCK_s_95_mov_95_b32, // 's_mov_b32'
  MCK_s_95_mov_95_b64, // 's_mov_b64'
  MCK_s_95_mov_95_fed_95_b32, // 's_mov_fed_b32'
  MCK_s_95_mov_95_regrd_95_b32, // 's_mov_regrd_b32'
  MCK_s_95_movk_95_i32, // 's_movk_i32'
  MCK_s_95_movreld_95_b32, // 's_movreld_b32'
  MCK_s_95_movreld_95_b64, // 's_movreld_b64'
  MCK_s_95_movrels_95_b32, // 's_movrels_b32'
  MCK_s_95_movrels_95_b64, // 's_movrels_b64'
  MCK_s_95_mul_95_i32, // 's_mul_i32'
  MCK_s_95_mulk_95_i32, // 's_mulk_i32'
  MCK_s_95_nand_95_b32, // 's_nand_b32'
  MCK_s_95_nand_95_b64, // 's_nand_b64'
  MCK_s_95_nand_95_saveexec_95_b64, // 's_nand_saveexec_b64'
  MCK_s_95_nop, // 's_nop'
  MCK_s_95_nor_95_b32, // 's_nor_b32'
  MCK_s_95_nor_95_b64, // 's_nor_b64'
  MCK_s_95_nor_95_saveexec_95_b64, // 's_nor_saveexec_b64'
  MCK_s_95_not_95_b32, // 's_not_b32'
  MCK_s_95_not_95_b64, // 's_not_b64'
  MCK_s_95_or_95_b32, // 's_or_b32'
  MCK_s_95_or_95_b64, // 's_or_b64'
  MCK_s_95_or_95_saveexec_95_b64, // 's_or_saveexec_b64'
  MCK_s_95_orn2_95_b32, // 's_orn2_b32'
  MCK_s_95_orn2_95_b64, // 's_orn2_b64'
  MCK_s_95_orn2_95_saveexec_95_b64, // 's_orn2_saveexec_b64'
  MCK_s_95_quadmask_95_b32, // 's_quadmask_b32'
  MCK_s_95_quadmask_95_b64, // 's_quadmask_b64'
  MCK_s_95_rfe_95_b64, // 's_rfe_b64'
  MCK_s_95_sendmsg, // 's_sendmsg'
  MCK_s_95_sendmsghalt, // 's_sendmsghalt'
  MCK_s_95_sethalt, // 's_sethalt'
  MCK_s_95_setpc_95_b64, // 's_setpc_b64'
  MCK_s_95_setprio, // 's_setprio'
  MCK_s_95_setreg_95_b32, // 's_setreg_b32'
  MCK_s_95_setreg_95_imm32_95_b32, // 's_setreg_imm32_b32'
  MCK_s_95_sext_95_i32_95_i16, // 's_sext_i32_i16'
  MCK_s_95_sext_95_i32_95_i8, // 's_sext_i32_i8'
  MCK_s_95_sleep, // 's_sleep'
  MCK_s_95_sub_95_i32, // 's_sub_i32'
  MCK_s_95_sub_95_u32, // 's_sub_u32'
  MCK_s_95_subb_95_u32, // 's_subb_u32'
  MCK_s_95_swappc_95_b64, // 's_swappc_b64'
  MCK_s_95_trap, // 's_trap'
  MCK_s_95_ttracedata, // 's_ttracedata'
  MCK_s_95_waitcnt, // 's_waitcnt'
  MCK_s_95_wqm_95_b32, // 's_wqm_b32'
  MCK_s_95_wqm_95_b64, // 's_wqm_b64'
  MCK_s_95_xnor_95_b32, // 's_xnor_b32'
  MCK_s_95_xnor_95_b64, // 's_xnor_b64'
  MCK_s_95_xnor_95_saveexec_95_b64, // 's_xnor_saveexec_b64'
  MCK_s_95_xor_95_b32, // 's_xor_b32'
  MCK_s_95_xor_95_b64, // 's_xor_b64'
  MCK_s_95_xor_95_saveexec_95_b64, // 's_xor_saveexec_b64'
  MCK_tbuffer_95_load_95_format_95_xyzw, // 'tbuffer_load_format_xyzw'
  MCK_tbuffer_95_store_95_format_95_x, // 'tbuffer_store_format_x'
  MCK_tbuffer_95_store_95_format_95_xy, // 'tbuffer_store_format_xy'
  MCK_tbuffer_95_store_95_format_95_xyz, // 'tbuffer_store_format_xyz'
  MCK_tbuffer_95_store_95_format_95_xyzw, // 'tbuffer_store_format_xyzw'
  MCK_v_95_add_95_f16, // 'v_add_f16'
  MCK_v_95_add_95_f32, // 'v_add_f32'
  MCK_v_95_add_95_f64, // 'v_add_f64'
  MCK_v_95_add_95_i32, // 'v_add_i32'
  MCK_v_95_add_95_u16, // 'v_add_u16'
  MCK_v_95_addc_95_u32, // 'v_addc_u32'
  MCK_v_95_alignbit_95_b32, // 'v_alignbit_b32'
  MCK_v_95_alignbyte_95_b32, // 'v_alignbyte_b32'
  MCK_v_95_and_95_b32, // 'v_and_b32'
  MCK_v_95_ashr_95_i32, // 'v_ashr_i32'
  MCK_v_95_ashr_95_i64, // 'v_ashr_i64'
  MCK_v_95_ashrrev_95_b16, // 'v_ashrrev_b16'
  MCK_v_95_ashrrev_95_i32, // 'v_ashrrev_i32'
  MCK_v_95_ashrrev_95_i64, // 'v_ashrrev_i64'
  MCK_v_95_bcnt_95_u32_95_b32, // 'v_bcnt_u32_b32'
  MCK_v_95_bfe_95_i32, // 'v_bfe_i32'
  MCK_v_95_bfe_95_u32, // 'v_bfe_u32'
  MCK_v_95_bfi_95_b32, // 'v_bfi_b32'
  MCK_v_95_bfm_95_b32, // 'v_bfm_b32'
  MCK_v_95_bfrev_95_b32, // 'v_bfrev_b32'
  MCK_v_95_ceil_95_f16, // 'v_ceil_f16'
  MCK_v_95_ceil_95_f32, // 'v_ceil_f32'
  MCK_v_95_ceil_95_f64, // 'v_ceil_f64'
  MCK_v_95_clrexcp, // 'v_clrexcp'
  MCK_v_95_cmp_95_class_95_f32, // 'v_cmp_class_f32'
  MCK_v_95_cmp_95_class_95_f32_95_e32, // 'v_cmp_class_f32_e32'
  MCK_v_95_cmp_95_class_95_f64, // 'v_cmp_class_f64'
  MCK_v_95_cmp_95_class_95_f64_95_e32, // 'v_cmp_class_f64_e32'
  MCK_v_95_cmp_95_eq_95_f32, // 'v_cmp_eq_f32'
  MCK_v_95_cmp_95_eq_95_f32_95_e32, // 'v_cmp_eq_f32_e32'
  MCK_v_95_cmp_95_eq_95_f64, // 'v_cmp_eq_f64'
  MCK_v_95_cmp_95_eq_95_f64_95_e32, // 'v_cmp_eq_f64_e32'
  MCK_v_95_cmp_95_eq_95_i32, // 'v_cmp_eq_i32'
  MCK_v_95_cmp_95_eq_95_i32_95_e32, // 'v_cmp_eq_i32_e32'
  MCK_v_95_cmp_95_eq_95_i64, // 'v_cmp_eq_i64'
  MCK_v_95_cmp_95_eq_95_i64_95_e32, // 'v_cmp_eq_i64_e32'
  MCK_v_95_cmp_95_eq_95_u32, // 'v_cmp_eq_u32'
  MCK_v_95_cmp_95_eq_95_u32_95_e32, // 'v_cmp_eq_u32_e32'
  MCK_v_95_cmp_95_eq_95_u64, // 'v_cmp_eq_u64'
  MCK_v_95_cmp_95_eq_95_u64_95_e32, // 'v_cmp_eq_u64_e32'
  MCK_v_95_cmp_95_f_95_f32, // 'v_cmp_f_f32'
  MCK_v_95_cmp_95_f_95_f32_95_e32, // 'v_cmp_f_f32_e32'
  MCK_v_95_cmp_95_f_95_f64, // 'v_cmp_f_f64'
  MCK_v_95_cmp_95_f_95_f64_95_e32, // 'v_cmp_f_f64_e32'
  MCK_v_95_cmp_95_f_95_i32, // 'v_cmp_f_i32'
  MCK_v_95_cmp_95_f_95_i32_95_e32, // 'v_cmp_f_i32_e32'
  MCK_v_95_cmp_95_f_95_i64, // 'v_cmp_f_i64'
  MCK_v_95_cmp_95_f_95_i64_95_e32, // 'v_cmp_f_i64_e32'
  MCK_v_95_cmp_95_f_95_u32, // 'v_cmp_f_u32'
  MCK_v_95_cmp_95_f_95_u32_95_e32, // 'v_cmp_f_u32_e32'
  MCK_v_95_cmp_95_f_95_u64, // 'v_cmp_f_u64'
  MCK_v_95_cmp_95_f_95_u64_95_e32, // 'v_cmp_f_u64_e32'
  MCK_v_95_cmp_95_ge_95_f32, // 'v_cmp_ge_f32'
  MCK_v_95_cmp_95_ge_95_f32_95_e32, // 'v_cmp_ge_f32_e32'
  MCK_v_95_cmp_95_ge_95_f64, // 'v_cmp_ge_f64'
  MCK_v_95_cmp_95_ge_95_f64_95_e32, // 'v_cmp_ge_f64_e32'
  MCK_v_95_cmp_95_ge_95_i32, // 'v_cmp_ge_i32'
  MCK_v_95_cmp_95_ge_95_i32_95_e32, // 'v_cmp_ge_i32_e32'
  MCK_v_95_cmp_95_ge_95_i64, // 'v_cmp_ge_i64'
  MCK_v_95_cmp_95_ge_95_i64_95_e32, // 'v_cmp_ge_i64_e32'
  MCK_v_95_cmp_95_ge_95_u32, // 'v_cmp_ge_u32'
  MCK_v_95_cmp_95_ge_95_u32_95_e32, // 'v_cmp_ge_u32_e32'
  MCK_v_95_cmp_95_ge_95_u64, // 'v_cmp_ge_u64'
  MCK_v_95_cmp_95_ge_95_u64_95_e32, // 'v_cmp_ge_u64_e32'
  MCK_v_95_cmp_95_gt_95_f32, // 'v_cmp_gt_f32'
  MCK_v_95_cmp_95_gt_95_f32_95_e32, // 'v_cmp_gt_f32_e32'
  MCK_v_95_cmp_95_gt_95_f64, // 'v_cmp_gt_f64'
  MCK_v_95_cmp_95_gt_95_f64_95_e32, // 'v_cmp_gt_f64_e32'
  MCK_v_95_cmp_95_gt_95_i32, // 'v_cmp_gt_i32'
  MCK_v_95_cmp_95_gt_95_i32_95_e32, // 'v_cmp_gt_i32_e32'
  MCK_v_95_cmp_95_gt_95_i64, // 'v_cmp_gt_i64'
  MCK_v_95_cmp_95_gt_95_i64_95_e32, // 'v_cmp_gt_i64_e32'
  MCK_v_95_cmp_95_gt_95_u32, // 'v_cmp_gt_u32'
  MCK_v_95_cmp_95_gt_95_u32_95_e32, // 'v_cmp_gt_u32_e32'
  MCK_v_95_cmp_95_gt_95_u64, // 'v_cmp_gt_u64'
  MCK_v_95_cmp_95_gt_95_u64_95_e32, // 'v_cmp_gt_u64_e32'
  MCK_v_95_cmp_95_le_95_f32, // 'v_cmp_le_f32'
  MCK_v_95_cmp_95_le_95_f32_95_e32, // 'v_cmp_le_f32_e32'
  MCK_v_95_cmp_95_le_95_f64, // 'v_cmp_le_f64'
  MCK_v_95_cmp_95_le_95_f64_95_e32, // 'v_cmp_le_f64_e32'
  MCK_v_95_cmp_95_le_95_i32, // 'v_cmp_le_i32'
  MCK_v_95_cmp_95_le_95_i32_95_e32, // 'v_cmp_le_i32_e32'
  MCK_v_95_cmp_95_le_95_i64, // 'v_cmp_le_i64'
  MCK_v_95_cmp_95_le_95_i64_95_e32, // 'v_cmp_le_i64_e32'
  MCK_v_95_cmp_95_le_95_u32, // 'v_cmp_le_u32'
  MCK_v_95_cmp_95_le_95_u32_95_e32, // 'v_cmp_le_u32_e32'
  MCK_v_95_cmp_95_le_95_u64, // 'v_cmp_le_u64'
  MCK_v_95_cmp_95_le_95_u64_95_e32, // 'v_cmp_le_u64_e32'
  MCK_v_95_cmp_95_lg_95_f32, // 'v_cmp_lg_f32'
  MCK_v_95_cmp_95_lg_95_f32_95_e32, // 'v_cmp_lg_f32_e32'
  MCK_v_95_cmp_95_lg_95_f64, // 'v_cmp_lg_f64'
  MCK_v_95_cmp_95_lg_95_f64_95_e32, // 'v_cmp_lg_f64_e32'
  MCK_v_95_cmp_95_lt_95_f32, // 'v_cmp_lt_f32'
  MCK_v_95_cmp_95_lt_95_f32_95_e32, // 'v_cmp_lt_f32_e32'
  MCK_v_95_cmp_95_lt_95_f64, // 'v_cmp_lt_f64'
  MCK_v_95_cmp_95_lt_95_f64_95_e32, // 'v_cmp_lt_f64_e32'
  MCK_v_95_cmp_95_lt_95_i32, // 'v_cmp_lt_i32'
  MCK_v_95_cmp_95_lt_95_i32_95_e32, // 'v_cmp_lt_i32_e32'
  MCK_v_95_cmp_95_lt_95_i64, // 'v_cmp_lt_i64'
  MCK_v_95_cmp_95_lt_95_i64_95_e32, // 'v_cmp_lt_i64_e32'
  MCK_v_95_cmp_95_lt_95_u32, // 'v_cmp_lt_u32'
  MCK_v_95_cmp_95_lt_95_u32_95_e32, // 'v_cmp_lt_u32_e32'
  MCK_v_95_cmp_95_lt_95_u64, // 'v_cmp_lt_u64'
  MCK_v_95_cmp_95_lt_95_u64_95_e32, // 'v_cmp_lt_u64_e32'
  MCK_v_95_cmp_95_ne_95_i32, // 'v_cmp_ne_i32'
  MCK_v_95_cmp_95_ne_95_i32_95_e32, // 'v_cmp_ne_i32_e32'
  MCK_v_95_cmp_95_ne_95_i64, // 'v_cmp_ne_i64'
  MCK_v_95_cmp_95_ne_95_i64_95_e32, // 'v_cmp_ne_i64_e32'
  MCK_v_95_cmp_95_ne_95_u32, // 'v_cmp_ne_u32'
  MCK_v_95_cmp_95_ne_95_u32_95_e32, // 'v_cmp_ne_u32_e32'
  MCK_v_95_cmp_95_ne_95_u64, // 'v_cmp_ne_u64'
  MCK_v_95_cmp_95_ne_95_u64_95_e32, // 'v_cmp_ne_u64_e32'
  MCK_v_95_cmp_95_neq_95_f32, // 'v_cmp_neq_f32'
  MCK_v_95_cmp_95_neq_95_f32_95_e32, // 'v_cmp_neq_f32_e32'
  MCK_v_95_cmp_95_neq_95_f64, // 'v_cmp_neq_f64'
  MCK_v_95_cmp_95_neq_95_f64_95_e32, // 'v_cmp_neq_f64_e32'
  MCK_v_95_cmp_95_nge_95_f32, // 'v_cmp_nge_f32'
  MCK_v_95_cmp_95_nge_95_f32_95_e32, // 'v_cmp_nge_f32_e32'
  MCK_v_95_cmp_95_nge_95_f64, // 'v_cmp_nge_f64'
  MCK_v_95_cmp_95_nge_95_f64_95_e32, // 'v_cmp_nge_f64_e32'
  MCK_v_95_cmp_95_ngt_95_f32, // 'v_cmp_ngt_f32'
  MCK_v_95_cmp_95_ngt_95_f32_95_e32, // 'v_cmp_ngt_f32_e32'
  MCK_v_95_cmp_95_ngt_95_f64, // 'v_cmp_ngt_f64'
  MCK_v_95_cmp_95_ngt_95_f64_95_e32, // 'v_cmp_ngt_f64_e32'
  MCK_v_95_cmp_95_nle_95_f32, // 'v_cmp_nle_f32'
  MCK_v_95_cmp_95_nle_95_f32_95_e32, // 'v_cmp_nle_f32_e32'
  MCK_v_95_cmp_95_nle_95_f64, // 'v_cmp_nle_f64'
  MCK_v_95_cmp_95_nle_95_f64_95_e32, // 'v_cmp_nle_f64_e32'
  MCK_v_95_cmp_95_nlg_95_f32, // 'v_cmp_nlg_f32'
  MCK_v_95_cmp_95_nlg_95_f32_95_e32, // 'v_cmp_nlg_f32_e32'
  MCK_v_95_cmp_95_nlg_95_f64, // 'v_cmp_nlg_f64'
  MCK_v_95_cmp_95_nlg_95_f64_95_e32, // 'v_cmp_nlg_f64_e32'
  MCK_v_95_cmp_95_nlt_95_f32, // 'v_cmp_nlt_f32'
  MCK_v_95_cmp_95_nlt_95_f32_95_e32, // 'v_cmp_nlt_f32_e32'
  MCK_v_95_cmp_95_nlt_95_f64, // 'v_cmp_nlt_f64'
  MCK_v_95_cmp_95_nlt_95_f64_95_e32, // 'v_cmp_nlt_f64_e32'
  MCK_v_95_cmp_95_o_95_f32, // 'v_cmp_o_f32'
  MCK_v_95_cmp_95_o_95_f32_95_e32, // 'v_cmp_o_f32_e32'
  MCK_v_95_cmp_95_o_95_f64, // 'v_cmp_o_f64'
  MCK_v_95_cmp_95_o_95_f64_95_e32, // 'v_cmp_o_f64_e32'
  MCK_v_95_cmp_95_t_95_i32, // 'v_cmp_t_i32'
  MCK_v_95_cmp_95_t_95_i32_95_e32, // 'v_cmp_t_i32_e32'
  MCK_v_95_cmp_95_t_95_i64, // 'v_cmp_t_i64'
  MCK_v_95_cmp_95_t_95_i64_95_e32, // 'v_cmp_t_i64_e32'
  MCK_v_95_cmp_95_t_95_u32, // 'v_cmp_t_u32'
  MCK_v_95_cmp_95_t_95_u32_95_e32, // 'v_cmp_t_u32_e32'
  MCK_v_95_cmp_95_t_95_u64, // 'v_cmp_t_u64'
  MCK_v_95_cmp_95_t_95_u64_95_e32, // 'v_cmp_t_u64_e32'
  MCK_v_95_cmp_95_tru_95_f32, // 'v_cmp_tru_f32'
  MCK_v_95_cmp_95_tru_95_f32_95_e32, // 'v_cmp_tru_f32_e32'
  MCK_v_95_cmp_95_tru_95_f64, // 'v_cmp_tru_f64'
  MCK_v_95_cmp_95_tru_95_f64_95_e32, // 'v_cmp_tru_f64_e32'
  MCK_v_95_cmp_95_u_95_f32, // 'v_cmp_u_f32'
  MCK_v_95_cmp_95_u_95_f32_95_e32, // 'v_cmp_u_f32_e32'
  MCK_v_95_cmp_95_u_95_f64, // 'v_cmp_u_f64'
  MCK_v_95_cmp_95_u_95_f64_95_e32, // 'v_cmp_u_f64_e32'
  MCK_v_95_cmps_95_eq_95_f32, // 'v_cmps_eq_f32'
  MCK_v_95_cmps_95_eq_95_f32_95_e32, // 'v_cmps_eq_f32_e32'
  MCK_v_95_cmps_95_eq_95_f64, // 'v_cmps_eq_f64'
  MCK_v_95_cmps_95_eq_95_f64_95_e32, // 'v_cmps_eq_f64_e32'
  MCK_v_95_cmps_95_f_95_f32, // 'v_cmps_f_f32'
  MCK_v_95_cmps_95_f_95_f32_95_e32, // 'v_cmps_f_f32_e32'
  MCK_v_95_cmps_95_f_95_f64, // 'v_cmps_f_f64'
  MCK_v_95_cmps_95_f_95_f64_95_e32, // 'v_cmps_f_f64_e32'
  MCK_v_95_cmps_95_ge_95_f32, // 'v_cmps_ge_f32'
  MCK_v_95_cmps_95_ge_95_f32_95_e32, // 'v_cmps_ge_f32_e32'
  MCK_v_95_cmps_95_ge_95_f64, // 'v_cmps_ge_f64'
  MCK_v_95_cmps_95_ge_95_f64_95_e32, // 'v_cmps_ge_f64_e32'
  MCK_v_95_cmps_95_gt_95_f32, // 'v_cmps_gt_f32'
  MCK_v_95_cmps_95_gt_95_f32_95_e32, // 'v_cmps_gt_f32_e32'
  MCK_v_95_cmps_95_gt_95_f64, // 'v_cmps_gt_f64'
  MCK_v_95_cmps_95_gt_95_f64_95_e32, // 'v_cmps_gt_f64_e32'
  MCK_v_95_cmps_95_le_95_f32, // 'v_cmps_le_f32'
  MCK_v_95_cmps_95_le_95_f32_95_e32, // 'v_cmps_le_f32_e32'
  MCK_v_95_cmps_95_le_95_f64, // 'v_cmps_le_f64'
  MCK_v_95_cmps_95_le_95_f64_95_e32, // 'v_cmps_le_f64_e32'
  MCK_v_95_cmps_95_lg_95_f32, // 'v_cmps_lg_f32'
  MCK_v_95_cmps_95_lg_95_f32_95_e32, // 'v_cmps_lg_f32_e32'
  MCK_v_95_cmps_95_lg_95_f64, // 'v_cmps_lg_f64'
  MCK_v_95_cmps_95_lg_95_f64_95_e32, // 'v_cmps_lg_f64_e32'
  MCK_v_95_cmps_95_lt_95_f32, // 'v_cmps_lt_f32'
  MCK_v_95_cmps_95_lt_95_f32_95_e32, // 'v_cmps_lt_f32_e32'
  MCK_v_95_cmps_95_lt_95_f64, // 'v_cmps_lt_f64'
  MCK_v_95_cmps_95_lt_95_f64_95_e32, // 'v_cmps_lt_f64_e32'
  MCK_v_95_cmps_95_neq_95_f32, // 'v_cmps_neq_f32'
  MCK_v_95_cmps_95_neq_95_f32_95_e32, // 'v_cmps_neq_f32_e32'
  MCK_v_95_cmps_95_neq_95_f64, // 'v_cmps_neq_f64'
  MCK_v_95_cmps_95_neq_95_f64_95_e32, // 'v_cmps_neq_f64_e32'
  MCK_v_95_cmps_95_nge_95_f32, // 'v_cmps_nge_f32'
  MCK_v_95_cmps_95_nge_95_f32_95_e32, // 'v_cmps_nge_f32_e32'
  MCK_v_95_cmps_95_nge_95_f64, // 'v_cmps_nge_f64'
  MCK_v_95_cmps_95_nge_95_f64_95_e32, // 'v_cmps_nge_f64_e32'
  MCK_v_95_cmps_95_ngt_95_f32, // 'v_cmps_ngt_f32'
  MCK_v_95_cmps_95_ngt_95_f32_95_e32, // 'v_cmps_ngt_f32_e32'
  MCK_v_95_cmps_95_ngt_95_f64, // 'v_cmps_ngt_f64'
  MCK_v_95_cmps_95_ngt_95_f64_95_e32, // 'v_cmps_ngt_f64_e32'
  MCK_v_95_cmps_95_nle_95_f32, // 'v_cmps_nle_f32'
  MCK_v_95_cmps_95_nle_95_f32_95_e32, // 'v_cmps_nle_f32_e32'
  MCK_v_95_cmps_95_nle_95_f64, // 'v_cmps_nle_f64'
  MCK_v_95_cmps_95_nle_95_f64_95_e32, // 'v_cmps_nle_f64_e32'
  MCK_v_95_cmps_95_nlg_95_f32, // 'v_cmps_nlg_f32'
  MCK_v_95_cmps_95_nlg_95_f32_95_e32, // 'v_cmps_nlg_f32_e32'
  MCK_v_95_cmps_95_nlg_95_f64, // 'v_cmps_nlg_f64'
  MCK_v_95_cmps_95_nlg_95_f64_95_e32, // 'v_cmps_nlg_f64_e32'
  MCK_v_95_cmps_95_nlt_95_f32, // 'v_cmps_nlt_f32'
  MCK_v_95_cmps_95_nlt_95_f32_95_e32, // 'v_cmps_nlt_f32_e32'
  MCK_v_95_cmps_95_nlt_95_f64, // 'v_cmps_nlt_f64'
  MCK_v_95_cmps_95_nlt_95_f64_95_e32, // 'v_cmps_nlt_f64_e32'
  MCK_v_95_cmps_95_o_95_f32, // 'v_cmps_o_f32'
  MCK_v_95_cmps_95_o_95_f32_95_e32, // 'v_cmps_o_f32_e32'
  MCK_v_95_cmps_95_o_95_f64, // 'v_cmps_o_f64'
  MCK_v_95_cmps_95_o_95_f64_95_e32, // 'v_cmps_o_f64_e32'
  MCK_v_95_cmps_95_tru_95_f32, // 'v_cmps_tru_f32'
  MCK_v_95_cmps_95_tru_95_f32_95_e32, // 'v_cmps_tru_f32_e32'
  MCK_v_95_cmps_95_tru_95_f64, // 'v_cmps_tru_f64'
  MCK_v_95_cmps_95_tru_95_f64_95_e32, // 'v_cmps_tru_f64_e32'
  MCK_v_95_cmps_95_u_95_f32, // 'v_cmps_u_f32'
  MCK_v_95_cmps_95_u_95_f32_95_e32, // 'v_cmps_u_f32_e32'
  MCK_v_95_cmps_95_u_95_f64, // 'v_cmps_u_f64'
  MCK_v_95_cmps_95_u_95_f64_95_e32, // 'v_cmps_u_f64_e32'
  MCK_v_95_cmpsx_95_eq_95_f32, // 'v_cmpsx_eq_f32'
  MCK_v_95_cmpsx_95_eq_95_f32_95_e32, // 'v_cmpsx_eq_f32_e32'
  MCK_v_95_cmpsx_95_eq_95_f64, // 'v_cmpsx_eq_f64'
  MCK_v_95_cmpsx_95_eq_95_f64_95_e32, // 'v_cmpsx_eq_f64_e32'
  MCK_v_95_cmpsx_95_f_95_f32, // 'v_cmpsx_f_f32'
  MCK_v_95_cmpsx_95_f_95_f32_95_e32, // 'v_cmpsx_f_f32_e32'
  MCK_v_95_cmpsx_95_f_95_f64, // 'v_cmpsx_f_f64'
  MCK_v_95_cmpsx_95_f_95_f64_95_e32, // 'v_cmpsx_f_f64_e32'
  MCK_v_95_cmpsx_95_ge_95_f32, // 'v_cmpsx_ge_f32'
  MCK_v_95_cmpsx_95_ge_95_f32_95_e32, // 'v_cmpsx_ge_f32_e32'
  MCK_v_95_cmpsx_95_ge_95_f64, // 'v_cmpsx_ge_f64'
  MCK_v_95_cmpsx_95_ge_95_f64_95_e32, // 'v_cmpsx_ge_f64_e32'
  MCK_v_95_cmpsx_95_gt_95_f32, // 'v_cmpsx_gt_f32'
  MCK_v_95_cmpsx_95_gt_95_f32_95_e32, // 'v_cmpsx_gt_f32_e32'
  MCK_v_95_cmpsx_95_gt_95_f64, // 'v_cmpsx_gt_f64'
  MCK_v_95_cmpsx_95_gt_95_f64_95_e32, // 'v_cmpsx_gt_f64_e32'
  MCK_v_95_cmpsx_95_le_95_f32, // 'v_cmpsx_le_f32'
  MCK_v_95_cmpsx_95_le_95_f32_95_e32, // 'v_cmpsx_le_f32_e32'
  MCK_v_95_cmpsx_95_le_95_f64, // 'v_cmpsx_le_f64'
  MCK_v_95_cmpsx_95_le_95_f64_95_e32, // 'v_cmpsx_le_f64_e32'
  MCK_v_95_cmpsx_95_lg_95_f32, // 'v_cmpsx_lg_f32'
  MCK_v_95_cmpsx_95_lg_95_f32_95_e32, // 'v_cmpsx_lg_f32_e32'
  MCK_v_95_cmpsx_95_lg_95_f64, // 'v_cmpsx_lg_f64'
  MCK_v_95_cmpsx_95_lg_95_f64_95_e32, // 'v_cmpsx_lg_f64_e32'
  MCK_v_95_cmpsx_95_lt_95_f32, // 'v_cmpsx_lt_f32'
  MCK_v_95_cmpsx_95_lt_95_f32_95_e32, // 'v_cmpsx_lt_f32_e32'
  MCK_v_95_cmpsx_95_lt_95_f64, // 'v_cmpsx_lt_f64'
  MCK_v_95_cmpsx_95_lt_95_f64_95_e32, // 'v_cmpsx_lt_f64_e32'
  MCK_v_95_cmpsx_95_neq_95_f32, // 'v_cmpsx_neq_f32'
  MCK_v_95_cmpsx_95_neq_95_f32_95_e32, // 'v_cmpsx_neq_f32_e32'
  MCK_v_95_cmpsx_95_neq_95_f64, // 'v_cmpsx_neq_f64'
  MCK_v_95_cmpsx_95_neq_95_f64_95_e32, // 'v_cmpsx_neq_f64_e32'
  MCK_v_95_cmpsx_95_nge_95_f32, // 'v_cmpsx_nge_f32'
  MCK_v_95_cmpsx_95_nge_95_f32_95_e32, // 'v_cmpsx_nge_f32_e32'
  MCK_v_95_cmpsx_95_nge_95_f64, // 'v_cmpsx_nge_f64'
  MCK_v_95_cmpsx_95_nge_95_f64_95_e32, // 'v_cmpsx_nge_f64_e32'
  MCK_v_95_cmpsx_95_ngt_95_f32, // 'v_cmpsx_ngt_f32'
  MCK_v_95_cmpsx_95_ngt_95_f32_95_e32, // 'v_cmpsx_ngt_f32_e32'
  MCK_v_95_cmpsx_95_ngt_95_f64, // 'v_cmpsx_ngt_f64'
  MCK_v_95_cmpsx_95_ngt_95_f64_95_e32, // 'v_cmpsx_ngt_f64_e32'
  MCK_v_95_cmpsx_95_nle_95_f32, // 'v_cmpsx_nle_f32'
  MCK_v_95_cmpsx_95_nle_95_f32_95_e32, // 'v_cmpsx_nle_f32_e32'
  MCK_v_95_cmpsx_95_nle_95_f64, // 'v_cmpsx_nle_f64'
  MCK_v_95_cmpsx_95_nle_95_f64_95_e32, // 'v_cmpsx_nle_f64_e32'
  MCK_v_95_cmpsx_95_nlg_95_f32, // 'v_cmpsx_nlg_f32'
  MCK_v_95_cmpsx_95_nlg_95_f32_95_e32, // 'v_cmpsx_nlg_f32_e32'
  MCK_v_95_cmpsx_95_nlg_95_f64, // 'v_cmpsx_nlg_f64'
  MCK_v_95_cmpsx_95_nlg_95_f64_95_e32, // 'v_cmpsx_nlg_f64_e32'
  MCK_v_95_cmpsx_95_nlt_95_f32, // 'v_cmpsx_nlt_f32'
  MCK_v_95_cmpsx_95_nlt_95_f32_95_e32, // 'v_cmpsx_nlt_f32_e32'
  MCK_v_95_cmpsx_95_nlt_95_f64, // 'v_cmpsx_nlt_f64'
  MCK_v_95_cmpsx_95_nlt_95_f64_95_e32, // 'v_cmpsx_nlt_f64_e32'
  MCK_v_95_cmpsx_95_o_95_f32, // 'v_cmpsx_o_f32'
  MCK_v_95_cmpsx_95_o_95_f32_95_e32, // 'v_cmpsx_o_f32_e32'
  MCK_v_95_cmpsx_95_o_95_f64, // 'v_cmpsx_o_f64'
  MCK_v_95_cmpsx_95_o_95_f64_95_e32, // 'v_cmpsx_o_f64_e32'
  MCK_v_95_cmpsx_95_tru_95_f32, // 'v_cmpsx_tru_f32'
  MCK_v_95_cmpsx_95_tru_95_f32_95_e32, // 'v_cmpsx_tru_f32_e32'
  MCK_v_95_cmpsx_95_tru_95_f64, // 'v_cmpsx_tru_f64'
  MCK_v_95_cmpsx_95_tru_95_f64_95_e32, // 'v_cmpsx_tru_f64_e32'
  MCK_v_95_cmpsx_95_u_95_f32, // 'v_cmpsx_u_f32'
  MCK_v_95_cmpsx_95_u_95_f32_95_e32, // 'v_cmpsx_u_f32_e32'
  MCK_v_95_cmpsx_95_u_95_f64, // 'v_cmpsx_u_f64'
  MCK_v_95_cmpsx_95_u_95_f64_95_e32, // 'v_cmpsx_u_f64_e32'
  MCK_v_95_cmpx_95_class_95_f32, // 'v_cmpx_class_f32'
  MCK_v_95_cmpx_95_class_95_f32_95_e32, // 'v_cmpx_class_f32_e32'
  MCK_v_95_cmpx_95_class_95_f64, // 'v_cmpx_class_f64'
  MCK_v_95_cmpx_95_class_95_f64_95_e32, // 'v_cmpx_class_f64_e32'
  MCK_v_95_cmpx_95_eq_95_f32, // 'v_cmpx_eq_f32'
  MCK_v_95_cmpx_95_eq_95_f32_95_e32, // 'v_cmpx_eq_f32_e32'
  MCK_v_95_cmpx_95_eq_95_f64, // 'v_cmpx_eq_f64'
  MCK_v_95_cmpx_95_eq_95_f64_95_e32, // 'v_cmpx_eq_f64_e32'
  MCK_v_95_cmpx_95_eq_95_i32, // 'v_cmpx_eq_i32'
  MCK_v_95_cmpx_95_eq_95_i32_95_e32, // 'v_cmpx_eq_i32_e32'
  MCK_v_95_cmpx_95_eq_95_i64, // 'v_cmpx_eq_i64'
  MCK_v_95_cmpx_95_eq_95_i64_95_e32, // 'v_cmpx_eq_i64_e32'
  MCK_v_95_cmpx_95_eq_95_u32, // 'v_cmpx_eq_u32'
  MCK_v_95_cmpx_95_eq_95_u32_95_e32, // 'v_cmpx_eq_u32_e32'
  MCK_v_95_cmpx_95_eq_95_u64, // 'v_cmpx_eq_u64'
  MCK_v_95_cmpx_95_eq_95_u64_95_e32, // 'v_cmpx_eq_u64_e32'
  MCK_v_95_cmpx_95_f_95_f32, // 'v_cmpx_f_f32'
  MCK_v_95_cmpx_95_f_95_f32_95_e32, // 'v_cmpx_f_f32_e32'
  MCK_v_95_cmpx_95_f_95_f64, // 'v_cmpx_f_f64'
  MCK_v_95_cmpx_95_f_95_f64_95_e32, // 'v_cmpx_f_f64_e32'
  MCK_v_95_cmpx_95_f_95_i32, // 'v_cmpx_f_i32'
  MCK_v_95_cmpx_95_f_95_i32_95_e32, // 'v_cmpx_f_i32_e32'
  MCK_v_95_cmpx_95_f_95_i64, // 'v_cmpx_f_i64'
  MCK_v_95_cmpx_95_f_95_i64_95_e32, // 'v_cmpx_f_i64_e32'
  MCK_v_95_cmpx_95_f_95_u32, // 'v_cmpx_f_u32'
  MCK_v_95_cmpx_95_f_95_u32_95_e32, // 'v_cmpx_f_u32_e32'
  MCK_v_95_cmpx_95_f_95_u64, // 'v_cmpx_f_u64'
  MCK_v_95_cmpx_95_f_95_u64_95_e32, // 'v_cmpx_f_u64_e32'
  MCK_v_95_cmpx_95_ge_95_f32, // 'v_cmpx_ge_f32'
  MCK_v_95_cmpx_95_ge_95_f32_95_e32, // 'v_cmpx_ge_f32_e32'
  MCK_v_95_cmpx_95_ge_95_f64, // 'v_cmpx_ge_f64'
  MCK_v_95_cmpx_95_ge_95_f64_95_e32, // 'v_cmpx_ge_f64_e32'
  MCK_v_95_cmpx_95_ge_95_i32, // 'v_cmpx_ge_i32'
  MCK_v_95_cmpx_95_ge_95_i32_95_e32, // 'v_cmpx_ge_i32_e32'
  MCK_v_95_cmpx_95_ge_95_i64, // 'v_cmpx_ge_i64'
  MCK_v_95_cmpx_95_ge_95_i64_95_e32, // 'v_cmpx_ge_i64_e32'
  MCK_v_95_cmpx_95_ge_95_u32, // 'v_cmpx_ge_u32'
  MCK_v_95_cmpx_95_ge_95_u32_95_e32, // 'v_cmpx_ge_u32_e32'
  MCK_v_95_cmpx_95_ge_95_u64, // 'v_cmpx_ge_u64'
  MCK_v_95_cmpx_95_ge_95_u64_95_e32, // 'v_cmpx_ge_u64_e32'
  MCK_v_95_cmpx_95_gt_95_f32, // 'v_cmpx_gt_f32'
  MCK_v_95_cmpx_95_gt_95_f32_95_e32, // 'v_cmpx_gt_f32_e32'
  MCK_v_95_cmpx_95_gt_95_f64, // 'v_cmpx_gt_f64'
  MCK_v_95_cmpx_95_gt_95_f64_95_e32, // 'v_cmpx_gt_f64_e32'
  MCK_v_95_cmpx_95_gt_95_i32, // 'v_cmpx_gt_i32'
  MCK_v_95_cmpx_95_gt_95_i32_95_e32, // 'v_cmpx_gt_i32_e32'
  MCK_v_95_cmpx_95_gt_95_i64, // 'v_cmpx_gt_i64'
  MCK_v_95_cmpx_95_gt_95_i64_95_e32, // 'v_cmpx_gt_i64_e32'
  MCK_v_95_cmpx_95_gt_95_u32, // 'v_cmpx_gt_u32'
  MCK_v_95_cmpx_95_gt_95_u32_95_e32, // 'v_cmpx_gt_u32_e32'
  MCK_v_95_cmpx_95_gt_95_u64, // 'v_cmpx_gt_u64'
  MCK_v_95_cmpx_95_gt_95_u64_95_e32, // 'v_cmpx_gt_u64_e32'
  MCK_v_95_cmpx_95_le_95_f32, // 'v_cmpx_le_f32'
  MCK_v_95_cmpx_95_le_95_f32_95_e32, // 'v_cmpx_le_f32_e32'
  MCK_v_95_cmpx_95_le_95_f64, // 'v_cmpx_le_f64'
  MCK_v_95_cmpx_95_le_95_f64_95_e32, // 'v_cmpx_le_f64_e32'
  MCK_v_95_cmpx_95_le_95_i32, // 'v_cmpx_le_i32'
  MCK_v_95_cmpx_95_le_95_i32_95_e32, // 'v_cmpx_le_i32_e32'
  MCK_v_95_cmpx_95_le_95_i64, // 'v_cmpx_le_i64'
  MCK_v_95_cmpx_95_le_95_i64_95_e32, // 'v_cmpx_le_i64_e32'
  MCK_v_95_cmpx_95_le_95_u32, // 'v_cmpx_le_u32'
  MCK_v_95_cmpx_95_le_95_u32_95_e32, // 'v_cmpx_le_u32_e32'
  MCK_v_95_cmpx_95_le_95_u64, // 'v_cmpx_le_u64'
  MCK_v_95_cmpx_95_le_95_u64_95_e32, // 'v_cmpx_le_u64_e32'
  MCK_v_95_cmpx_95_lg_95_f32, // 'v_cmpx_lg_f32'
  MCK_v_95_cmpx_95_lg_95_f32_95_e32, // 'v_cmpx_lg_f32_e32'
  MCK_v_95_cmpx_95_lg_95_f64, // 'v_cmpx_lg_f64'
  MCK_v_95_cmpx_95_lg_95_f64_95_e32, // 'v_cmpx_lg_f64_e32'
  MCK_v_95_cmpx_95_lt_95_f32, // 'v_cmpx_lt_f32'
  MCK_v_95_cmpx_95_lt_95_f32_95_e32, // 'v_cmpx_lt_f32_e32'
  MCK_v_95_cmpx_95_lt_95_f64, // 'v_cmpx_lt_f64'
  MCK_v_95_cmpx_95_lt_95_f64_95_e32, // 'v_cmpx_lt_f64_e32'
  MCK_v_95_cmpx_95_lt_95_i32, // 'v_cmpx_lt_i32'
  MCK_v_95_cmpx_95_lt_95_i32_95_e32, // 'v_cmpx_lt_i32_e32'
  MCK_v_95_cmpx_95_lt_95_i64, // 'v_cmpx_lt_i64'
  MCK_v_95_cmpx_95_lt_95_i64_95_e32, // 'v_cmpx_lt_i64_e32'
  MCK_v_95_cmpx_95_lt_95_u32, // 'v_cmpx_lt_u32'
  MCK_v_95_cmpx_95_lt_95_u32_95_e32, // 'v_cmpx_lt_u32_e32'
  MCK_v_95_cmpx_95_lt_95_u64, // 'v_cmpx_lt_u64'
  MCK_v_95_cmpx_95_lt_95_u64_95_e32, // 'v_cmpx_lt_u64_e32'
  MCK_v_95_cmpx_95_ne_95_i32, // 'v_cmpx_ne_i32'
  MCK_v_95_cmpx_95_ne_95_i32_95_e32, // 'v_cmpx_ne_i32_e32'
  MCK_v_95_cmpx_95_ne_95_i64, // 'v_cmpx_ne_i64'
  MCK_v_95_cmpx_95_ne_95_i64_95_e32, // 'v_cmpx_ne_i64_e32'
  MCK_v_95_cmpx_95_ne_95_u32, // 'v_cmpx_ne_u32'
  MCK_v_95_cmpx_95_ne_95_u32_95_e32, // 'v_cmpx_ne_u32_e32'
  MCK_v_95_cmpx_95_ne_95_u64, // 'v_cmpx_ne_u64'
  MCK_v_95_cmpx_95_ne_95_u64_95_e32, // 'v_cmpx_ne_u64_e32'
  MCK_v_95_cmpx_95_neq_95_f32, // 'v_cmpx_neq_f32'
  MCK_v_95_cmpx_95_neq_95_f32_95_e32, // 'v_cmpx_neq_f32_e32'
  MCK_v_95_cmpx_95_neq_95_f64, // 'v_cmpx_neq_f64'
  MCK_v_95_cmpx_95_neq_95_f64_95_e32, // 'v_cmpx_neq_f64_e32'
  MCK_v_95_cmpx_95_nge_95_f32, // 'v_cmpx_nge_f32'
  MCK_v_95_cmpx_95_nge_95_f32_95_e32, // 'v_cmpx_nge_f32_e32'
  MCK_v_95_cmpx_95_nge_95_f64, // 'v_cmpx_nge_f64'
  MCK_v_95_cmpx_95_nge_95_f64_95_e32, // 'v_cmpx_nge_f64_e32'
  MCK_v_95_cmpx_95_ngt_95_f32, // 'v_cmpx_ngt_f32'
  MCK_v_95_cmpx_95_ngt_95_f32_95_e32, // 'v_cmpx_ngt_f32_e32'
  MCK_v_95_cmpx_95_ngt_95_f64, // 'v_cmpx_ngt_f64'
  MCK_v_95_cmpx_95_ngt_95_f64_95_e32, // 'v_cmpx_ngt_f64_e32'
  MCK_v_95_cmpx_95_nle_95_f32, // 'v_cmpx_nle_f32'
  MCK_v_95_cmpx_95_nle_95_f32_95_e32, // 'v_cmpx_nle_f32_e32'
  MCK_v_95_cmpx_95_nle_95_f64, // 'v_cmpx_nle_f64'
  MCK_v_95_cmpx_95_nle_95_f64_95_e32, // 'v_cmpx_nle_f64_e32'
  MCK_v_95_cmpx_95_nlg_95_f32, // 'v_cmpx_nlg_f32'
  MCK_v_95_cmpx_95_nlg_95_f32_95_e32, // 'v_cmpx_nlg_f32_e32'
  MCK_v_95_cmpx_95_nlg_95_f64, // 'v_cmpx_nlg_f64'
  MCK_v_95_cmpx_95_nlg_95_f64_95_e32, // 'v_cmpx_nlg_f64_e32'
  MCK_v_95_cmpx_95_nlt_95_f32, // 'v_cmpx_nlt_f32'
  MCK_v_95_cmpx_95_nlt_95_f32_95_e32, // 'v_cmpx_nlt_f32_e32'
  MCK_v_95_cmpx_95_nlt_95_f64, // 'v_cmpx_nlt_f64'
  MCK_v_95_cmpx_95_nlt_95_f64_95_e32, // 'v_cmpx_nlt_f64_e32'
  MCK_v_95_cmpx_95_o_95_f32, // 'v_cmpx_o_f32'
  MCK_v_95_cmpx_95_o_95_f32_95_e32, // 'v_cmpx_o_f32_e32'
  MCK_v_95_cmpx_95_o_95_f64, // 'v_cmpx_o_f64'
  MCK_v_95_cmpx_95_o_95_f64_95_e32, // 'v_cmpx_o_f64_e32'
  MCK_v_95_cmpx_95_t_95_i32, // 'v_cmpx_t_i32'
  MCK_v_95_cmpx_95_t_95_i32_95_e32, // 'v_cmpx_t_i32_e32'
  MCK_v_95_cmpx_95_t_95_i64, // 'v_cmpx_t_i64'
  MCK_v_95_cmpx_95_t_95_i64_95_e32, // 'v_cmpx_t_i64_e32'
  MCK_v_95_cmpx_95_t_95_u32, // 'v_cmpx_t_u32'
  MCK_v_95_cmpx_95_t_95_u32_95_e32, // 'v_cmpx_t_u32_e32'
  MCK_v_95_cmpx_95_t_95_u64, // 'v_cmpx_t_u64'
  MCK_v_95_cmpx_95_t_95_u64_95_e32, // 'v_cmpx_t_u64_e32'
  MCK_v_95_cmpx_95_tru_95_f32, // 'v_cmpx_tru_f32'
  MCK_v_95_cmpx_95_tru_95_f32_95_e32, // 'v_cmpx_tru_f32_e32'
  MCK_v_95_cmpx_95_tru_95_f64, // 'v_cmpx_tru_f64'
  MCK_v_95_cmpx_95_tru_95_f64_95_e32, // 'v_cmpx_tru_f64_e32'
  MCK_v_95_cmpx_95_u_95_f32, // 'v_cmpx_u_f32'
  MCK_v_95_cmpx_95_u_95_f32_95_e32, // 'v_cmpx_u_f32_e32'
  MCK_v_95_cmpx_95_u_95_f64, // 'v_cmpx_u_f64'
  MCK_v_95_cmpx_95_u_95_f64_95_e32, // 'v_cmpx_u_f64_e32'
  MCK_v_95_cndmask_95_b32, // 'v_cndmask_b32'
  MCK_v_95_cos_95_f16, // 'v_cos_f16'
  MCK_v_95_cos_95_f32, // 'v_cos_f32'
  MCK_v_95_cubeid_95_f32, // 'v_cubeid_f32'
  MCK_v_95_cubema_95_f32, // 'v_cubema_f32'
  MCK_v_95_cubesc_95_f32, // 'v_cubesc_f32'
  MCK_v_95_cubetc_95_f32, // 'v_cubetc_f32'
  MCK_v_95_cvt_95_f16_95_f32, // 'v_cvt_f16_f32'
  MCK_v_95_cvt_95_f16_95_i16, // 'v_cvt_f16_i16'
  MCK_v_95_cvt_95_f16_95_u16, // 'v_cvt_f16_u16'
  MCK_v_95_cvt_95_f32_95_f16, // 'v_cvt_f32_f16'
  MCK_v_95_cvt_95_f32_95_f64, // 'v_cvt_f32_f64'
  MCK_v_95_cvt_95_f32_95_i32, // 'v_cvt_f32_i32'
  MCK_v_95_cvt_95_f32_95_u32, // 'v_cvt_f32_u32'
  MCK_v_95_cvt_95_f32_95_ubyte0, // 'v_cvt_f32_ubyte0'
  MCK_v_95_cvt_95_f32_95_ubyte1, // 'v_cvt_f32_ubyte1'
  MCK_v_95_cvt_95_f32_95_ubyte2, // 'v_cvt_f32_ubyte2'
  MCK_v_95_cvt_95_f32_95_ubyte3, // 'v_cvt_f32_ubyte3'
  MCK_v_95_cvt_95_f64_95_f32, // 'v_cvt_f64_f32'
  MCK_v_95_cvt_95_f64_95_i32, // 'v_cvt_f64_i32'
  MCK_v_95_cvt_95_f64_95_u32, // 'v_cvt_f64_u32'
  MCK_v_95_cvt_95_flr_95_i32_95_f32, // 'v_cvt_flr_i32_f32'
  MCK_v_95_cvt_95_i16_95_f16, // 'v_cvt_i16_f16'
  MCK_v_95_cvt_95_i32_95_f32, // 'v_cvt_i32_f32'
  MCK_v_95_cvt_95_i32_95_f64, // 'v_cvt_i32_f64'
  MCK_v_95_cvt_95_off_95_f32_95_i4, // 'v_cvt_off_f32_i4'
  MCK_v_95_cvt_95_pk_95_i16_95_i32, // 'v_cvt_pk_i16_i32'
  MCK_v_95_cvt_95_pk_95_u16_95_u32, // 'v_cvt_pk_u16_u32'
  MCK_v_95_cvt_95_pkaccum_95_u8_95_f32, // 'v_cvt_pkaccum_u8_f32'
  MCK_v_95_cvt_95_pknorm_95_i16_95_f32, // 'v_cvt_pknorm_i16_f32'
  MCK_v_95_cvt_95_pknorm_95_u16_95_f32, // 'v_cvt_pknorm_u16_f32'
  MCK_v_95_cvt_95_pkrtz_95_f16_95_f32, // 'v_cvt_pkrtz_f16_f32'
  MCK_v_95_cvt_95_rpi_95_i32_95_f32, // 'v_cvt_rpi_i32_f32'
  MCK_v_95_cvt_95_u16_95_f16, // 'v_cvt_u16_f16'
  MCK_v_95_cvt_95_u32_95_f32, // 'v_cvt_u32_f32'
  MCK_v_95_cvt_95_u32_95_f64, // 'v_cvt_u32_f64'
  MCK_v_95_div_95_fixup_95_f32, // 'v_div_fixup_f32'
  MCK_v_95_div_95_fixup_95_f64, // 'v_div_fixup_f64'
  MCK_v_95_div_95_fmas_95_f32, // 'v_div_fmas_f32'
  MCK_v_95_div_95_fmas_95_f64, // 'v_div_fmas_f64'
  MCK_v_95_div_95_scale_95_f32, // 'v_div_scale_f32'
  MCK_v_95_div_95_scale_95_f64, // 'v_div_scale_f64'
  MCK_v_95_exp_95_f16, // 'v_exp_f16'
  MCK_v_95_exp_95_f32, // 'v_exp_f32'
  MCK_v_95_exp_95_legacy_95_f32, // 'v_exp_legacy_f32'
  MCK_v_95_ffbh_95_i32, // 'v_ffbh_i32'
  MCK_v_95_ffbh_95_u32, // 'v_ffbh_u32'
  MCK_v_95_ffbl_95_b32, // 'v_ffbl_b32'
  MCK_v_95_floor_95_f16, // 'v_floor_f16'
  MCK_v_95_floor_95_f32, // 'v_floor_f32'
  MCK_v_95_floor_95_f64, // 'v_floor_f64'
  MCK_v_95_fma_95_f32, // 'v_fma_f32'
  MCK_v_95_fma_95_f64, // 'v_fma_f64'
  MCK_v_95_fract_95_f16, // 'v_fract_f16'
  MCK_v_95_fract_95_f32, // 'v_fract_f32'
  MCK_v_95_fract_95_f64, // 'v_fract_f64'
  MCK_v_95_frexp_95_exp_95_i16_95_f16, // 'v_frexp_exp_i16_f16'
  MCK_v_95_frexp_95_exp_95_i32_95_f32, // 'v_frexp_exp_i32_f32'
  MCK_v_95_frexp_95_exp_95_i32_95_f64, // 'v_frexp_exp_i32_f64'
  MCK_v_95_frexp_95_mant_95_f16, // 'v_frexp_mant_f16'
  MCK_v_95_frexp_95_mant_95_f32, // 'v_frexp_mant_f32'
  MCK_v_95_frexp_95_mant_95_f64, // 'v_frexp_mant_f64'
  MCK_v_95_interp_95_mov_95_f32, // 'v_interp_mov_f32'
  MCK_v_95_interp_95_p1_95_f32, // 'v_interp_p1_f32'
  MCK_v_95_interp_95_p2_95_f32, // 'v_interp_p2_f32'
  MCK_v_95_ldexp_95_f16, // 'v_ldexp_f16'
  MCK_v_95_ldexp_95_f32, // 'v_ldexp_f32'
  MCK_v_95_ldexp_95_f64, // 'v_ldexp_f64'
  MCK_v_95_log_95_clamp_95_f32, // 'v_log_clamp_f32'
  MCK_v_95_log_95_f16, // 'v_log_f16'
  MCK_v_95_log_95_f32, // 'v_log_f32'
  MCK_v_95_log_95_legacy_95_f32, // 'v_log_legacy_f32'
  MCK_v_95_lshl_95_b32, // 'v_lshl_b32'
  MCK_v_95_lshl_95_b64, // 'v_lshl_b64'
  MCK_v_95_lshlrev_95_b16, // 'v_lshlrev_b16'
  MCK_v_95_lshlrev_95_b32, // 'v_lshlrev_b32'
  MCK_v_95_lshlrev_95_b64, // 'v_lshlrev_b64'
  MCK_v_95_lshr_95_b32, // 'v_lshr_b32'
  MCK_v_95_lshr_95_b64, // 'v_lshr_b64'
  MCK_v_95_lshrrev_95_b16, // 'v_lshrrev_b16'
  MCK_v_95_lshrrev_95_b32, // 'v_lshrrev_b32'
  MCK_v_95_lshrrev_95_b64, // 'v_lshrrev_b64'
  MCK_v_95_mac_95_f16, // 'v_mac_f16'
  MCK_v_95_mac_95_f32, // 'v_mac_f32'
  MCK_v_95_mac_95_legacy_95_f32, // 'v_mac_legacy_f32'
  MCK_v_95_mad_95_f32, // 'v_mad_f32'
  MCK_v_95_mad_95_i32_95_i24, // 'v_mad_i32_i24'
  MCK_v_95_mad_95_i64_95_i32, // 'v_mad_i64_i32'
  MCK_v_95_mad_95_legacy_95_f32, // 'v_mad_legacy_f32'
  MCK_v_95_mad_95_u32_95_u24, // 'v_mad_u32_u24'
  MCK_v_95_mad_95_u64_95_u32, // 'v_mad_u64_u32'
  MCK_v_95_madak_95_f16, // 'v_madak_f16'
  MCK_v_95_madak_95_f32, // 'v_madak_f32'
  MCK_v_95_madmk_95_f16, // 'v_madmk_f16'
  MCK_v_95_madmk_95_f32, // 'v_madmk_f32'
  MCK_v_95_max3_95_f32, // 'v_max3_f32'
  MCK_v_95_max3_95_i32, // 'v_max3_i32'
  MCK_v_95_max3_95_u32, // 'v_max3_u32'
  MCK_v_95_max_95_f16, // 'v_max_f16'
  MCK_v_95_max_95_f32, // 'v_max_f32'
  MCK_v_95_max_95_f64, // 'v_max_f64'
  MCK_v_95_max_95_i16, // 'v_max_i16'
  MCK_v_95_max_95_i32, // 'v_max_i32'
  MCK_v_95_max_95_legacy_95_f32, // 'v_max_legacy_f32'
  MCK_v_95_max_95_u16, // 'v_max_u16'
  MCK_v_95_max_95_u32, // 'v_max_u32'
  MCK_v_95_mbcnt_95_hi_95_u32_95_b32, // 'v_mbcnt_hi_u32_b32'
  MCK_v_95_mbcnt_95_lo_95_u32_95_b32, // 'v_mbcnt_lo_u32_b32'
  MCK_v_95_med3_95_f32, // 'v_med3_f32'
  MCK_v_95_med3_95_i32, // 'v_med3_i32'
  MCK_v_95_med3_95_u32, // 'v_med3_u32'
  MCK_v_95_min3_95_f32, // 'v_min3_f32'
  MCK_v_95_min3_95_i32, // 'v_min3_i32'
  MCK_v_95_min3_95_u32, // 'v_min3_u32'
  MCK_v_95_min_95_f16, // 'v_min_f16'
  MCK_v_95_min_95_f32, // 'v_min_f32'
  MCK_v_95_min_95_f64, // 'v_min_f64'
  MCK_v_95_min_95_i16, // 'v_min_i16'
  MCK_v_95_min_95_i32, // 'v_min_i32'
  MCK_v_95_min_95_legacy_95_f32, // 'v_min_legacy_f32'
  MCK_v_95_min_95_u16, // 'v_min_u16'
  MCK_v_95_min_95_u32, // 'v_min_u32'
  MCK_v_95_mov_95_b32, // 'v_mov_b32'
  MCK_v_95_mov_95_fed_95_b32, // 'v_mov_fed_b32'
  MCK_v_95_movreld_95_b32, // 'v_movreld_b32'
  MCK_v_95_movrels_95_b32, // 'v_movrels_b32'
  MCK_v_95_movrelsd_95_b32, // 'v_movrelsd_b32'
  MCK_v_95_mqsad_95_u16_95_u8, // 'v_mqsad_u16_u8'
  MCK_v_95_mqsad_95_u32_95_u8, // 'v_mqsad_u32_u8'
  MCK_v_95_mul_95_f16, // 'v_mul_f16'
  MCK_v_95_mul_95_f32, // 'v_mul_f32'
  MCK_v_95_mul_95_f64, // 'v_mul_f64'
  MCK_v_95_mul_95_hi_95_i32, // 'v_mul_hi_i32'
  MCK_v_95_mul_95_hi_95_i32_95_i24, // 'v_mul_hi_i32_i24'
  MCK_v_95_mul_95_hi_95_u32, // 'v_mul_hi_u32'
  MCK_v_95_mul_95_hi_95_u32_95_u24, // 'v_mul_hi_u32_u24'
  MCK_v_95_mul_95_i32_95_i24, // 'v_mul_i32_i24'
  MCK_v_95_mul_95_legacy_95_f32, // 'v_mul_legacy_f32'
  MCK_v_95_mul_95_lo_95_i32, // 'v_mul_lo_i32'
  MCK_v_95_mul_95_lo_95_u16, // 'v_mul_lo_u16'
  MCK_v_95_mul_95_lo_95_u32, // 'v_mul_lo_u32'
  MCK_v_95_mul_95_u32_95_u24, // 'v_mul_u32_u24'
  MCK_v_95_mullit_95_f32, // 'v_mullit_f32'
  MCK_v_95_nop, // 'v_nop'
  MCK_v_95_not_95_b32, // 'v_not_b32'
  MCK_v_95_or_95_b32, // 'v_or_b32'
  MCK_v_95_qsad_95_pk_95_u16_95_u8, // 'v_qsad_pk_u16_u8'
  MCK_v_95_rcp_95_clamp_95_f32, // 'v_rcp_clamp_f32'
  MCK_v_95_rcp_95_clamp_95_f64, // 'v_rcp_clamp_f64'
  MCK_v_95_rcp_95_f16, // 'v_rcp_f16'
  MCK_v_95_rcp_95_f32, // 'v_rcp_f32'
  MCK_v_95_rcp_95_f64, // 'v_rcp_f64'
  MCK_v_95_rcp_95_iflag_95_f32, // 'v_rcp_iflag_f32'
  MCK_v_95_rcp_95_legacy_95_f32, // 'v_rcp_legacy_f32'
  MCK_v_95_readfirstlane_95_b32, // 'v_readfirstlane_b32'
  MCK_v_95_readlane_95_b32, // 'v_readlane_b32'
  MCK_v_95_rndne_95_f16, // 'v_rndne_f16'
  MCK_v_95_rndne_95_f32, // 'v_rndne_f32'
  MCK_v_95_rndne_95_f64, // 'v_rndne_f64'
  MCK_v_95_rsq_95_clamp_95_f32, // 'v_rsq_clamp_f32'
  MCK_v_95_rsq_95_clamp_95_f64, // 'v_rsq_clamp_f64'
  MCK_v_95_rsq_95_f16, // 'v_rsq_f16'
  MCK_v_95_rsq_95_f32, // 'v_rsq_f32'
  MCK_v_95_rsq_95_f64, // 'v_rsq_f64'
  MCK_v_95_rsq_95_legacy_95_f32, // 'v_rsq_legacy_f32'
  MCK_v_95_sad_95_u32, // 'v_sad_u32'
  MCK_v_95_sin_95_f16, // 'v_sin_f16'
  MCK_v_95_sin_95_f32, // 'v_sin_f32'
  MCK_v_95_sqrt_95_f16, // 'v_sqrt_f16'
  MCK_v_95_sqrt_95_f32, // 'v_sqrt_f32'
  MCK_v_95_sqrt_95_f64, // 'v_sqrt_f64'
  MCK_v_95_sub_95_f16, // 'v_sub_f16'
  MCK_v_95_sub_95_f32, // 'v_sub_f32'
  MCK_v_95_sub_95_i32, // 'v_sub_i32'
  MCK_v_95_sub_95_u16, // 'v_sub_u16'
  MCK_v_95_subb_95_u32, // 'v_subb_u32'
  MCK_v_95_subbrev_95_u32, // 'v_subbrev_u32'
  MCK_v_95_subrev_95_f16, // 'v_subrev_f16'
  MCK_v_95_subrev_95_f32, // 'v_subrev_f32'
  MCK_v_95_subrev_95_i32, // 'v_subrev_i32'
  MCK_v_95_subrev_95_u16, // 'v_subrev_u16'
  MCK_v_95_trig_95_preop_95_f64, // 'v_trig_preop_f64'
  MCK_v_95_trunc_95_f16, // 'v_trunc_f16'
  MCK_v_95_trunc_95_f32, // 'v_trunc_f32'
  MCK_v_95_trunc_95_f64, // 'v_trunc_f64'
  MCK_v_95_writelane_95_b32, // 'v_writelane_b32'
  MCK_v_95_xor_95_b32, // 'v_xor_b32'
  MCK_R600_TReg32_X, // register class 'R600_TReg32_X'
  MCK_R600_TReg32_Y, // register class 'R600_TReg32_Y'
  MCK_R600_TReg32_Z, // register class 'R600_TReg32_Z'
  MCK_R600_TReg32_W, // register class 'R600_TReg32_W'
  MCK_R600_TReg32, // register class 'R600_TReg32'
  MCK_R600_Addr, // register class 'R600_Addr'
  MCK_R600_Reg32, // register class 'R600_Reg32'
  MCK_R600_Addr_Y, // register class 'R600_Addr_Y'
  MCK_R600_Addr_Z, // register class 'R600_Addr_Z'
  MCK_R600_Addr_W, // register class 'R600_Addr_W'
  MCK_R600_Reg128, // register class 'R600_Reg128'
  MCK_R600_Reg64, // register class 'R600_Reg64'
  MCK_Reg12, // derived register class
  MCK_Reg14, // derived register class
  MCK_Reg15, // derived register class
  MCK_Reg16, // derived register class
  MCK_R600_Reg128Vertical, // register class 'R600_Reg128Vertical'
  MCK_Reg18, // derived register class
  MCK_Reg19, // derived register class
  MCK_Reg20, // derived register class
  MCK_Reg21, // derived register class
  MCK_R600_Reg64Vertical, // register class 'R600_Reg64Vertical'
  MCK_R600_KC0_X, // register class 'R600_KC0_X'
  MCK_R600_KC0_Y, // register class 'R600_KC0_Y'
  MCK_R600_KC0_Z, // register class 'R600_KC0_Z'
  MCK_R600_KC0_W, // register class 'R600_KC0_W'
  MCK_R600_KC0, // register class 'R600_KC0'
  MCK_R600_KC1_X, // register class 'R600_KC1_X'
  MCK_R600_KC1_Y, // register class 'R600_KC1_Y'
  MCK_R600_KC1_Z, // register class 'R600_KC1_Z'
  MCK_R600_KC1_W, // register class 'R600_KC1_W'
  MCK_R600_KC1, // register class 'R600_KC1'
  MCK_R600_ArrayBase, // register class 'R600_ArrayBase'
  MCK_Reg34, // derived register class
  MCK_R600_LDS_SRC_REG, // register class 'R600_LDS_SRC_REG'
  MCK_R600_Predicate_Bit, // register class 'R600_Predicate_Bit'
  MCK_R600_Predicate, // register class 'R600_Predicate'
  MCK_M0, // register class 'M0'
  MCK_SGPR_32, // register class 'SGPR_32'
  MCK_SReg_32, // register class 'SReg_32'
  MCK_VGPR_32, // register class 'VGPR_32,VReg_1'
  MCK_VS_32, // register class 'VS_32'
  MCK_VCC, // register class 'VCC'
  MCK_SReg_64, // register class 'SReg_64'
  MCK_VS_64, // register class 'VS_64'
  MCK_SReg_128, // register class 'SReg_128'
  MCK_SReg_256, // register class 'SReg_256'
  MCK_SReg_512, // register class 'SReg_512'
  MCK_SGPR_64, // register class 'SGPR_64'
  MCK_VReg_128, // register class 'VReg_128'
  MCK_VReg_256, // register class 'VReg_256'
  MCK_VReg_512, // register class 'VReg_512'
  MCK_VReg_64, // register class 'VReg_64'
  MCK_VReg_96, // register class 'VReg_96'
  MCK_Clamp, // user defined class 'ClampMatchClass'
  MCK_DSOffset1, // user defined class 'DSOffset01MatchClass'
  MCK_DSOffsetparseDSOffsetOptional, // user defined class 'DSOffsetGDSMatchClass'
  MCK_DSOffsetparseDSOptionalOps, // user defined class 'DSOffsetMatchClass'
  MCK_GDSparseDSOff01OptionalOps, // user defined class 'GDS01MatchClass'
  MCK_GDSparseDSOptionalOps, // user defined class 'GDSMatchClass'
  MCK_GLCparseFlatOptionalOps, // user defined class 'GLCFlatMatchClass'
  MCK_GLCparseMubufOptionalOps, // user defined class 'GLCMubufMatchClass'
  MCK_Imm, // user defined class 'ImmAsmOperand'
  MCK_RegWithInputMods, // user defined class 'InputModsMatchClass'
  MCK_MubufOffset, // user defined class 'MubufOffsetMatchClass'
  MCK_OMod, // user defined class 'OModMatchClass'
  MCK_SLCparseFlatAtomicOptionalOps, // user defined class 'SLCFlatAtomicMatchClass'
  MCK_SLCparseFlatOptionalOps, // user defined class 'SLCFlatMatchClass'
  MCK_SLCparseMubufOptionalOps, // user defined class 'SLCMubufMatchClass'
  MCK_SMRDOffsetisSMRDLiteralOffset, // user defined class 'SMRDLiteralOffsetMatchClass'
  MCK_SMRDOffsetisSMRDOffset, // user defined class 'SMRDOffsetMatchClass'
  MCK_SWaitCnt, // user defined class 'SWaitMatchClass'
  MCK_SoppBrTarget, // user defined class 'SoppBrTarget'
  MCK_TFEparseFlatAtomicOptionalOps, // user defined class 'TFEFlatAtomicMatchClass'
  MCK_TFEparseFlatOptionalOps, // user defined class 'TFEFlatMatchClass'
  MCK_TFEparseMubufOptionalOps, // user defined class 'TFEMubufMatchClass'
  MCK_SSrc32, // user defined class 'anonymous_603'
  MCK_SSrc64, // user defined class 'anonymous_604'
  MCK_SCSrc32, // user defined class 'anonymous_605'
  MCK_VSrc32, // user defined class 'anonymous_606'
  MCK_VSrc64, // user defined class 'anonymous_607'
  MCK_VCSrc32, // user defined class 'anonymous_608'
  MCK_VCSrc64, // user defined class 'anonymous_609'
  MCK_SCSrc64, // user defined class 'anonymous_610'
  NumMatchClassKinds
};

}

static MatchClassKind matchTokenString(StringRef Name) {
  switch (Name.size()) {
  default: break;
  case 1:	 // 4 strings to match.
    switch (Name[0]) {
    default: break;
    case ':':	 // 1 string to match.
      return MCK__COLON_;	 // ":"
    case '@':	 // 1 string to match.
      return MCK__64_;	 // "@"
    case '[':	 // 1 string to match.
      return MCK__91_;	 // "["
    case ']':	 // 1 string to match.
      return MCK__93_;	 // "]"
    }
    break;
  case 3:	 // 7 strings to match.
    switch (Name[0]) {
    default: break;
    case 'P':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'A':	 // 1 string to match.
        if (Name[2] != 'D')
          break;
        return MCK_PAD;	 // "PAD"
      case 'O':	 // 1 string to match.
        if (Name[2] != 'P')
          break;
        return MCK_POP;	 // "POP"
      }
      break;
    case 'T':	 // 1 string to match.
      if (memcmp(Name.data()+1, "EX", 2))
        break;
      return MCK_TEX;	 // "TEX"
    case 'V':	 // 1 string to match.
      if (memcmp(Name.data()+1, "TX", 2))
        break;
      return MCK_VTX;	 // "VTX"
    case 'e':	 // 1 string to match.
      if (memcmp(Name.data()+1, "xp", 2))
        break;
      return MCK_exp;	 // "exp"
    case 'g':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'd':	 // 1 string to match.
        if (Name[2] != 's')
          break;
        return MCK_gds;	 // "gds"
      case 'l':	 // 1 string to match.
        if (Name[2] != 'c')
          break;
        return MCK_glc;	 // "glc"
      }
      break;
    }
    break;
  case 4:	 // 5 strings to match.
    switch (Name[0]) {
    default: break;
    case 'E':	 // 1 string to match.
      if (memcmp(Name.data()+1, "LSE", 3))
        break;
      return MCK_ELSE;	 // "ELSE"
    case 'J':	 // 1 string to match.
      if (memcmp(Name.data()+1, "UMP", 3))
        break;
      return MCK_JUMP;	 // "JUMP"
    case 'P':	 // 2 strings to match.
      switch (Name[1]) {
      default: break;
      case 'O':	 // 1 string to match.
        if (memcmp(Name.data()+2, "P:", 2))
          break;
        return MCK_POP_COLON_;	 // "POP:"
      case 'U':	 // 1 string to match.
        if (memcmp(Name.data()+2, "SH", 2))
          break;
        return MCK_PUSH;	 // "PUSH"
      }
      break;
    case 'd':	 // 1 string to match.
      if (memcmp(Name.data()+1, "st1", 3))
        break;
      return MCK_dst1;	 // "dst1"
    }
    break;
  case 5:	 // 4 strings to match.
    switch (Name[0]) {
    default: break;
    case 'i':	 // 1 string to match.
      if (memcmp(Name.data()+1, "dxen", 4))
        break;
      return MCK_idxen;	 // "idxen"
    case 'o':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ffen", 4))
        break;
      return MCK_offen;	 // "offen"
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_nop", 4))
        break;
      return MCK_s_95_nop;	 // "s_nop"
    case 'v':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_nop", 4))
        break;
      return MCK_v_95_nop;	 // "v_nop"
    }
    break;
  case 6:	 // 3 strings to match.
    switch (Name[0]) {
    default: break;
    case 'C':	 // 1 string to match.
      if (memcmp(Name.data()+1, "F_END", 5))
        break;
      return MCK_CF_95_END;	 // "CF_END"
    case 'a':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ddr64", 5))
        break;
      return MCK_addr64;	 // "addr64"
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_trap", 5))
        break;
      return MCK_s_95_trap;	 // "s_trap"
    }
    break;
  case 7:	 // 2 strings to match.
    switch (Name[0]) {
    default: break;
    case 'C':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ALL_FS", 6))
        break;
      return MCK_CALL_95_FS;	 // "CALL_FS"
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_sleep", 6))
        break;
      return MCK_s_95_sleep;	 // "s_sleep"
    }
    break;
  case 8:	 // 7 strings to match.
    switch (Name[0]) {
    default: break;
    case 'C':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ONTINUE", 7))
        break;
      return MCK_CONTINUE;	 // "CONTINUE"
    case 'E':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ND_LOOP", 7))
        break;
      return MCK_END_95_LOOP;	 // "END_LOOP"
    case 's':	 // 4 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'b':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ranch", 5))
          break;
        return MCK_s_95_branch;	 // "s_branch"
      case 'e':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ndpgm", 5))
          break;
        return MCK_s_95_endpgm;	 // "s_endpgm"
      case 'o':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "r_b", 3))
          break;
        switch (Name[6]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[7] != '2')
            break;
          return MCK_s_95_or_95_b32;	 // "s_or_b32"
        case '6':	 // 1 string to match.
          if (Name[7] != '4')
            break;
          return MCK_s_95_or_95_b64;	 // "s_or_b64"
        }
        break;
      }
      break;
    case 'v':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_or_b32", 7))
        break;
      return MCK_v_95_or_95_b32;	 // "v_or_b32"
    }
    break;
  case 9:	 // 93 strings to match.
    switch (Name[0]) {
    default: break;
    case 'P':	 // 1 string to match.
      if (memcmp(Name.data()+1, "USH_ELSE", 8))
        break;
      return MCK_PUSH_95_ELSE;	 // "PUSH_ELSE"
    case 'd':	 // 3 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+4, "ppend", 5))
          break;
        return MCK_ds_95_append;	 // "ds_append"
      case 'o':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "r_b", 3))
          break;
        switch (Name[7]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[8] != '2')
            break;
          return MCK_ds_95_or_95_b32;	 // "ds_or_b32"
        case '6':	 // 1 string to match.
          if (Name[8] != '4')
            break;
          return MCK_ds_95_or_95_b64;	 // "ds_or_b64"
        }
        break;
      }
      break;
    case 's':	 // 34 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 5 strings to match.
        switch (Name[3]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+4, "s_i32", 5))
            break;
          return MCK_s_95_abs_95_i32;	 // "s_abs_i32"
        case 'd':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "d_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_add_95_i32;	 // "s_add_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_add_95_u32;	 // "s_add_u32"
          }
          break;
        case 'n':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "d_b", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_s_95_and_95_b32;	 // "s_and_b32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_s_95_and_95_b64;	 // "s_and_b64"
          }
          break;
        }
        break;
      case 'b':	 // 7 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+4, "rrier", 5))
            break;
          return MCK_s_95_barrier;	 // "s_barrier"
        case 'f':	 // 6 strings to match.
          switch (Name[4]) {
          default: break;
          case 'e':	 // 4 strings to match.
            if (Name[5] != '_')
              break;
            switch (Name[6]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Name[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[8] != '2')
                  break;
                return MCK_s_95_bfe_95_i32;	 // "s_bfe_i32"
              case '6':	 // 1 string to match.
                if (Name[8] != '4')
                  break;
                return MCK_s_95_bfe_95_i64;	 // "s_bfe_i64"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[7]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[8] != '2')
                  break;
                return MCK_s_95_bfe_95_u32;	 // "s_bfe_u32"
              case '6':	 // 1 string to match.
                if (Name[8] != '4')
                  break;
                return MCK_s_95_bfe_95_u64;	 // "s_bfe_u64"
              }
              break;
            }
            break;
          case 'm':	 // 2 strings to match.
            if (memcmp(Name.data()+5, "_b", 2))
              break;
            switch (Name[7]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_s_95_bfm_95_b32;	 // "s_bfm_b32"
            case '6':	 // 1 string to match.
              if (Name[8] != '4')
                break;
              return MCK_s_95_bfm_95_b64;	 // "s_bfm_b64"
            }
            break;
          }
          break;
        }
        break;
      case 'm':	 // 7 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "x_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_max_95_i32;	 // "s_max_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_max_95_u32;	 // "s_max_u32"
          }
          break;
        case 'i':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "n_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_min_95_i32;	 // "s_min_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_min_95_u32;	 // "s_min_u32"
          }
          break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "v_b", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_s_95_mov_95_b32;	 // "s_mov_b32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_s_95_mov_95_b64;	 // "s_mov_b64"
          }
          break;
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+4, "l_i32", 5))
            break;
          return MCK_s_95_mul_95_i32;	 // "s_mul_i32"
        }
        break;
      case 'n':	 // 4 strings to match.
        if (Name[3] != 'o')
          break;
        switch (Name[4]) {
        default: break;
        case 'r':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "_b", 2))
            break;
          switch (Name[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_s_95_nor_95_b32;	 // "s_nor_b32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_s_95_nor_95_b64;	 // "s_nor_b64"
          }
          break;
        case 't':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "_b", 2))
            break;
          switch (Name[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_s_95_not_95_b32;	 // "s_not_b32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_s_95_not_95_b64;	 // "s_not_b64"
          }
          break;
        }
        break;
      case 'r':	 // 1 string to match.
        if (memcmp(Name.data()+3, "fe_b64", 6))
          break;
        return MCK_s_95_rfe_95_b64;	 // "s_rfe_b64"
      case 's':	 // 5 strings to match.
        switch (Name[3]) {
        default: break;
        case 'e':	 // 3 strings to match.
          switch (Name[4]) {
          default: break;
          case 'n':	 // 1 string to match.
            if (memcmp(Name.data()+5, "dmsg", 4))
              break;
            return MCK_s_95_sendmsg;	 // "s_sendmsg"
          case 't':	 // 2 strings to match.
            switch (Name[5]) {
            default: break;
            case 'h':	 // 1 string to match.
              if (memcmp(Name.data()+6, "alt", 3))
                break;
              return MCK_s_95_sethalt;	 // "s_sethalt"
            case 'p':	 // 1 string to match.
              if (memcmp(Name.data()+6, "rio", 3))
                break;
              return MCK_s_95_setprio;	 // "s_setprio"
            }
            break;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "b_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_sub_95_i32;	 // "s_sub_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_s_95_sub_95_u32;	 // "s_sub_u32"
          }
          break;
        }
        break;
      case 'w':	 // 3 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+4, "itcnt", 5))
            break;
          return MCK_s_95_waitcnt;	 // "s_waitcnt"
        case 'q':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "m_b", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_s_95_wqm_95_b32;	 // "s_wqm_b32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_s_95_wqm_95_b64;	 // "s_wqm_b64"
          }
          break;
        }
        break;
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "or_b", 4))
          break;
        switch (Name[7]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[8] != '2')
            break;
          return MCK_s_95_xor_95_b32;	 // "s_xor_b32"
        case '6':	 // 1 string to match.
          if (Name[8] != '4')
            break;
          return MCK_s_95_xor_95_b64;	 // "s_xor_b64"
        }
        break;
      }
      break;
    case 'v':	 // 55 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 6 strings to match.
        switch (Name[3]) {
        default: break;
        case 'd':	 // 5 strings to match.
          if (memcmp(Name.data()+4, "d_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'f':	 // 3 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_add_95_f16;	 // "v_add_f16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_add_95_f32;	 // "v_add_f32"
            case '6':	 // 1 string to match.
              if (Name[8] != '4')
                break;
              return MCK_v_95_add_95_f64;	 // "v_add_f64"
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_v_95_add_95_i32;	 // "v_add_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "16", 2))
              break;
            return MCK_v_95_add_95_u16;	 // "v_add_u16"
          }
          break;
        case 'n':	 // 1 string to match.
          if (memcmp(Name.data()+4, "d_b32", 5))
            break;
          return MCK_v_95_and_95_b32;	 // "v_and_b32"
        }
        break;
      case 'b':	 // 4 strings to match.
        if (Name[3] != 'f')
          break;
        switch (Name[4]) {
        default: break;
        case 'e':	 // 2 strings to match.
          if (Name[5] != '_')
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_v_95_bfe_95_i32;	 // "v_bfe_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_v_95_bfe_95_u32;	 // "v_bfe_u32"
          }
          break;
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+5, "_b32", 4))
            break;
          return MCK_v_95_bfi_95_b32;	 // "v_bfi_b32"
        case 'm':	 // 1 string to match.
          if (memcmp(Name.data()+5, "_b32", 4))
            break;
          return MCK_v_95_bfm_95_b32;	 // "v_bfm_b32"
        }
        break;
      case 'c':	 // 3 strings to match.
        switch (Name[3]) {
        default: break;
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+4, "rexcp", 5))
            break;
          return MCK_v_95_clrexcp;	 // "v_clrexcp"
        case 'o':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "s_f", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[8] != '6')
              break;
            return MCK_v_95_cos_95_f16;	 // "v_cos_f16"
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_v_95_cos_95_f32;	 // "v_cos_f32"
          }
          break;
        }
        break;
      case 'e':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "xp_f", 4))
          break;
        switch (Name[7]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[8] != '6')
            break;
          return MCK_v_95_exp_95_f16;	 // "v_exp_f16"
        case '3':	 // 1 string to match.
          if (Name[8] != '2')
            break;
          return MCK_v_95_exp_95_f32;	 // "v_exp_f32"
        }
        break;
      case 'f':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "ma_f", 4))
          break;
        switch (Name[7]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[8] != '2')
            break;
          return MCK_v_95_fma_95_f32;	 // "v_fma_f32"
        case '6':	 // 1 string to match.
          if (Name[8] != '4')
            break;
          return MCK_v_95_fma_95_f64;	 // "v_fma_f64"
        }
        break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "og_f", 4))
          break;
        switch (Name[7]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[8] != '6')
            break;
          return MCK_v_95_log_95_f16;	 // "v_log_f16"
        case '3':	 // 1 string to match.
          if (Name[8] != '2')
            break;
          return MCK_v_95_log_95_f32;	 // "v_log_f32"
        }
        break;
      case 'm':	 // 21 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 10 strings to match.
          switch (Name[4]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (memcmp(Name.data()+5, "_f", 2))
              break;
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_mac_95_f16;	 // "v_mac_f16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_mac_95_f32;	 // "v_mac_f32"
            }
            break;
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+5, "_f32", 4))
              break;
            return MCK_v_95_mad_95_f32;	 // "v_mad_f32"
          case 'x':	 // 7 strings to match.
            if (Name[5] != '_')
              break;
            switch (Name[6]) {
            default: break;
            case 'f':	 // 3 strings to match.
              switch (Name[7]) {
              default: break;
              case '1':	 // 1 string to match.
                if (Name[8] != '6')
                  break;
                return MCK_v_95_max_95_f16;	 // "v_max_f16"
              case '3':	 // 1 string to match.
                if (Name[8] != '2')
                  break;
                return MCK_v_95_max_95_f32;	 // "v_max_f32"
              case '6':	 // 1 string to match.
                if (Name[8] != '4')
                  break;
                return MCK_v_95_max_95_f64;	 // "v_max_f64"
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Name[7]) {
              default: break;
              case '1':	 // 1 string to match.
                if (Name[8] != '6')
                  break;
                return MCK_v_95_max_95_i16;	 // "v_max_i16"
              case '3':	 // 1 string to match.
                if (Name[8] != '2')
                  break;
                return MCK_v_95_max_95_i32;	 // "v_max_i32"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[7]) {
              default: break;
              case '1':	 // 1 string to match.
                if (Name[8] != '6')
                  break;
                return MCK_v_95_max_95_u16;	 // "v_max_u16"
              case '3':	 // 1 string to match.
                if (Name[8] != '2')
                  break;
                return MCK_v_95_max_95_u32;	 // "v_max_u32"
              }
              break;
            }
            break;
          }
          break;
        case 'i':	 // 7 strings to match.
          if (memcmp(Name.data()+4, "n_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'f':	 // 3 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_min_95_f16;	 // "v_min_f16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_min_95_f32;	 // "v_min_f32"
            case '6':	 // 1 string to match.
              if (Name[8] != '4')
                break;
              return MCK_v_95_min_95_f64;	 // "v_min_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_min_95_i16;	 // "v_min_i16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_min_95_i32;	 // "v_min_i32"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_min_95_u16;	 // "v_min_u16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_min_95_u32;	 // "v_min_u32"
            }
            break;
          }
          break;
        case 'o':	 // 1 string to match.
          if (memcmp(Name.data()+4, "v_b32", 5))
            break;
          return MCK_v_95_mov_95_b32;	 // "v_mov_b32"
        case 'u':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "l_f", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[8] != '6')
              break;
            return MCK_v_95_mul_95_f16;	 // "v_mul_f16"
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_v_95_mul_95_f32;	 // "v_mul_f32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_v_95_mul_95_f64;	 // "v_mul_f64"
          }
          break;
        }
        break;
      case 'n':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ot_b32", 6))
          break;
        return MCK_v_95_not_95_b32;	 // "v_not_b32"
      case 'r':	 // 6 strings to match.
        switch (Name[3]) {
        default: break;
        case 'c':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "p_f", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[8] != '6')
              break;
            return MCK_v_95_rcp_95_f16;	 // "v_rcp_f16"
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_v_95_rcp_95_f32;	 // "v_rcp_f32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_v_95_rcp_95_f64;	 // "v_rcp_f64"
          }
          break;
        case 's':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "q_f", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[8] != '6')
              break;
            return MCK_v_95_rsq_95_f16;	 // "v_rsq_f16"
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_v_95_rsq_95_f32;	 // "v_rsq_f32"
          case '6':	 // 1 string to match.
            if (Name[8] != '4')
              break;
            return MCK_v_95_rsq_95_f64;	 // "v_rsq_f64"
          }
          break;
        }
        break;
      case 's':	 // 7 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+4, "d_u32", 5))
            break;
          return MCK_v_95_sad_95_u32;	 // "v_sad_u32"
        case 'i':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "n_f", 3))
            break;
          switch (Name[7]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[8] != '6')
              break;
            return MCK_v_95_sin_95_f16;	 // "v_sin_f16"
          case '3':	 // 1 string to match.
            if (Name[8] != '2')
              break;
            return MCK_v_95_sin_95_f32;	 // "v_sin_f32"
          }
          break;
        case 'u':	 // 4 strings to match.
          if (memcmp(Name.data()+4, "b_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (Name[8] != '6')
                break;
              return MCK_v_95_sub_95_f16;	 // "v_sub_f16"
            case '3':	 // 1 string to match.
              if (Name[8] != '2')
                break;
              return MCK_v_95_sub_95_f32;	 // "v_sub_f32"
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32", 2))
              break;
            return MCK_v_95_sub_95_i32;	 // "v_sub_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "16", 2))
              break;
            return MCK_v_95_sub_95_u16;	 // "v_sub_u16"
          }
          break;
        }
        break;
      case 'x':	 // 1 string to match.
        if (memcmp(Name.data()+3, "or_b32", 6))
          break;
        return MCK_v_95_xor_95_b32;	 // "v_xor_b32"
      }
      break;
    }
    break;
  case 10:	 // 77 strings to match.
    switch (Name[0]) {
    default: break;
    case 'L':	 // 1 string to match.
      if (memcmp(Name.data()+1, "OOP_BREAK", 9))
        break;
      return MCK_LOOP_95_BREAK;	 // "LOOP_BREAK"
    case 'M':	 // 1 string to match.
      if (memcmp(Name.data()+1, "ASK_WRITE", 9))
        break;
      return MCK_MASK_95_WRITE;	 // "MASK_WRITE"
    case 'd':	 // 27 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'a':	 // 4 strings to match.
        switch (Name[4]) {
        default: break;
        case 'd':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "d_u", 3))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_ds_95_add_95_u32;	 // "ds_add_u32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_ds_95_add_95_u64;	 // "ds_add_u64"
          }
          break;
        case 'n':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "d_b", 3))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_ds_95_and_95_b32;	 // "ds_and_b32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_ds_95_and_95_b64;	 // "ds_and_b64"
          }
          break;
        }
        break;
      case 'c':	 // 1 string to match.
        if (memcmp(Name.data()+4, "onsume", 6))
          break;
        return MCK_ds_95_consume;	 // "ds_consume"
      case 'd':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ec_u", 4))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_ds_95_dec_95_u32;	 // "ds_dec_u32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_ds_95_dec_95_u64;	 // "ds_dec_u64"
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "nc_u", 4))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_ds_95_inc_95_u32;	 // "ds_inc_u32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_ds_95_inc_95_u64;	 // "ds_inc_u64"
        }
        break;
      case 'm':	 // 12 strings to match.
        switch (Name[4]) {
        default: break;
        case 'a':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "x_", 2))
            break;
          switch (Name[7]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_max_95_f32;	 // "ds_max_f32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_max_95_f64;	 // "ds_max_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_max_95_i32;	 // "ds_max_i32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_max_95_i64;	 // "ds_max_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_max_95_u32;	 // "ds_max_u32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_max_95_u64;	 // "ds_max_u64"
            }
            break;
          }
          break;
        case 'i':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "n_", 2))
            break;
          switch (Name[7]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_min_95_f32;	 // "ds_min_f32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_min_95_f64;	 // "ds_min_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_min_95_i32;	 // "ds_min_i32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_min_95_i64;	 // "ds_min_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[8]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[9] != '2')
                break;
              return MCK_ds_95_min_95_u32;	 // "ds_min_u32"
            case '6':	 // 1 string to match.
              if (Name[9] != '4')
                break;
              return MCK_ds_95_min_95_u64;	 // "ds_min_u64"
            }
            break;
          }
          break;
        }
        break;
      case 'r':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ead_", 4))
          break;
        switch (Name[8]) {
        default: break;
        case 'i':	 // 1 string to match.
          if (Name[9] != '8')
            break;
          return MCK_ds_95_read_95_i8;	 // "ds_read_i8"
        case 'u':	 // 1 string to match.
          if (Name[9] != '8')
            break;
          return MCK_ds_95_read_95_u8;	 // "ds_read_u8"
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ub_u", 4))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_ds_95_sub_95_u32;	 // "ds_sub_u32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_ds_95_sub_95_u64;	 // "ds_sub_u64"
        }
        break;
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "or_b", 4))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_ds_95_xor_95_b32;	 // "ds_xor_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_ds_95_xor_95_b64;	 // "ds_xor_b64"
        }
        break;
      }
      break;
    case 'i':	 // 1 string to match.
      if (memcmp(Name.data()+1, "mage_load", 9))
        break;
      return MCK_image_95_load;	 // "image_load"
    case 's':	 // 21 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 4 strings to match.
        switch (Name[3]) {
        default: break;
        case 'd':	 // 2 strings to match.
          if (Name[4] != 'd')
            break;
          switch (Name[5]) {
          default: break;
          case 'c':	 // 1 string to match.
            if (memcmp(Name.data()+6, "_u32", 4))
              break;
            return MCK_s_95_addc_95_u32;	 // "s_addc_u32"
          case 'k':	 // 1 string to match.
            if (memcmp(Name.data()+6, "_i32", 4))
              break;
            return MCK_s_95_addk_95_i32;	 // "s_addk_i32"
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "hr_i", 4))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_s_95_ashr_95_i32;	 // "s_ashr_i32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_s_95_ashr_95_i64;	 // "s_ashr_i64"
          }
          break;
        }
        break;
      case 'b':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "rev_b", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_s_95_brev_95_b32;	 // "s_brev_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_s_95_brev_95_b64;	 // "s_brev_b64"
        }
        break;
      case 'c':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "mov_b", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_s_95_cmov_95_b32;	 // "s_cmov_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_s_95_cmov_95_b64;	 // "s_cmov_b64"
        }
        break;
      case 'l':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "sh", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "_b", 2))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_s_95_lshl_95_b32;	 // "s_lshl_b32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_s_95_lshl_95_b64;	 // "s_lshl_b64"
          }
          break;
        case 'r':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "_b", 2))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_s_95_lshr_95_b32;	 // "s_lshr_b32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_s_95_lshr_95_b64;	 // "s_lshr_b64"
          }
          break;
        }
        break;
      case 'm':	 // 2 strings to match.
        switch (Name[3]) {
        default: break;
        case 'o':	 // 1 string to match.
          if (memcmp(Name.data()+4, "vk_i32", 6))
            break;
          return MCK_s_95_movk_95_i32;	 // "s_movk_i32"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+4, "lk_i32", 6))
            break;
          return MCK_s_95_mulk_95_i32;	 // "s_mulk_i32"
        }
        break;
      case 'n':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "and_b", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_s_95_nand_95_b32;	 // "s_nand_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_s_95_nand_95_b64;	 // "s_nand_b64"
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "rn2_b", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_s_95_orn2_95_b32;	 // "s_orn2_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_s_95_orn2_95_b64;	 // "s_orn2_b64"
        }
        break;
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ubb_u32", 7))
          break;
        return MCK_s_95_subb_95_u32;	 // "s_subb_u32"
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "nor_b", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_s_95_xnor_95_b32;	 // "s_xnor_b32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_s_95_xnor_95_b64;	 // "s_xnor_b64"
        }
        break;
      }
      break;
    case 'v':	 // 26 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 3 strings to match.
        switch (Name[3]) {
        default: break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+4, "dc_u32", 6))
            break;
          return MCK_v_95_addc_95_u32;	 // "v_addc_u32"
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "hr_i", 4))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_v_95_ashr_95_i32;	 // "v_ashr_i32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_v_95_ashr_95_i64;	 // "v_ashr_i64"
          }
          break;
        }
        break;
      case 'c':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "eil_f", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[9] != '6')
            break;
          return MCK_v_95_ceil_95_f16;	 // "v_ceil_f16"
        case '3':	 // 1 string to match.
          if (Name[9] != '2')
            break;
          return MCK_v_95_ceil_95_f32;	 // "v_ceil_f32"
        case '6':	 // 1 string to match.
          if (Name[9] != '4')
            break;
          return MCK_v_95_ceil_95_f64;	 // "v_ceil_f64"
        }
        break;
      case 'f':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "fb", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 'h':	 // 2 strings to match.
          if (Name[6] != '_')
            break;
          switch (Name[7]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_ffbh_95_i32;	 // "v_ffbh_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_ffbh_95_u32;	 // "v_ffbh_u32"
          }
          break;
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+6, "_b32", 4))
            break;
          return MCK_v_95_ffbl_95_b32;	 // "v_ffbl_b32"
        }
        break;
      case 'l':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "sh", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 'l':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "_b", 2))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_v_95_lshl_95_b32;	 // "v_lshl_b32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_v_95_lshl_95_b64;	 // "v_lshl_b64"
          }
          break;
        case 'r':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "_b", 2))
            break;
          switch (Name[8]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_v_95_lshr_95_b32;	 // "v_lshr_b32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_v_95_lshr_95_b64;	 // "v_lshr_b64"
          }
          break;
        }
        break;
      case 'm':	 // 9 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "x3_", 3))
            break;
          switch (Name[7]) {
          default: break;
          case 'f':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_max3_95_f32;	 // "v_max3_f32"
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_max3_95_i32;	 // "v_max3_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_max3_95_u32;	 // "v_max3_u32"
          }
          break;
        case 'e':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "d3_", 3))
            break;
          switch (Name[7]) {
          default: break;
          case 'f':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_med3_95_f32;	 // "v_med3_f32"
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_med3_95_i32;	 // "v_med3_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_med3_95_u32;	 // "v_med3_u32"
          }
          break;
        case 'i':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "n3_", 3))
            break;
          switch (Name[7]) {
          default: break;
          case 'f':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_min3_95_f32;	 // "v_min3_f32"
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_min3_95_i32;	 // "v_min3_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+8, "32", 2))
              break;
            return MCK_v_95_min3_95_u32;	 // "v_min3_u32"
          }
          break;
        }
        break;
      case 's':	 // 4 strings to match.
        switch (Name[3]) {
        default: break;
        case 'q':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "rt_f", 4))
            break;
          switch (Name[8]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[9] != '6')
              break;
            return MCK_v_95_sqrt_95_f16;	 // "v_sqrt_f16"
          case '3':	 // 1 string to match.
            if (Name[9] != '2')
              break;
            return MCK_v_95_sqrt_95_f32;	 // "v_sqrt_f32"
          case '6':	 // 1 string to match.
            if (Name[9] != '4')
              break;
            return MCK_v_95_sqrt_95_f64;	 // "v_sqrt_f64"
          }
          break;
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+4, "bb_u32", 6))
            break;
          return MCK_v_95_subb_95_u32;	 // "v_subb_u32"
        }
        break;
      }
      break;
    }
    break;
  case 11:	 // 50 strings to match.
    switch (Name[0]) {
    default: break;
    case 'I':	 // 1 string to match.
      if (memcmp(Name.data()+1, "NTERP_LOAD", 10))
        break;
      return MCK_INTERP_95_LOAD;	 // "INTERP_LOAD"
    case 'd':	 // 8 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'g':	 // 1 string to match.
        if (memcmp(Name.data()+4, "ws_init", 7))
          break;
        return MCK_ds_95_gws_95_init;	 // "ds_gws_init"
      case 'r':	 // 6 strings to match.
        switch (Name[4]) {
        default: break;
        case 'e':	 // 4 strings to match.
          if (memcmp(Name.data()+5, "ad_", 3))
            break;
          switch (Name[8]) {
          default: break;
          case 'b':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_ds_95_read_95_b32;	 // "ds_read_b32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_ds_95_read_95_b64;	 // "ds_read_b64"
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+9, "16", 2))
              break;
            return MCK_ds_95_read_95_i16;	 // "ds_read_i16"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+9, "16", 2))
              break;
            return MCK_ds_95_read_95_u16;	 // "ds_read_u16"
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "ub_u", 4))
            break;
          switch (Name[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_ds_95_rsub_95_u32;	 // "ds_rsub_u32"
          case '6':	 // 1 string to match.
            if (Name[10] != '4')
              break;
            return MCK_ds_95_rsub_95_u64;	 // "ds_rsub_u64"
          }
          break;
        }
        break;
      case 'w':	 // 1 string to match.
        if (memcmp(Name.data()+4, "rite_b8", 7))
          break;
        return MCK_ds_95_write_95_b8;	 // "ds_write_b8"
      }
      break;
    case 's':	 // 7 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "ndn2_b", 6))
          break;
        switch (Name[9]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[10] != '2')
            break;
          return MCK_s_95_andn2_95_b32;	 // "s_andn2_b32"
        case '6':	 // 1 string to match.
          if (Name[10] != '4')
            break;
          return MCK_s_95_andn2_95_b64;	 // "s_andn2_b64"
        }
        break;
      case 'c':	 // 1 string to match.
        if (memcmp(Name.data()+3, "movk_i32", 8))
          break;
        return MCK_s_95_cmovk_95_i32;	 // "s_cmovk_i32"
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cache_wb", 8))
          break;
        return MCK_s_95_dcache_95_wb;	 // "s_dcache_wb"
      case 'f':	 // 1 string to match.
        if (memcmp(Name.data()+3, "lbit_i32", 8))
          break;
        return MCK_s_95_flbit_95_i32;	 // "s_flbit_i32"
      case 'g':	 // 1 string to match.
        if (memcmp(Name.data()+3, "etpc_b64", 8))
          break;
        return MCK_s_95_getpc_95_b64;	 // "s_getpc_b64"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+3, "etpc_b64", 8))
          break;
        return MCK_s_95_setpc_95_b64;	 // "s_setpc_b64"
      }
      break;
    case 'v':	 // 34 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'b':	 // 1 string to match.
        if (memcmp(Name.data()+3, "frev_b32", 8))
          break;
        return MCK_v_95_bfrev_95_b32;	 // "v_bfrev_b32"
      case 'c':	 // 14 strings to match.
        if (memcmp(Name.data()+3, "mp_", 3))
          break;
        switch (Name[6]) {
        default: break;
        case 'f':	 // 6 strings to match.
          if (Name[7] != '_')
            break;
          switch (Name[8]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_v_95_cmp_95_f_95_f32;	 // "v_cmp_f_f32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_v_95_cmp_95_f_95_f64;	 // "v_cmp_f_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_v_95_cmp_95_f_95_i32;	 // "v_cmp_f_i32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_v_95_cmp_95_f_95_i64;	 // "v_cmp_f_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_v_95_cmp_95_f_95_u32;	 // "v_cmp_f_u32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_v_95_cmp_95_f_95_u64;	 // "v_cmp_f_u64"
            }
            break;
          }
          break;
        case 'o':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "_f", 2))
            break;
          switch (Name[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_cmp_95_o_95_f32;	 // "v_cmp_o_f32"
          case '6':	 // 1 string to match.
            if (Name[10] != '4')
              break;
            return MCK_v_95_cmp_95_o_95_f64;	 // "v_cmp_o_f64"
          }
          break;
        case 't':	 // 4 strings to match.
          if (Name[7] != '_')
            break;
          switch (Name[8]) {
          default: break;
          case 'i':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_v_95_cmp_95_t_95_i32;	 // "v_cmp_t_i32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_v_95_cmp_95_t_95_i64;	 // "v_cmp_t_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[10] != '2')
                break;
              return MCK_v_95_cmp_95_t_95_u32;	 // "v_cmp_t_u32"
            case '6':	 // 1 string to match.
              if (Name[10] != '4')
                break;
              return MCK_v_95_cmp_95_t_95_u64;	 // "v_cmp_t_u64"
            }
            break;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "_f", 2))
            break;
          switch (Name[9]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_cmp_95_u_95_f32;	 // "v_cmp_u_f32"
          case '6':	 // 1 string to match.
            if (Name[10] != '4')
              break;
            return MCK_v_95_cmp_95_u_95_f64;	 // "v_cmp_u_f64"
          }
          break;
        }
        break;
      case 'f':	 // 6 strings to match.
        switch (Name[3]) {
        default: break;
        case 'l':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "oor_f", 5))
            break;
          switch (Name[9]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[10] != '6')
              break;
            return MCK_v_95_floor_95_f16;	 // "v_floor_f16"
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_floor_95_f32;	 // "v_floor_f32"
          case '6':	 // 1 string to match.
            if (Name[10] != '4')
              break;
            return MCK_v_95_floor_95_f64;	 // "v_floor_f64"
          }
          break;
        case 'r':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "act_f", 5))
            break;
          switch (Name[9]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[10] != '6')
              break;
            return MCK_v_95_fract_95_f16;	 // "v_fract_f16"
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_fract_95_f32;	 // "v_fract_f32"
          case '6':	 // 1 string to match.
            if (Name[10] != '4')
              break;
            return MCK_v_95_fract_95_f64;	 // "v_fract_f64"
          }
          break;
        }
        break;
      case 'l':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "dexp_f", 6))
          break;
        switch (Name[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[10] != '6')
            break;
          return MCK_v_95_ldexp_95_f16;	 // "v_ldexp_f16"
        case '3':	 // 1 string to match.
          if (Name[10] != '2')
            break;
          return MCK_v_95_ldexp_95_f32;	 // "v_ldexp_f32"
        case '6':	 // 1 string to match.
          if (Name[10] != '4')
            break;
          return MCK_v_95_ldexp_95_f64;	 // "v_ldexp_f64"
        }
        break;
      case 'm':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "ad", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 'a':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "k_f", 3))
            break;
          switch (Name[9]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[10] != '6')
              break;
            return MCK_v_95_madak_95_f16;	 // "v_madak_f16"
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_madak_95_f32;	 // "v_madak_f32"
          }
          break;
        case 'm':	 // 2 strings to match.
          if (memcmp(Name.data()+6, "k_f", 3))
            break;
          switch (Name[9]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[10] != '6')
              break;
            return MCK_v_95_madmk_95_f16;	 // "v_madmk_f16"
          case '3':	 // 1 string to match.
            if (Name[10] != '2')
              break;
            return MCK_v_95_madmk_95_f32;	 // "v_madmk_f32"
          }
          break;
        }
        break;
      case 'r':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "ndne_f", 6))
          break;
        switch (Name[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[10] != '6')
            break;
          return MCK_v_95_rndne_95_f16;	 // "v_rndne_f16"
        case '3':	 // 1 string to match.
          if (Name[10] != '2')
            break;
          return MCK_v_95_rndne_95_f32;	 // "v_rndne_f32"
        case '6':	 // 1 string to match.
          if (Name[10] != '4')
            break;
          return MCK_v_95_rndne_95_f64;	 // "v_rndne_f64"
        }
        break;
      case 't':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "runc_f", 6))
          break;
        switch (Name[9]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[10] != '6')
            break;
          return MCK_v_95_trunc_95_f16;	 // "v_trunc_f16"
        case '3':	 // 1 string to match.
          if (Name[10] != '2')
            break;
          return MCK_v_95_trunc_95_f32;	 // "v_trunc_f32"
        case '6':	 // 1 string to match.
          if (Name[10] != '4')
            break;
          return MCK_v_95_trunc_95_f64;	 // "v_trunc_f64"
        }
        break;
      }
      break;
    }
    break;
  case 12:	 // 101 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 11 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'c':	 // 4 strings to match.
        if (memcmp(Name.data()+4, "mpst_", 5))
          break;
        switch (Name[9]) {
        default: break;
        case 'b':	 // 2 strings to match.
          switch (Name[10]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[11] != '2')
              break;
            return MCK_ds_95_cmpst_95_b32;	 // "ds_cmpst_b32"
          case '6':	 // 1 string to match.
            if (Name[11] != '4')
              break;
            return MCK_ds_95_cmpst_95_b64;	 // "ds_cmpst_b64"
          }
          break;
        case 'f':	 // 2 strings to match.
          switch (Name[10]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[11] != '2')
              break;
            return MCK_ds_95_cmpst_95_f32;	 // "ds_cmpst_f32"
          case '6':	 // 1 string to match.
            if (Name[11] != '4')
              break;
            return MCK_ds_95_cmpst_95_f64;	 // "ds_cmpst_f64"
          }
          break;
        }
        break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "skor_b", 6))
          break;
        switch (Name[10]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[11] != '2')
            break;
          return MCK_ds_95_mskor_95_b32;	 // "ds_mskor_b32"
        case '6':	 // 1 string to match.
          if (Name[11] != '4')
            break;
          return MCK_ds_95_mskor_95_b64;	 // "ds_mskor_b64"
        }
        break;
      case 'r':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ead2_b", 6))
          break;
        switch (Name[10]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[11] != '2')
            break;
          return MCK_ds_95_read2_95_b32;	 // "ds_read2_b32"
        case '6':	 // 1 string to match.
          if (Name[11] != '4')
            break;
          return MCK_ds_95_read2_95_b64;	 // "ds_read2_b64"
        }
        break;
      case 'w':	 // 3 strings to match.
        if (memcmp(Name.data()+4, "rite_b", 6))
          break;
        switch (Name[10]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[11] != '6')
            break;
          return MCK_ds_95_write_95_b16;	 // "ds_write_b16"
        case '3':	 // 1 string to match.
          if (Name[11] != '2')
            break;
          return MCK_ds_95_write_95_b32;	 // "ds_write_b32"
        case '6':	 // 1 string to match.
          if (Name[11] != '4')
            break;
          return MCK_ds_95_write_95_b64;	 // "ds_write_b64"
        }
        break;
      }
      break;
    case 'i':	 // 1 string to match.
      if (memcmp(Name.data()+1, "mage_sample", 11))
        break;
      return MCK_image_95_sample;	 // "image_sample"
    case 's':	 // 19 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 12 strings to match.
        if (memcmp(Name.data()+3, "mp_", 3))
          break;
        switch (Name[6]) {
        default: break;
        case 'e':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "q_", 2))
            break;
          switch (Name[9]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+10, "32", 2))
              break;
            return MCK_s_95_cmp_95_eq_95_i32;	 // "s_cmp_eq_i32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+10, "32", 2))
              break;
            return MCK_s_95_cmp_95_eq_95_u32;	 // "s_cmp_eq_u32"
          }
          break;
        case 'g':	 // 4 strings to match.
          switch (Name[7]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (Name[8] != '_')
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_ge_95_i32;	 // "s_cmp_ge_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_ge_95_u32;	 // "s_cmp_ge_u32"
            }
            break;
          case 't':	 // 2 strings to match.
            if (Name[8] != '_')
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_gt_95_i32;	 // "s_cmp_gt_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_gt_95_u32;	 // "s_cmp_gt_u32"
            }
            break;
          }
          break;
        case 'l':	 // 6 strings to match.
          switch (Name[7]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (Name[8] != '_')
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_le_95_i32;	 // "s_cmp_le_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_le_95_u32;	 // "s_cmp_le_u32"
            }
            break;
          case 'g':	 // 2 strings to match.
            if (Name[8] != '_')
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_lg_95_i32;	 // "s_cmp_lg_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_lg_95_u32;	 // "s_cmp_lg_u32"
            }
            break;
          case 't':	 // 2 strings to match.
            if (Name[8] != '_')
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_lt_95_i32;	 // "s_cmp_lt_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_s_95_cmp_95_lt_95_u32;	 // "s_cmp_lt_u32"
            }
            break;
          }
          break;
        }
        break;
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cache_inv", 9))
          break;
        return MCK_s_95_dcache_95_inv;	 // "s_dcache_inv"
      case 'g':	 // 1 string to match.
        if (memcmp(Name.data()+3, "etreg_b32", 9))
          break;
        return MCK_s_95_getreg_95_b32;	 // "s_getreg_b32"
      case 'i':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cache_inv", 9))
          break;
        return MCK_s_95_icache_95_inv;	 // "s_icache_inv"
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+3, "oad_dword", 9))
          break;
        return MCK_s_95_load_95_dword;	 // "s_load_dword"
      case 's':	 // 2 strings to match.
        switch (Name[3]) {
        default: break;
        case 'e':	 // 1 string to match.
          if (memcmp(Name.data()+4, "treg_b32", 8))
            break;
          return MCK_s_95_setreg_95_b32;	 // "s_setreg_b32"
        case 'w':	 // 1 string to match.
          if (memcmp(Name.data()+4, "appc_b64", 8))
            break;
          return MCK_s_95_swappc_95_b64;	 // "s_swappc_b64"
        }
        break;
      case 't':	 // 1 string to match.
        if (memcmp(Name.data()+3, "tracedata", 9))
          break;
        return MCK_s_95_ttracedata;	 // "s_ttracedata"
      }
      break;
    case 'v':	 // 70 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 60 strings to match.
        switch (Name[3]) {
        default: break;
        case 'm':	 // 56 strings to match.
          if (Name[4] != 'p')
            break;
          switch (Name[5]) {
          default: break;
          case '_':	 // 36 strings to match.
            switch (Name[6]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (memcmp(Name.data()+7, "q_", 2))
                break;
              switch (Name[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_eq_95_f32;	 // "v_cmp_eq_f32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_eq_95_f64;	 // "v_cmp_eq_f64"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_eq_95_i32;	 // "v_cmp_eq_i32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_eq_95_i64;	 // "v_cmp_eq_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_eq_95_u32;	 // "v_cmp_eq_u32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_eq_95_u64;	 // "v_cmp_eq_u64"
                }
                break;
              }
              break;
            case 'g':	 // 12 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_ge_95_f32;	 // "v_cmp_ge_f32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_ge_95_f64;	 // "v_cmp_ge_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_ge_95_i32;	 // "v_cmp_ge_i32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_ge_95_i64;	 // "v_cmp_ge_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_ge_95_u32;	 // "v_cmp_ge_u32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_ge_95_u64;	 // "v_cmp_ge_u64"
                  }
                  break;
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_gt_95_f32;	 // "v_cmp_gt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_gt_95_f64;	 // "v_cmp_gt_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_gt_95_i32;	 // "v_cmp_gt_i32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_gt_95_i64;	 // "v_cmp_gt_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_gt_95_u32;	 // "v_cmp_gt_u32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_gt_95_u64;	 // "v_cmp_gt_u64"
                  }
                  break;
                }
                break;
              }
              break;
            case 'l':	 // 14 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_le_95_f32;	 // "v_cmp_le_f32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_le_95_f64;	 // "v_cmp_le_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_le_95_i32;	 // "v_cmp_le_i32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_le_95_i64;	 // "v_cmp_le_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_le_95_u32;	 // "v_cmp_le_u32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_le_95_u64;	 // "v_cmp_le_u64"
                  }
                  break;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+8, "_f", 2))
                  break;
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_lg_95_f32;	 // "v_cmp_lg_f32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_lg_95_f64;	 // "v_cmp_lg_f64"
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_lt_95_f32;	 // "v_cmp_lt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_lt_95_f64;	 // "v_cmp_lt_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_lt_95_i32;	 // "v_cmp_lt_i32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_lt_95_i64;	 // "v_cmp_lt_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[11] != '2')
                      break;
                    return MCK_v_95_cmp_95_lt_95_u32;	 // "v_cmp_lt_u32"
                  case '6':	 // 1 string to match.
                    if (Name[11] != '4')
                      break;
                    return MCK_v_95_cmp_95_lt_95_u64;	 // "v_cmp_lt_u64"
                  }
                  break;
                }
                break;
              }
              break;
            case 'n':	 // 4 strings to match.
              if (memcmp(Name.data()+7, "e_", 2))
                break;
              switch (Name[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_ne_95_i32;	 // "v_cmp_ne_i32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_ne_95_i64;	 // "v_cmp_ne_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmp_95_ne_95_u32;	 // "v_cmp_ne_u32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmp_95_ne_95_u64;	 // "v_cmp_ne_u64"
                }
                break;
              }
              break;
            }
            break;
          case 's':	 // 6 strings to match.
            if (Name[6] != '_')
              break;
            switch (Name[7]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_cmps_95_f_95_f32;	 // "v_cmps_f_f32"
              case '6':	 // 1 string to match.
                if (Name[11] != '4')
                  break;
                return MCK_v_95_cmps_95_f_95_f64;	 // "v_cmps_f_f64"
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_cmps_95_o_95_f32;	 // "v_cmps_o_f32"
              case '6':	 // 1 string to match.
                if (Name[11] != '4')
                  break;
                return MCK_v_95_cmps_95_o_95_f64;	 // "v_cmps_o_f64"
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_cmps_95_u_95_f32;	 // "v_cmps_u_f32"
              case '6':	 // 1 string to match.
                if (Name[11] != '4')
                  break;
                return MCK_v_95_cmps_95_u_95_f64;	 // "v_cmps_u_f64"
              }
              break;
            }
            break;
          case 'x':	 // 14 strings to match.
            if (Name[6] != '_')
              break;
            switch (Name[7]) {
            default: break;
            case 'f':	 // 6 strings to match.
              if (Name[8] != '_')
                break;
              switch (Name[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmpx_95_f_95_f32;	 // "v_cmpx_f_f32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmpx_95_f_95_f64;	 // "v_cmpx_f_f64"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmpx_95_f_95_i32;	 // "v_cmpx_f_i32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmpx_95_f_95_i64;	 // "v_cmpx_f_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmpx_95_f_95_u32;	 // "v_cmpx_f_u32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmpx_95_f_95_u64;	 // "v_cmpx_f_u64"
                }
                break;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_cmpx_95_o_95_f32;	 // "v_cmpx_o_f32"
              case '6':	 // 1 string to match.
                if (Name[11] != '4')
                  break;
                return MCK_v_95_cmpx_95_o_95_f64;	 // "v_cmpx_o_f64"
              }
              break;
            case 't':	 // 4 strings to match.
              if (Name[8] != '_')
                break;
              switch (Name[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmpx_95_t_95_i32;	 // "v_cmpx_t_i32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmpx_95_t_95_i64;	 // "v_cmpx_t_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[11] != '2')
                    break;
                  return MCK_v_95_cmpx_95_t_95_u32;	 // "v_cmpx_t_u32"
                case '6':	 // 1 string to match.
                  if (Name[11] != '4')
                    break;
                  return MCK_v_95_cmpx_95_t_95_u64;	 // "v_cmpx_t_u64"
                }
                break;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_cmpx_95_u_95_f32;	 // "v_cmpx_u_f32"
              case '6':	 // 1 string to match.
                if (Name[11] != '4')
                  break;
                return MCK_v_95_cmpx_95_u_95_f64;	 // "v_cmpx_u_f64"
              }
              break;
            }
            break;
          }
          break;
        case 'u':	 // 4 strings to match.
          if (memcmp(Name.data()+4, "be", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "d_f32", 5))
              break;
            return MCK_v_95_cubeid_95_f32;	 // "v_cubeid_f32"
          case 'm':	 // 1 string to match.
            if (memcmp(Name.data()+7, "a_f32", 5))
              break;
            return MCK_v_95_cubema_95_f32;	 // "v_cubema_f32"
          case 's':	 // 1 string to match.
            if (memcmp(Name.data()+7, "c_f32", 5))
              break;
            return MCK_v_95_cubesc_95_f32;	 // "v_cubesc_f32"
          case 't':	 // 1 string to match.
            if (memcmp(Name.data()+7, "c_f32", 5))
              break;
            return MCK_v_95_cubetc_95_f32;	 // "v_cubetc_f32"
          }
          break;
        }
        break;
      case 'm':	 // 6 strings to match.
        if (memcmp(Name.data()+3, "ul", 2))
          break;
        switch (Name[5]) {
        default: break;
        case '_':	 // 5 strings to match.
          switch (Name[6]) {
          default: break;
          case 'h':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "i_", 2))
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_v_95_mul_95_hi_95_i32;	 // "v_mul_hi_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_v_95_mul_95_hi_95_u32;	 // "v_mul_hi_u32"
            }
            break;
          case 'l':	 // 3 strings to match.
            if (memcmp(Name.data()+7, "o_", 2))
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32", 2))
                break;
              return MCK_v_95_mul_95_lo_95_i32;	 // "v_mul_lo_i32"
            case 'u':	 // 2 strings to match.
              switch (Name[10]) {
              default: break;
              case '1':	 // 1 string to match.
                if (Name[11] != '6')
                  break;
                return MCK_v_95_mul_95_lo_95_u16;	 // "v_mul_lo_u16"
              case '3':	 // 1 string to match.
                if (Name[11] != '2')
                  break;
                return MCK_v_95_mul_95_lo_95_u32;	 // "v_mul_lo_u32"
              }
              break;
            }
            break;
          }
          break;
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+6, "it_f32", 6))
            break;
          return MCK_v_95_mullit_95_f32;	 // "v_mullit_f32"
        }
        break;
      case 's':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "ubrev_", 6))
          break;
        switch (Name[9]) {
        default: break;
        case 'f':	 // 2 strings to match.
          switch (Name[10]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[11] != '6')
              break;
            return MCK_v_95_subrev_95_f16;	 // "v_subrev_f16"
          case '3':	 // 1 string to match.
            if (Name[11] != '2')
              break;
            return MCK_v_95_subrev_95_f32;	 // "v_subrev_f32"
          }
          break;
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+10, "32", 2))
            break;
          return MCK_v_95_subrev_95_i32;	 // "v_subrev_i32"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+10, "16", 2))
            break;
          return MCK_v_95_subrev_95_u16;	 // "v_subrev_u16"
        }
        break;
      }
      break;
    }
    break;
  case 13:	 // 142 strings to match.
    switch (Name[0]) {
    default: break;
    case 'd':	 // 6 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'g':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ws_sema_", 8))
          break;
        switch (Name[12]) {
        default: break;
        case 'p':	 // 1 string to match.
          return MCK_ds_95_gws_95_sema_95_p;	 // "ds_gws_sema_p"
        case 'v':	 // 1 string to match.
          return MCK_ds_95_gws_95_sema_95_v;	 // "ds_gws_sema_v"
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "r_rtn_b", 7))
          break;
        switch (Name[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[12] != '2')
            break;
          return MCK_ds_95_or_95_rtn_95_b32;	 // "ds_or_rtn_b32"
        case '6':	 // 1 string to match.
          if (Name[12] != '4')
            break;
          return MCK_ds_95_or_95_rtn_95_b64;	 // "ds_or_rtn_b64"
        }
        break;
      case 'w':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "rite2_b", 7))
          break;
        switch (Name[11]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[12] != '2')
            break;
          return MCK_ds_95_write2_95_b32;	 // "ds_write2_b32"
        case '6':	 // 1 string to match.
          if (Name[12] != '4')
            break;
          return MCK_ds_95_write2_95_b64;	 // "ds_write2_b64"
        }
        break;
      }
      break;
    case 'i':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "mage_g", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+8, "ther4", 5))
          break;
        return MCK_image_95_gather4;	 // "image_gather4"
      case 'e':	 // 1 string to match.
        if (memcmp(Name.data()+8, "t_lod", 5))
          break;
        return MCK_image_95_get_95_lod;	 // "image_get_lod"
      }
      break;
    case 's':	 // 30 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+3, "bsdiff_i32", 10))
          break;
        return MCK_s_95_absdiff_95_i32;	 // "s_absdiff_i32"
      case 'b':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "itset", 5))
          break;
        switch (Name[8]) {
        default: break;
        case '0':	 // 2 strings to match.
          if (memcmp(Name.data()+9, "_b", 2))
            break;
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_s_95_bitset0_95_b32;	 // "s_bitset0_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_s_95_bitset0_95_b64;	 // "s_bitset0_b64"
          }
          break;
        case '1':	 // 2 strings to match.
          if (memcmp(Name.data()+9, "_b", 2))
            break;
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_s_95_bitset1_95_b32;	 // "s_bitset1_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_s_95_bitset1_95_b64;	 // "s_bitset1_b64"
          }
          break;
        }
        break;
      case 'c':	 // 14 strings to match.
        switch (Name[3]) {
        default: break;
        case 'm':	 // 12 strings to match.
          if (memcmp(Name.data()+4, "pk_", 3))
            break;
          switch (Name[7]) {
          default: break;
          case 'e':	 // 2 strings to match.
            if (memcmp(Name.data()+8, "q_", 2))
              break;
            switch (Name[10]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+11, "32", 2))
                break;
              return MCK_s_95_cmpk_95_eq_95_i32;	 // "s_cmpk_eq_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+11, "32", 2))
                break;
              return MCK_s_95_cmpk_95_eq_95_u32;	 // "s_cmpk_eq_u32"
            }
            break;
          case 'g':	 // 4 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_ge_95_i32;	 // "s_cmpk_ge_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_ge_95_u32;	 // "s_cmpk_ge_u32"
              }
              break;
            case 't':	 // 2 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_gt_95_i32;	 // "s_cmpk_gt_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_gt_95_u32;	 // "s_cmpk_gt_u32"
              }
              break;
            }
            break;
          case 'l':	 // 6 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_le_95_i32;	 // "s_cmpk_le_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_le_95_u32;	 // "s_cmpk_le_u32"
              }
              break;
            case 'g':	 // 2 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_lg_95_i32;	 // "s_cmpk_lg_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_lg_95_u32;	 // "s_cmpk_lg_u32"
              }
              break;
            case 't':	 // 2 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_lt_95_i32;	 // "s_cmpk_lt_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_s_95_cmpk_95_lt_95_u32;	 // "s_cmpk_lt_u32"
              }
              break;
            }
            break;
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "elect_b", 7))
            break;
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_s_95_cselect_95_b32;	 // "s_cselect_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_s_95_cselect_95_b64;	 // "s_cselect_b64"
          }
          break;
        }
        break;
      case 'f':	 // 4 strings to match.
        if (Name[3] != 'f')
          break;
        switch (Name[4]) {
        default: break;
        case '0':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "_i32_b", 6))
            break;
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_s_95_ff0_95_i32_95_b32;	 // "s_ff0_i32_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_s_95_ff0_95_i32_95_b64;	 // "s_ff0_i32_b64"
          }
          break;
        case '1':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "_i32_b", 6))
            break;
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_s_95_ff1_95_i32_95_b32;	 // "s_ff1_i32_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_s_95_ff1_95_i32_95_b64;	 // "s_ff1_i32_b64"
          }
          break;
        }
        break;
      case 'm':	 // 5 strings to match.
        if (memcmp(Name.data()+3, "ov", 2))
          break;
        switch (Name[5]) {
        default: break;
        case '_':	 // 1 string to match.
          if (memcmp(Name.data()+6, "fed_b32", 7))
            break;
          return MCK_s_95_mov_95_fed_95_b32;	 // "s_mov_fed_b32"
        case 'r':	 // 4 strings to match.
          if (memcmp(Name.data()+6, "el", 2))
            break;
          switch (Name[8]) {
          default: break;
          case 'd':	 // 2 strings to match.
            if (memcmp(Name.data()+9, "_b", 2))
              break;
            switch (Name[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[12] != '2')
                break;
              return MCK_s_95_movreld_95_b32;	 // "s_movreld_b32"
            case '6':	 // 1 string to match.
              if (Name[12] != '4')
                break;
              return MCK_s_95_movreld_95_b64;	 // "s_movreld_b64"
            }
            break;
          case 's':	 // 2 strings to match.
            if (memcmp(Name.data()+9, "_b", 2))
              break;
            switch (Name[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[12] != '2')
                break;
              return MCK_s_95_movrels_95_b32;	 // "s_movrels_b32"
            case '6':	 // 1 string to match.
              if (Name[12] != '4')
                break;
              return MCK_s_95_movrels_95_b64;	 // "s_movrels_b64"
            }
            break;
          }
          break;
        }
        break;
      case 's':	 // 2 strings to match.
        if (Name[3] != 'e')
          break;
        switch (Name[4]) {
        default: break;
        case 'n':	 // 1 string to match.
          if (memcmp(Name.data()+5, "dmsghalt", 8))
            break;
          return MCK_s_95_sendmsghalt;	 // "s_sendmsghalt"
        case 'x':	 // 1 string to match.
          if (memcmp(Name.data()+5, "t_i32_i8", 8))
            break;
          return MCK_s_95_sext_95_i32_95_i8;	 // "s_sext_i32_i8"
        }
        break;
      }
      break;
    case 'v':	 // 104 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "shrrev_", 7))
          break;
        switch (Name[10]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+11, "16", 2))
            break;
          return MCK_v_95_ashrrev_95_b16;	 // "v_ashrrev_b16"
        case 'i':	 // 2 strings to match.
          switch (Name[11]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_v_95_ashrrev_95_i32;	 // "v_ashrrev_i32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_v_95_ashrrev_95_i64;	 // "v_ashrrev_i64"
          }
          break;
        }
        break;
      case 'c':	 // 85 strings to match.
        switch (Name[3]) {
        default: break;
        case 'm':	 // 68 strings to match.
          if (Name[4] != 'p')
            break;
          switch (Name[5]) {
          default: break;
          case '_':	 // 14 strings to match.
            switch (Name[6]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+8, "q_f", 3))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmp_95_neq_95_f32;	 // "v_cmp_neq_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmp_95_neq_95_f64;	 // "v_cmp_neq_f64"
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Name[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmp_95_nge_95_f32;	 // "v_cmp_nge_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmp_95_nge_95_f64;	 // "v_cmp_nge_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmp_95_ngt_95_f32;	 // "v_cmp_ngt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmp_95_ngt_95_f64;	 // "v_cmp_ngt_f64"
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Name[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmp_95_nle_95_f32;	 // "v_cmp_nle_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmp_95_nle_95_f64;	 // "v_cmp_nle_f64"
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmp_95_nlg_95_f32;	 // "v_cmp_nlg_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmp_95_nlg_95_f64;	 // "v_cmp_nlg_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmp_95_nlt_95_f32;	 // "v_cmp_nlt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmp_95_nlt_95_f64;	 // "v_cmp_nlt_f64"
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Name.data()+7, "ru_f", 4))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[12] != '2')
                  break;
                return MCK_v_95_cmp_95_tru_95_f32;	 // "v_cmp_tru_f32"
              case '6':	 // 1 string to match.
                if (Name[12] != '4')
                  break;
                return MCK_v_95_cmp_95_tru_95_f64;	 // "v_cmp_tru_f64"
              }
              break;
            }
            break;
          case 's':	 // 18 strings to match.
            switch (Name[6]) {
            default: break;
            case '_':	 // 12 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+8, "q_f", 3))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmps_95_eq_95_f32;	 // "v_cmps_eq_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmps_95_eq_95_f64;	 // "v_cmps_eq_f64"
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Name[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmps_95_ge_95_f32;	 // "v_cmps_ge_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmps_95_ge_95_f64;	 // "v_cmps_ge_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmps_95_gt_95_f32;	 // "v_cmps_gt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmps_95_gt_95_f64;	 // "v_cmps_gt_f64"
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Name[8]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmps_95_le_95_f32;	 // "v_cmps_le_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmps_95_le_95_f64;	 // "v_cmps_le_f64"
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmps_95_lg_95_f32;	 // "v_cmps_lg_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmps_95_lg_95_f64;	 // "v_cmps_lg_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+9, "_f", 2))
                    break;
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmps_95_lt_95_f32;	 // "v_cmps_lt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmps_95_lt_95_f64;	 // "v_cmps_lt_f64"
                  }
                  break;
                }
                break;
              }
              break;
            case 'x':	 // 6 strings to match.
              if (Name[7] != '_')
                break;
              switch (Name[8]) {
              default: break;
              case 'f':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_f_95_f32;	 // "v_cmpsx_f_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_f_95_f64;	 // "v_cmpsx_f_f64"
                }
                break;
              case 'o':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_o_95_f32;	 // "v_cmpsx_o_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_o_95_f64;	 // "v_cmpsx_o_f64"
                }
                break;
              case 'u':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_u_95_f32;	 // "v_cmpsx_u_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_u_95_f64;	 // "v_cmpsx_u_f64"
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 36 strings to match.
            if (Name[6] != '_')
              break;
            switch (Name[7]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (memcmp(Name.data()+8, "q_", 2))
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_f32;	 // "v_cmpx_eq_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_f64;	 // "v_cmpx_eq_f64"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_i32;	 // "v_cmpx_eq_i32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_i64;	 // "v_cmpx_eq_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_u32;	 // "v_cmpx_eq_u32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_eq_95_u64;	 // "v_cmpx_eq_u64"
                }
                break;
              }
              break;
            case 'g':	 // 12 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[9] != '_')
                  break;
                switch (Name[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_f32;	 // "v_cmpx_ge_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_f64;	 // "v_cmpx_ge_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_i32;	 // "v_cmpx_ge_i32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_i64;	 // "v_cmpx_ge_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_u32;	 // "v_cmpx_ge_u32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_ge_95_u64;	 // "v_cmpx_ge_u64"
                  }
                  break;
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[9] != '_')
                  break;
                switch (Name[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_f32;	 // "v_cmpx_gt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_f64;	 // "v_cmpx_gt_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_i32;	 // "v_cmpx_gt_i32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_i64;	 // "v_cmpx_gt_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_u32;	 // "v_cmpx_gt_u32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_gt_95_u64;	 // "v_cmpx_gt_u64"
                  }
                  break;
                }
                break;
              }
              break;
            case 'l':	 // 14 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[9] != '_')
                  break;
                switch (Name[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_le_95_f32;	 // "v_cmpx_le_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_le_95_f64;	 // "v_cmpx_le_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_le_95_i32;	 // "v_cmpx_le_i32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_le_95_i64;	 // "v_cmpx_le_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_le_95_u32;	 // "v_cmpx_le_u32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_le_95_u64;	 // "v_cmpx_le_u64"
                  }
                  break;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_lg_95_f32;	 // "v_cmpx_lg_f32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_lg_95_f64;	 // "v_cmpx_lg_f64"
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[9] != '_')
                  break;
                switch (Name[10]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_f32;	 // "v_cmpx_lt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_f64;	 // "v_cmpx_lt_f64"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_i32;	 // "v_cmpx_lt_i32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_i64;	 // "v_cmpx_lt_i64"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[11]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[12] != '2')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_u32;	 // "v_cmpx_lt_u32"
                  case '6':	 // 1 string to match.
                    if (Name[12] != '4')
                      break;
                    return MCK_v_95_cmpx_95_lt_95_u64;	 // "v_cmpx_lt_u64"
                  }
                  break;
                }
                break;
              }
              break;
            case 'n':	 // 4 strings to match.
              if (memcmp(Name.data()+8, "e_", 2))
                break;
              switch (Name[10]) {
              default: break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_ne_95_i32;	 // "v_cmpx_ne_i32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_ne_95_i64;	 // "v_cmpx_ne_i64"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[12] != '2')
                    break;
                  return MCK_v_95_cmpx_95_ne_95_u32;	 // "v_cmpx_ne_u32"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cmpx_95_ne_95_u64;	 // "v_cmpx_ne_u64"
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'n':	 // 1 string to match.
          if (memcmp(Name.data()+4, "dmask_b32", 9))
            break;
          return MCK_v_95_cndmask_95_b32;	 // "v_cndmask_b32"
        case 'v':	 // 16 strings to match.
          if (memcmp(Name.data()+4, "t_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'f':	 // 10 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 3 strings to match.
              if (memcmp(Name.data()+8, "6_", 2))
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f16_95_f32;	 // "v_cvt_f16_f32"
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "16", 2))
                  break;
                return MCK_v_95_cvt_95_f16_95_i16;	 // "v_cvt_f16_i16"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "16", 2))
                  break;
                return MCK_v_95_cvt_95_f16_95_u16;	 // "v_cvt_f16_u16"
              }
              break;
            case '3':	 // 4 strings to match.
              if (memcmp(Name.data()+8, "2_", 2))
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '1':	 // 1 string to match.
                  if (Name[12] != '6')
                    break;
                  return MCK_v_95_cvt_95_f32_95_f16;	 // "v_cvt_f32_f16"
                case '6':	 // 1 string to match.
                  if (Name[12] != '4')
                    break;
                  return MCK_v_95_cvt_95_f32_95_f64;	 // "v_cvt_f32_f64"
                }
                break;
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f32_95_i32;	 // "v_cvt_f32_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f32_95_u32;	 // "v_cvt_f32_u32"
              }
              break;
            case '6':	 // 3 strings to match.
              if (memcmp(Name.data()+8, "4_", 2))
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f64_95_f32;	 // "v_cvt_f64_f32"
              case 'i':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f64_95_i32;	 // "v_cvt_f64_i32"
              case 'u':	 // 1 string to match.
                if (memcmp(Name.data()+11, "32", 2))
                  break;
                return MCK_v_95_cvt_95_f64_95_u32;	 // "v_cvt_f64_u32"
              }
              break;
            }
            break;
          case 'i':	 // 3 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Name.data()+8, "6_f16", 5))
                break;
              return MCK_v_95_cvt_95_i16_95_f16;	 // "v_cvt_i16_f16"
            case '3':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "2_f", 3))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[12] != '2')
                  break;
                return MCK_v_95_cvt_95_i32_95_f32;	 // "v_cvt_i32_f32"
              case '6':	 // 1 string to match.
                if (Name[12] != '4')
                  break;
                return MCK_v_95_cvt_95_i32_95_f64;	 // "v_cvt_i32_f64"
              }
              break;
            }
            break;
          case 'u':	 // 3 strings to match.
            switch (Name[7]) {
            default: break;
            case '1':	 // 1 string to match.
              if (memcmp(Name.data()+8, "6_f16", 5))
                break;
              return MCK_v_95_cvt_95_u16_95_f16;	 // "v_cvt_u16_f16"
            case '3':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "2_f", 3))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[12] != '2')
                  break;
                return MCK_v_95_cvt_95_u32_95_f32;	 // "v_cvt_u32_f32"
              case '6':	 // 1 string to match.
                if (Name[12] != '4')
                  break;
                return MCK_v_95_cvt_95_u32_95_f64;	 // "v_cvt_u32_f64"
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'l':	 // 6 strings to match.
        if (memcmp(Name.data()+3, "sh", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 'l':	 // 3 strings to match.
          if (memcmp(Name.data()+6, "rev_b", 5))
            break;
          switch (Name[11]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[12] != '6')
              break;
            return MCK_v_95_lshlrev_95_b16;	 // "v_lshlrev_b16"
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_v_95_lshlrev_95_b32;	 // "v_lshlrev_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_v_95_lshlrev_95_b64;	 // "v_lshlrev_b64"
          }
          break;
        case 'r':	 // 3 strings to match.
          if (memcmp(Name.data()+6, "rev_b", 5))
            break;
          switch (Name[11]) {
          default: break;
          case '1':	 // 1 string to match.
            if (Name[12] != '6')
              break;
            return MCK_v_95_lshrrev_95_b16;	 // "v_lshrrev_b16"
          case '3':	 // 1 string to match.
            if (Name[12] != '2')
              break;
            return MCK_v_95_lshrrev_95_b32;	 // "v_lshrrev_b32"
          case '6':	 // 1 string to match.
            if (Name[12] != '4')
              break;
            return MCK_v_95_lshrrev_95_b64;	 // "v_lshrrev_b64"
          }
          break;
        }
        break;
      case 'm':	 // 9 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 4 strings to match.
          if (memcmp(Name.data()+4, "d_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 2 strings to match.
            switch (Name[7]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+8, "2_i24", 5))
                break;
              return MCK_v_95_mad_95_i32_95_i24;	 // "v_mad_i32_i24"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+8, "4_i32", 5))
                break;
              return MCK_v_95_mad_95_i64_95_i32;	 // "v_mad_i64_i32"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[7]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+8, "2_u24", 5))
                break;
              return MCK_v_95_mad_95_u32_95_u24;	 // "v_mad_u32_u24"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+8, "4_u32", 5))
                break;
              return MCK_v_95_mad_95_u64_95_u32;	 // "v_mad_u64_u32"
            }
            break;
          }
          break;
        case 'o':	 // 3 strings to match.
          if (Name[4] != 'v')
            break;
          switch (Name[5]) {
          default: break;
          case '_':	 // 1 string to match.
            if (memcmp(Name.data()+6, "fed_b32", 7))
              break;
            return MCK_v_95_mov_95_fed_95_b32;	 // "v_mov_fed_b32"
          case 'r':	 // 2 strings to match.
            if (memcmp(Name.data()+6, "el", 2))
              break;
            switch (Name[8]) {
            default: break;
            case 'd':	 // 1 string to match.
              if (memcmp(Name.data()+9, "_b32", 4))
                break;
              return MCK_v_95_movreld_95_b32;	 // "v_movreld_b32"
            case 's':	 // 1 string to match.
              if (memcmp(Name.data()+9, "_b32", 4))
                break;
              return MCK_v_95_movrels_95_b32;	 // "v_movrels_b32"
            }
            break;
          }
          break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "l_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32_i24", 6))
              break;
            return MCK_v_95_mul_95_i32_95_i24;	 // "v_mul_i32_i24"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+7, "32_u24", 6))
              break;
            return MCK_v_95_mul_95_u32_95_u24;	 // "v_mul_u32_u24"
          }
          break;
        }
        break;
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ubbrev_u32", 10))
          break;
        return MCK_v_95_subbrev_95_u32;	 // "v_subbrev_u32"
      }
      break;
    }
    break;
  case 14:	 // 100 strings to match.
    switch (Name[0]) {
    default: break;
    case 'I':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "NTERP_PAIR_", 11))
        break;
      switch (Name[12]) {
      default: break;
      case 'X':	 // 1 string to match.
        if (Name[13] != 'Y')
          break;
        return MCK_INTERP_95_PAIR_95_XY;	 // "INTERP_PAIR_XY"
      case 'Z':	 // 1 string to match.
        if (Name[13] != 'W')
          break;
        return MCK_INTERP_95_PAIR_95_ZW;	 // "INTERP_PAIR_ZW"
      }
      break;
    case 'b':	 // 1 string to match.
      if (memcmp(Name.data()+1, "uffer_wbinvl1", 13))
        break;
      return MCK_buffer_95_wbinvl1;	 // "buffer_wbinvl1"
    case 'd':	 // 30 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'a':	 // 5 strings to match.
        switch (Name[4]) {
        default: break;
        case 'd':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "d_rtn_u", 7))
            break;
          switch (Name[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[13] != '2')
              break;
            return MCK_ds_95_add_95_rtn_95_u32;	 // "ds_add_rtn_u32"
          case '6':	 // 1 string to match.
            if (Name[13] != '4')
              break;
            return MCK_ds_95_add_95_rtn_95_u64;	 // "ds_add_rtn_u64"
          }
          break;
        case 'n':	 // 3 strings to match.
          if (memcmp(Name.data()+5, "d_", 2))
            break;
          switch (Name[7]) {
          default: break;
          case 'r':	 // 2 strings to match.
            if (memcmp(Name.data()+8, "tn_b", 4))
              break;
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_and_95_rtn_95_b32;	 // "ds_and_rtn_b32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_and_95_rtn_95_b64;	 // "ds_and_rtn_b64"
            }
            break;
          case 's':	 // 1 string to match.
            if (memcmp(Name.data()+8, "rc_b32", 6))
              break;
            return MCK_ds_95_and_95_src_95_b32;	 // "ds_and_src_b32"
          }
          break;
        }
        break;
      case 'd':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ec_rtn_u", 8))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_ds_95_dec_95_rtn_95_u32;	 // "ds_dec_rtn_u32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_ds_95_dec_95_rtn_95_u64;	 // "ds_dec_rtn_u64"
        }
        break;
      case 'g':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ws_", 3))
          break;
        switch (Name[7]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+8, "arrier", 6))
            break;
          return MCK_ds_95_gws_95_barrier;	 // "ds_gws_barrier"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+8, "ema_br", 6))
            break;
          return MCK_ds_95_gws_95_sema_95_br;	 // "ds_gws_sema_br"
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "nc_rtn_u", 8))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_ds_95_inc_95_rtn_95_u32;	 // "ds_inc_rtn_u32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_ds_95_inc_95_rtn_95_u64;	 // "ds_inc_rtn_u64"
        }
        break;
      case 'm':	 // 12 strings to match.
        switch (Name[4]) {
        default: break;
        case 'a':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "x_rtn_", 6))
            break;
          switch (Name[11]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_max_95_rtn_95_f32;	 // "ds_max_rtn_f32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_max_95_rtn_95_f64;	 // "ds_max_rtn_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_max_95_rtn_95_i32;	 // "ds_max_rtn_i32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_max_95_rtn_95_i64;	 // "ds_max_rtn_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_max_95_rtn_95_u32;	 // "ds_max_rtn_u32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_max_95_rtn_95_u64;	 // "ds_max_rtn_u64"
            }
            break;
          }
          break;
        case 'i':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "n_rtn_", 6))
            break;
          switch (Name[11]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_min_95_rtn_95_f32;	 // "ds_min_rtn_f32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_min_95_rtn_95_f64;	 // "ds_min_rtn_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_min_95_rtn_95_i32;	 // "ds_min_rtn_i32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_min_95_rtn_95_i64;	 // "ds_min_rtn_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_ds_95_min_95_rtn_95_u32;	 // "ds_min_rtn_u32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_ds_95_min_95_rtn_95_u64;	 // "ds_min_rtn_u64"
            }
            break;
          }
          break;
        }
        break;
      case 'o':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "r_src2_b", 8))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_ds_95_or_95_src2_95_b32;	 // "ds_or_src2_b32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_ds_95_or_95_src2_95_b64;	 // "ds_or_src2_b64"
        }
        break;
      case 's':	 // 3 strings to match.
        switch (Name[4]) {
        default: break;
        case 'u':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "b_rtn_u", 7))
            break;
          switch (Name[12]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[13] != '2')
              break;
            return MCK_ds_95_sub_95_rtn_95_u32;	 // "ds_sub_rtn_u32"
          case '6':	 // 1 string to match.
            if (Name[13] != '4')
              break;
            return MCK_ds_95_sub_95_rtn_95_u64;	 // "ds_sub_rtn_u64"
          }
          break;
        case 'w':	 // 1 string to match.
          if (memcmp(Name.data()+5, "izzle_b32", 9))
            break;
          return MCK_ds_95_swizzle_95_b32;	 // "ds_swizzle_b32"
        }
        break;
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "or_rtn_b", 8))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_ds_95_xor_95_rtn_95_b32;	 // "ds_xor_rtn_b32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_ds_95_xor_95_rtn_95_b64;	 // "ds_xor_rtn_b64"
        }
        break;
      }
      break;
    case 'f':	 // 1 string to match.
      if (memcmp(Name.data()+1, "lat_atomic_or", 13))
        break;
      return MCK_flat_95_atomic_95_or;	 // "flat_atomic_or"
    case 'i':	 // 6 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+7, "oad_mip", 7))
          break;
        return MCK_image_95_load_95_mip;	 // "image_load_mip"
      case 's':	 // 5 strings to match.
        if (memcmp(Name.data()+7, "ample_", 6))
          break;
        switch (Name[13]) {
        default: break;
        case 'b':	 // 1 string to match.
          return MCK_image_95_sample_95_b;	 // "image_sample_b"
        case 'c':	 // 1 string to match.
          return MCK_image_95_sample_95_c;	 // "image_sample_c"
        case 'd':	 // 1 string to match.
          return MCK_image_95_sample_95_d;	 // "image_sample_d"
        case 'l':	 // 1 string to match.
          return MCK_image_95_sample_95_l;	 // "image_sample_l"
        case 'o':	 // 1 string to match.
          return MCK_image_95_sample_95_o;	 // "image_sample_o"
        }
        break;
      }
      break;
    case 's':	 // 12 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "branch_", 7))
          break;
        switch (Name[10]) {
        default: break;
        case 'j':	 // 1 string to match.
          if (memcmp(Name.data()+11, "oin", 3))
            break;
          return MCK_s_95_cbranch_95_join;	 // "s_cbranch_join"
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+11, "cc", 2))
            break;
          switch (Name[13]) {
          default: break;
          case '0':	 // 1 string to match.
            return MCK_s_95_cbranch_95_scc0;	 // "s_cbranch_scc0"
          case '1':	 // 1 string to match.
            return MCK_s_95_cbranch_95_scc1;	 // "s_cbranch_scc1"
          }
          break;
        case 'v':	 // 1 string to match.
          if (memcmp(Name.data()+11, "ccz", 3))
            break;
          return MCK_s_95_cbranch_95_vccz;	 // "s_cbranch_vccz"
        }
        break;
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ecperflevel", 11))
          break;
        return MCK_s_95_decperflevel;	 // "s_decperflevel"
      case 'i':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ncperflevel", 11))
          break;
        return MCK_s_95_incperflevel;	 // "s_incperflevel"
      case 'l':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "oad_dwordx", 10))
          break;
        switch (Name[13]) {
        default: break;
        case '2':	 // 1 string to match.
          return MCK_s_95_load_95_dwordx2;	 // "s_load_dwordx2"
        case '4':	 // 1 string to match.
          return MCK_s_95_load_95_dwordx4;	 // "s_load_dwordx4"
        case '8':	 // 1 string to match.
          return MCK_s_95_load_95_dwordx8;	 // "s_load_dwordx8"
        }
        break;
      case 'q':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "uadmask_b", 9))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_s_95_quadmask_95_b32;	 // "s_quadmask_b32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_s_95_quadmask_95_b64;	 // "s_quadmask_b64"
        }
        break;
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ext_i32_i16", 11))
          break;
        return MCK_s_95_sext_95_i32_95_i16;	 // "s_sext_i32_i16"
      }
      break;
    case 'v':	 // 48 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+3, "lignbit_b32", 11))
          break;
        return MCK_v_95_alignbit_95_b32;	 // "v_alignbit_b32"
      case 'b':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cnt_u32_b32", 11))
          break;
        return MCK_v_95_bcnt_95_u32_95_b32;	 // "v_bcnt_u32_b32"
      case 'c':	 // 40 strings to match.
        if (memcmp(Name.data()+3, "mp", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 's':	 // 26 strings to match.
          switch (Name[6]) {
          default: break;
          case '_':	 // 14 strings to match.
            switch (Name[7]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "q_f", 3))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmps_95_neq_95_f32;	 // "v_cmps_neq_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmps_95_neq_95_f64;	 // "v_cmps_neq_f64"
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Name[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[13] != '2')
                      break;
                    return MCK_v_95_cmps_95_nge_95_f32;	 // "v_cmps_nge_f32"
                  case '6':	 // 1 string to match.
                    if (Name[13] != '4')
                      break;
                    return MCK_v_95_cmps_95_nge_95_f64;	 // "v_cmps_nge_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[13] != '2')
                      break;
                    return MCK_v_95_cmps_95_ngt_95_f32;	 // "v_cmps_ngt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[13] != '4')
                      break;
                    return MCK_v_95_cmps_95_ngt_95_f64;	 // "v_cmps_ngt_f64"
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Name[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[13] != '2')
                      break;
                    return MCK_v_95_cmps_95_nle_95_f32;	 // "v_cmps_nle_f32"
                  case '6':	 // 1 string to match.
                    if (Name[13] != '4')
                      break;
                    return MCK_v_95_cmps_95_nle_95_f64;	 // "v_cmps_nle_f64"
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[13] != '2')
                      break;
                    return MCK_v_95_cmps_95_nlg_95_f32;	 // "v_cmps_nlg_f32"
                  case '6':	 // 1 string to match.
                    if (Name[13] != '4')
                      break;
                    return MCK_v_95_cmps_95_nlg_95_f64;	 // "v_cmps_nlg_f64"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (Name[13] != '2')
                      break;
                    return MCK_v_95_cmps_95_nlt_95_f32;	 // "v_cmps_nlt_f32"
                  case '6':	 // 1 string to match.
                    if (Name[13] != '4')
                      break;
                    return MCK_v_95_cmps_95_nlt_95_f64;	 // "v_cmps_nlt_f64"
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "ru_f", 4))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[13] != '2')
                  break;
                return MCK_v_95_cmps_95_tru_95_f32;	 // "v_cmps_tru_f32"
              case '6':	 // 1 string to match.
                if (Name[13] != '4')
                  break;
                return MCK_v_95_cmps_95_tru_95_f64;	 // "v_cmps_tru_f64"
              }
              break;
            }
            break;
          case 'x':	 // 12 strings to match.
            if (Name[7] != '_')
              break;
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "q_f", 3))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[13] != '2')
                  break;
                return MCK_v_95_cmpsx_95_eq_95_f32;	 // "v_cmpsx_eq_f32"
              case '6':	 // 1 string to match.
                if (Name[13] != '4')
                  break;
                return MCK_v_95_cmpsx_95_eq_95_f64;	 // "v_cmpsx_eq_f64"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_ge_95_f32;	 // "v_cmpsx_ge_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_ge_95_f64;	 // "v_cmpsx_ge_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_gt_95_f32;	 // "v_cmpsx_gt_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_gt_95_f64;	 // "v_cmpsx_gt_f64"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_le_95_f32;	 // "v_cmpsx_le_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_le_95_f64;	 // "v_cmpsx_le_f64"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_lg_95_f32;	 // "v_cmpsx_lg_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_lg_95_f64;	 // "v_cmpsx_lg_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_lt_95_f32;	 // "v_cmpsx_lt_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_lt_95_f64;	 // "v_cmpsx_lt_f64"
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 14 strings to match.
          if (Name[6] != '_')
            break;
          switch (Name[7]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "q_f", 3))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[13] != '2')
                  break;
                return MCK_v_95_cmpx_95_neq_95_f32;	 // "v_cmpx_neq_f32"
              case '6':	 // 1 string to match.
                if (Name[13] != '4')
                  break;
                return MCK_v_95_cmpx_95_neq_95_f64;	 // "v_cmpx_neq_f64"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpx_95_nge_95_f32;	 // "v_cmpx_nge_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpx_95_nge_95_f64;	 // "v_cmpx_nge_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpx_95_ngt_95_f32;	 // "v_cmpx_ngt_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpx_95_ngt_95_f64;	 // "v_cmpx_ngt_f64"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpx_95_nle_95_f32;	 // "v_cmpx_nle_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpx_95_nle_95_f64;	 // "v_cmpx_nle_f64"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpx_95_nlg_95_f32;	 // "v_cmpx_nlg_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpx_95_nlg_95_f64;	 // "v_cmpx_nlg_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[13] != '2')
                    break;
                  return MCK_v_95_cmpx_95_nlt_95_f32;	 // "v_cmpx_nlt_f32"
                case '6':	 // 1 string to match.
                  if (Name[13] != '4')
                    break;
                  return MCK_v_95_cmpx_95_nlt_95_f64;	 // "v_cmpx_nlt_f64"
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Name.data()+8, "ru_f", 4))
              break;
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[13] != '2')
                break;
              return MCK_v_95_cmpx_95_tru_95_f32;	 // "v_cmpx_tru_f32"
            case '6':	 // 1 string to match.
              if (Name[13] != '4')
                break;
              return MCK_v_95_cmpx_95_tru_95_f64;	 // "v_cmpx_tru_f64"
            }
            break;
          }
          break;
        }
        break;
      case 'd':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "iv_fmas_f", 9))
          break;
        switch (Name[12]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[13] != '2')
            break;
          return MCK_v_95_div_95_fmas_95_f32;	 // "v_div_fmas_f32"
        case '6':	 // 1 string to match.
          if (Name[13] != '4')
            break;
          return MCK_v_95_div_95_fmas_95_f64;	 // "v_div_fmas_f64"
        }
        break;
      case 'm':	 // 3 strings to match.
        switch (Name[3]) {
        default: break;
        case 'o':	 // 1 string to match.
          if (memcmp(Name.data()+4, "vrelsd_b32", 10))
            break;
          return MCK_v_95_movrelsd_95_b32;	 // "v_movrelsd_b32"
        case 'q':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "sad_u", 5))
            break;
          switch (Name[9]) {
          default: break;
          case '1':	 // 1 string to match.
            if (memcmp(Name.data()+10, "6_u8", 4))
              break;
            return MCK_v_95_mqsad_95_u16_95_u8;	 // "v_mqsad_u16_u8"
          case '3':	 // 1 string to match.
            if (memcmp(Name.data()+10, "2_u8", 4))
              break;
            return MCK_v_95_mqsad_95_u32_95_u8;	 // "v_mqsad_u32_u8"
          }
          break;
        }
        break;
      case 'r':	 // 1 string to match.
        if (memcmp(Name.data()+3, "eadlane_b32", 11))
          break;
        return MCK_v_95_readlane_95_b32;	 // "v_readlane_b32"
      }
      break;
    }
    break;
  case 15:	 // 100 strings to match.
    switch (Name[0]) {
    default: break;
    case 'L':	 // 1 string to match.
      if (memcmp(Name.data()+1, "OOP_START_DX10", 14))
        break;
      return MCK_LOOP_95_START_95_DX10;	 // "LOOP_START_DX10"
    case 'd':	 // 26 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'a':	 // 3 strings to match.
        switch (Name[4]) {
        default: break;
        case 'd':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "d_src2_u", 8))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_ds_95_add_95_src2_95_u32;	 // "ds_add_src2_u32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_ds_95_add_95_src2_95_u64;	 // "ds_add_src2_u64"
          }
          break;
        case 'n':	 // 1 string to match.
          if (memcmp(Name.data()+5, "d_src2_b64", 10))
            break;
          return MCK_ds_95_and_95_src2_95_b64;	 // "ds_and_src2_b64"
        }
        break;
      case 'd':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ec_src2_u", 9))
          break;
        switch (Name[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[14] != '2')
            break;
          return MCK_ds_95_dec_95_src2_95_u32;	 // "ds_dec_src2_u32"
        case '6':	 // 1 string to match.
          if (Name[14] != '4')
            break;
          return MCK_ds_95_dec_95_src2_95_u64;	 // "ds_dec_src2_u64"
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "nc_src2_u", 9))
          break;
        switch (Name[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[14] != '2')
            break;
          return MCK_ds_95_inc_95_src2_95_u32;	 // "ds_inc_src2_u32"
        case '6':	 // 1 string to match.
          if (Name[14] != '4')
            break;
          return MCK_ds_95_inc_95_src2_95_u64;	 // "ds_inc_src2_u64"
        }
        break;
      case 'm':	 // 12 strings to match.
        switch (Name[4]) {
        default: break;
        case 'a':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "x_src2_", 7))
            break;
          switch (Name[12]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_max_95_src2_95_f32;	 // "ds_max_src2_f32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_max_95_src2_95_f64;	 // "ds_max_src2_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_max_95_src2_95_i32;	 // "ds_max_src2_i32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_max_95_src2_95_i64;	 // "ds_max_src2_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_max_95_src2_95_u32;	 // "ds_max_src2_u32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_max_95_src2_95_u64;	 // "ds_max_src2_u64"
            }
            break;
          }
          break;
        case 'i':	 // 6 strings to match.
          if (memcmp(Name.data()+5, "n_src2_", 7))
            break;
          switch (Name[12]) {
          default: break;
          case 'f':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_min_95_src2_95_f32;	 // "ds_min_src2_f32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_min_95_src2_95_f64;	 // "ds_min_src2_f64"
            }
            break;
          case 'i':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_min_95_src2_95_i32;	 // "ds_min_src2_i32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_min_95_src2_95_i64;	 // "ds_min_src2_i64"
            }
            break;
          case 'u':	 // 2 strings to match.
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_ds_95_min_95_src2_95_u32;	 // "ds_min_src2_u32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_ds_95_min_95_src2_95_u64;	 // "ds_min_src2_u64"
            }
            break;
          }
          break;
        }
        break;
      case 'r':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "sub_rtn_u", 9))
          break;
        switch (Name[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[14] != '2')
            break;
          return MCK_ds_95_rsub_95_rtn_95_u32;	 // "ds_rsub_rtn_u32"
        case '6':	 // 1 string to match.
          if (Name[14] != '4')
            break;
          return MCK_ds_95_rsub_95_rtn_95_u64;	 // "ds_rsub_rtn_u64"
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "ub_src2_u", 9))
          break;
        switch (Name[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[14] != '2')
            break;
          return MCK_ds_95_sub_95_src2_95_u32;	 // "ds_sub_src2_u32"
        case '6':	 // 1 string to match.
          if (Name[14] != '4')
            break;
          return MCK_ds_95_sub_95_src2_95_u64;	 // "ds_sub_src2_u64"
        }
        break;
      case 'w':	 // 1 string to match.
        if (memcmp(Name.data()+4, "rap_rtn_f32", 11))
          break;
        return MCK_ds_95_wrap_95_rtn_95_f32;	 // "ds_wrap_rtn_f32"
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "or_src2_b", 9))
          break;
        switch (Name[13]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[14] != '2')
            break;
          return MCK_ds_95_xor_95_src2_95_b32;	 // "ds_xor_src2_b32"
        case '6':	 // 1 string to match.
          if (Name[14] != '4')
            break;
          return MCK_ds_95_xor_95_src2_95_b64;	 // "ds_xor_src2_b64"
        }
        break;
      }
      break;
    case 'f':	 // 10 strings to match.
      if (memcmp(Name.data()+1, "lat_", 4))
        break;
      switch (Name[5]) {
      default: break;
      case 'a':	 // 6 strings to match.
        if (memcmp(Name.data()+6, "tomic_", 6))
          break;
        switch (Name[12]) {
        default: break;
        case 'a':	 // 2 strings to match.
          switch (Name[13]) {
          default: break;
          case 'd':	 // 1 string to match.
            if (Name[14] != 'd')
              break;
            return MCK_flat_95_atomic_95_add;	 // "flat_atomic_add"
          case 'n':	 // 1 string to match.
            if (Name[14] != 'd')
              break;
            return MCK_flat_95_atomic_95_and;	 // "flat_atomic_and"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+13, "ec", 2))
            break;
          return MCK_flat_95_atomic_95_dec;	 // "flat_atomic_dec"
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+13, "nc", 2))
            break;
          return MCK_flat_95_atomic_95_inc;	 // "flat_atomic_inc"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+13, "ub", 2))
            break;
          return MCK_flat_95_atomic_95_sub;	 // "flat_atomic_sub"
        case 'x':	 // 1 string to match.
          if (memcmp(Name.data()+13, "or", 2))
            break;
          return MCK_flat_95_atomic_95_xor;	 // "flat_atomic_xor"
        }
        break;
      case 'l':	 // 3 strings to match.
        if (memcmp(Name.data()+6, "oad_", 4))
          break;
        switch (Name[10]) {
        default: break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+11, "word", 4))
            break;
          return MCK_flat_95_load_95_dword;	 // "flat_load_dword"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+11, "byte", 4))
            break;
          return MCK_flat_95_load_95_sbyte;	 // "flat_load_sbyte"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+11, "byte", 4))
            break;
          return MCK_flat_95_load_95_ubyte;	 // "flat_load_ubyte"
        }
        break;
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+6, "tore_byte", 9))
          break;
        return MCK_flat_95_store_95_byte;	 // "flat_store_byte"
      }
      break;
    case 'i':	 // 7 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 4 strings to match.
        if (memcmp(Name.data()+7, "ather4_", 7))
          break;
        switch (Name[14]) {
        default: break;
        case 'b':	 // 1 string to match.
          return MCK_image_95_gather4_95_b;	 // "image_gather4_b"
        case 'c':	 // 1 string to match.
          return MCK_image_95_gather4_95_c;	 // "image_gather4_c"
        case 'l':	 // 1 string to match.
          return MCK_image_95_gather4_95_l;	 // "image_gather4_l"
        case 'o':	 // 1 string to match.
          return MCK_image_95_gather4_95_o;	 // "image_gather4_o"
        }
        break;
      case 's':	 // 3 strings to match.
        if (memcmp(Name.data()+7, "ample_", 6))
          break;
        switch (Name[13]) {
        default: break;
        case 'c':	 // 2 strings to match.
          switch (Name[14]) {
          default: break;
          case 'd':	 // 1 string to match.
            return MCK_image_95_sample_95_cd;	 // "image_sample_cd"
          case 'l':	 // 1 string to match.
            return MCK_image_95_sample_95_cl;	 // "image_sample_cl"
          }
          break;
        case 'l':	 // 1 string to match.
          if (Name[14] != 'z')
            break;
          return MCK_image_95_sample_95_lz;	 // "image_sample_lz"
        }
        break;
      }
      break;
    case 's':	 // 12 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'b':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "cnt", 3))
          break;
        switch (Name[6]) {
        default: break;
        case '0':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "_i32_b", 6))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_s_95_bcnt0_95_i32_95_b32;	 // "s_bcnt0_i32_b32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_s_95_bcnt0_95_i32_95_b64;	 // "s_bcnt0_i32_b64"
          }
          break;
        case '1':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "_i32_b", 6))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_s_95_bcnt1_95_i32_95_b32;	 // "s_bcnt1_i32_b32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_s_95_bcnt1_95_i32_95_b64;	 // "s_bcnt1_i32_b64"
          }
          break;
        }
        break;
      case 'c':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "branch_", 7))
          break;
        switch (Name[10]) {
        default: break;
        case 'e':	 // 1 string to match.
          if (memcmp(Name.data()+11, "xecz", 4))
            break;
          return MCK_s_95_cbranch_95_execz;	 // "s_cbranch_execz"
        case 'v':	 // 1 string to match.
          if (memcmp(Name.data()+11, "ccnz", 4))
            break;
          return MCK_s_95_cbranch_95_vccnz;	 // "s_cbranch_vccnz"
        }
        break;
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cache_wb_vol", 12))
          break;
        return MCK_s_95_dcache_95_wb_95_vol;	 // "s_dcache_wb_vol"
      case 'f':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "lbit_i32_", 9))
          break;
        switch (Name[12]) {
        default: break;
        case 'b':	 // 2 strings to match.
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_s_95_flbit_95_i32_95_b32;	 // "s_flbit_i32_b32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_s_95_flbit_95_i32_95_b64;	 // "s_flbit_i32_b64"
          }
          break;
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+13, "64", 2))
            break;
          return MCK_s_95_flbit_95_i32_95_i64;	 // "s_flbit_i32_i64"
        }
        break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+3, "oad_dwordx16", 12))
          break;
        return MCK_s_95_load_95_dwordx16;	 // "s_load_dwordx16"
      case 'm':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ov_regrd_b32", 12))
          break;
        return MCK_s_95_mov_95_regrd_95_b32;	 // "s_mov_regrd_b32"
      }
      break;
    case 'v':	 // 44 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+3, "lignbyte_b32", 12))
          break;
        return MCK_v_95_alignbyte_95_b32;	 // "v_alignbyte_b32"
      case 'c':	 // 30 strings to match.
        if (memcmp(Name.data()+3, "mp", 2))
          break;
        switch (Name[5]) {
        default: break;
        case '_':	 // 16 strings to match.
          switch (Name[6]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "lass_f", 6))
              break;
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_v_95_cmp_95_class_95_f32;	 // "v_cmp_class_f32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_v_95_cmp_95_class_95_f64;	 // "v_cmp_class_f64"
            }
            break;
          case 'f':	 // 6 strings to match.
            if (Name[7] != '_')
              break;
            switch (Name[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Name[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+10, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_f32_95_e32;	 // "v_cmp_f_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+10, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_f64_95_e32;	 // "v_cmp_f_f64_e32"
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Name[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+10, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_i32_95_e32;	 // "v_cmp_f_i32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+10, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_i64_95_e32;	 // "v_cmp_f_i64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+10, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_u32_95_e32;	 // "v_cmp_f_u32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+10, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_f_95_u64_95_e32;	 // "v_cmp_f_u64_e32"
              }
              break;
            }
            break;
          case 'o':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "_f", 2))
              break;
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+10, "2_e32", 5))
                break;
              return MCK_v_95_cmp_95_o_95_f32_95_e32;	 // "v_cmp_o_f32_e32"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+10, "4_e32", 5))
                break;
              return MCK_v_95_cmp_95_o_95_f64_95_e32;	 // "v_cmp_o_f64_e32"
            }
            break;
          case 't':	 // 4 strings to match.
            if (Name[7] != '_')
              break;
            switch (Name[8]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Name[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+10, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_t_95_i32_95_e32;	 // "v_cmp_t_i32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+10, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_t_95_i64_95_e32;	 // "v_cmp_t_i64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[9]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+10, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_t_95_u32_95_e32;	 // "v_cmp_t_u32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+10, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_t_95_u64_95_e32;	 // "v_cmp_t_u64_e32"
              }
              break;
            }
            break;
          case 'u':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "_f", 2))
              break;
            switch (Name[9]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+10, "2_e32", 5))
                break;
              return MCK_v_95_cmp_95_u_95_f32_95_e32;	 // "v_cmp_u_f32_e32"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+10, "4_e32", 5))
                break;
              return MCK_v_95_cmp_95_u_95_f64_95_e32;	 // "v_cmp_u_f64_e32"
            }
            break;
          }
          break;
        case 's':	 // 14 strings to match.
          if (memcmp(Name.data()+6, "x_", 2))
            break;
          switch (Name[8]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Name[9]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+10, "q_f", 3))
                break;
              switch (Name[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[14] != '2')
                  break;
                return MCK_v_95_cmpsx_95_neq_95_f32;	 // "v_cmpsx_neq_f32"
              case '6':	 // 1 string to match.
                if (Name[14] != '4')
                  break;
                return MCK_v_95_cmpsx_95_neq_95_f64;	 // "v_cmpsx_neq_f64"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[10]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+11, "_f", 2))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[14] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_nge_95_f32;	 // "v_cmpsx_nge_f32"
                case '6':	 // 1 string to match.
                  if (Name[14] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_nge_95_f64;	 // "v_cmpsx_nge_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+11, "_f", 2))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[14] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_ngt_95_f32;	 // "v_cmpsx_ngt_f32"
                case '6':	 // 1 string to match.
                  if (Name[14] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_ngt_95_f64;	 // "v_cmpsx_ngt_f64"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[10]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+11, "_f", 2))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[14] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_nle_95_f32;	 // "v_cmpsx_nle_f32"
                case '6':	 // 1 string to match.
                  if (Name[14] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_nle_95_f64;	 // "v_cmpsx_nle_f64"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+11, "_f", 2))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[14] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_nlg_95_f32;	 // "v_cmpsx_nlg_f32"
                case '6':	 // 1 string to match.
                  if (Name[14] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_nlg_95_f64;	 // "v_cmpsx_nlg_f64"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+11, "_f", 2))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (Name[14] != '2')
                    break;
                  return MCK_v_95_cmpsx_95_nlt_95_f32;	 // "v_cmpsx_nlt_f32"
                case '6':	 // 1 string to match.
                  if (Name[14] != '4')
                    break;
                  return MCK_v_95_cmpsx_95_nlt_95_f64;	 // "v_cmpsx_nlt_f64"
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Name.data()+9, "ru_f", 4))
              break;
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_v_95_cmpsx_95_tru_95_f32;	 // "v_cmpsx_tru_f32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_v_95_cmpsx_95_tru_95_f64;	 // "v_cmpsx_tru_f64"
            }
            break;
          }
          break;
        }
        break;
      case 'd':	 // 4 strings to match.
        if (memcmp(Name.data()+3, "iv_", 3))
          break;
        switch (Name[6]) {
        default: break;
        case 'f':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "ixup_f", 6))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_v_95_div_95_fixup_95_f32;	 // "v_div_fixup_f32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_v_95_div_95_fixup_95_f64;	 // "v_div_fixup_f64"
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+7, "cale_f", 6))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_v_95_div_95_scale_95_f32;	 // "v_div_scale_f32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_v_95_div_95_scale_95_f64;	 // "v_div_scale_f64"
          }
          break;
        }
        break;
      case 'i':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "nterp_p", 7))
          break;
        switch (Name[10]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Name.data()+11, "_f32", 4))
            break;
          return MCK_v_95_interp_95_p1_95_f32;	 // "v_interp_p1_f32"
        case '2':	 // 1 string to match.
          if (memcmp(Name.data()+11, "_f32", 4))
            break;
          return MCK_v_95_interp_95_p2_95_f32;	 // "v_interp_p2_f32"
        }
        break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+3, "og_clamp_f32", 12))
          break;
        return MCK_v_95_log_95_clamp_95_f32;	 // "v_log_clamp_f32"
      case 'r':	 // 5 strings to match.
        switch (Name[3]) {
        default: break;
        case 'c':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "p_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'c':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "lamp_f", 6))
              break;
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (Name[14] != '2')
                break;
              return MCK_v_95_rcp_95_clamp_95_f32;	 // "v_rcp_clamp_f32"
            case '6':	 // 1 string to match.
              if (Name[14] != '4')
                break;
              return MCK_v_95_rcp_95_clamp_95_f64;	 // "v_rcp_clamp_f64"
            }
            break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+7, "flag_f32", 8))
              break;
            return MCK_v_95_rcp_95_iflag_95_f32;	 // "v_rcp_iflag_f32"
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+4, "q_clamp_f", 9))
            break;
          switch (Name[13]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[14] != '2')
              break;
            return MCK_v_95_rsq_95_clamp_95_f32;	 // "v_rsq_clamp_f32"
          case '6':	 // 1 string to match.
            if (Name[14] != '4')
              break;
            return MCK_v_95_rsq_95_clamp_95_f64;	 // "v_rsq_clamp_f64"
          }
          break;
        }
        break;
      case 'w':	 // 1 string to match.
        if (memcmp(Name.data()+3, "ritelane_b32", 12))
          break;
        return MCK_v_95_writelane_95_b32;	 // "v_writelane_b32"
      }
      break;
    }
    break;
  case 16:	 // 119 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 1 string to match.
      if (memcmp(Name.data()+1, "uffer_atomic_or", 15))
        break;
      return MCK_buffer_95_atomic_95_or;	 // "buffer_atomic_or"
    case 'd':	 // 11 strings to match.
      if (memcmp(Name.data()+1, "s_", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'c':	 // 4 strings to match.
        if (memcmp(Name.data()+4, "mpst_rtn_", 9))
          break;
        switch (Name[13]) {
        default: break;
        case 'b':	 // 2 strings to match.
          switch (Name[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[15] != '2')
              break;
            return MCK_ds_95_cmpst_95_rtn_95_b32;	 // "ds_cmpst_rtn_b32"
          case '6':	 // 1 string to match.
            if (Name[15] != '4')
              break;
            return MCK_ds_95_cmpst_95_rtn_95_b64;	 // "ds_cmpst_rtn_b64"
          }
          break;
        case 'f':	 // 2 strings to match.
          switch (Name[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[15] != '2')
              break;
            return MCK_ds_95_cmpst_95_rtn_95_f32;	 // "ds_cmpst_rtn_f32"
          case '6':	 // 1 string to match.
            if (Name[15] != '4')
              break;
            return MCK_ds_95_cmpst_95_rtn_95_f64;	 // "ds_cmpst_rtn_f64"
          }
          break;
        }
        break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "skor_rtn_b", 10))
          break;
        switch (Name[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[15] != '2')
            break;
          return MCK_ds_95_mskor_95_rtn_95_b32;	 // "ds_mskor_rtn_b32"
        case '6':	 // 1 string to match.
          if (Name[15] != '4')
            break;
          return MCK_ds_95_mskor_95_rtn_95_b64;	 // "ds_mskor_rtn_b64"
        }
        break;
      case 'o':	 // 1 string to match.
        if (memcmp(Name.data()+4, "rdered_count", 12))
          break;
        return MCK_ds_95_ordered_95_count;	 // "ds_ordered_count"
      case 'r':	 // 4 strings to match.
        switch (Name[4]) {
        default: break;
        case 'e':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "ad2st64_b", 9))
            break;
          switch (Name[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[15] != '2')
              break;
            return MCK_ds_95_read2st64_95_b32;	 // "ds_read2st64_b32"
          case '6':	 // 1 string to match.
            if (Name[15] != '4')
              break;
            return MCK_ds_95_read2st64_95_b64;	 // "ds_read2st64_b64"
          }
          break;
        case 's':	 // 2 strings to match.
          if (memcmp(Name.data()+5, "ub_src2_u", 9))
            break;
          switch (Name[14]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[15] != '2')
              break;
            return MCK_ds_95_rsub_95_src2_95_u32;	 // "ds_rsub_src2_u32"
          case '6':	 // 1 string to match.
            if (Name[15] != '4')
              break;
            return MCK_ds_95_rsub_95_src2_95_u64;	 // "ds_rsub_src2_u64"
          }
          break;
        }
        break;
      }
      break;
    case 'f':	 // 12 strings to match.
      if (memcmp(Name.data()+1, "lat_", 4))
        break;
      switch (Name[5]) {
      default: break;
      case 'a':	 // 8 strings to match.
        if (memcmp(Name.data()+6, "tomic_", 6))
          break;
        switch (Name[12]) {
        default: break;
        case 'f':	 // 2 strings to match.
          if (Name[13] != 'm')
            break;
          switch (Name[14]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (Name[15] != 'x')
              break;
            return MCK_flat_95_atomic_95_fmax;	 // "flat_atomic_fmax"
          case 'i':	 // 1 string to match.
            if (Name[15] != 'n')
              break;
            return MCK_flat_95_atomic_95_fmin;	 // "flat_atomic_fmin"
          }
          break;
        case 'r':	 // 1 string to match.
          if (memcmp(Name.data()+13, "sub", 3))
            break;
          return MCK_flat_95_atomic_95_rsub;	 // "flat_atomic_rsub"
        case 's':	 // 3 strings to match.
          switch (Name[13]) {
          default: break;
          case 'm':	 // 2 strings to match.
            switch (Name[14]) {
            default: break;
            case 'a':	 // 1 string to match.
              if (Name[15] != 'x')
                break;
              return MCK_flat_95_atomic_95_smax;	 // "flat_atomic_smax"
            case 'i':	 // 1 string to match.
              if (Name[15] != 'n')
                break;
              return MCK_flat_95_atomic_95_smin;	 // "flat_atomic_smin"
            }
            break;
          case 'w':	 // 1 string to match.
            if (memcmp(Name.data()+14, "ap", 2))
              break;
            return MCK_flat_95_atomic_95_swap;	 // "flat_atomic_swap"
          }
          break;
        case 'u':	 // 2 strings to match.
          if (Name[13] != 'm')
            break;
          switch (Name[14]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (Name[15] != 'x')
              break;
            return MCK_flat_95_atomic_95_umax;	 // "flat_atomic_umax"
          case 'i':	 // 1 string to match.
            if (Name[15] != 'n')
              break;
            return MCK_flat_95_atomic_95_umin;	 // "flat_atomic_umin"
          }
          break;
        }
        break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Name.data()+6, "oad_", 4))
          break;
        switch (Name[10]) {
        default: break;
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+11, "short", 5))
            break;
          return MCK_flat_95_load_95_sshort;	 // "flat_load_sshort"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+11, "short", 5))
            break;
          return MCK_flat_95_load_95_ushort;	 // "flat_load_ushort"
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+6, "tore_", 5))
          break;
        switch (Name[11]) {
        default: break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+12, "word", 4))
            break;
          return MCK_flat_95_store_95_dword;	 // "flat_store_dword"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+12, "hort", 4))
            break;
          return MCK_flat_95_store_95_short;	 // "flat_store_short"
        }
        break;
      }
      break;
    case 'i':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 2 strings to match.
        if (memcmp(Name.data()+7, "ather4_", 7))
          break;
        switch (Name[14]) {
        default: break;
        case 'c':	 // 1 string to match.
          if (Name[15] != 'l')
            break;
          return MCK_image_95_gather4_95_cl;	 // "image_gather4_cl"
        case 'l':	 // 1 string to match.
          if (Name[15] != 'z')
            break;
          return MCK_image_95_gather4_95_lz;	 // "image_gather4_lz"
        }
        break;
      case 's':	 // 7 strings to match.
        if (memcmp(Name.data()+7, "ample_", 6))
          break;
        switch (Name[13]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_o", 2))
            break;
          return MCK_image_95_sample_95_b_95_o;	 // "image_sample_b_o"
        case 'c':	 // 4 strings to match.
          if (Name[14] != '_')
            break;
          switch (Name[15]) {
          default: break;
          case 'b':	 // 1 string to match.
            return MCK_image_95_sample_95_c_95_b;	 // "image_sample_c_b"
          case 'd':	 // 1 string to match.
            return MCK_image_95_sample_95_c_95_d;	 // "image_sample_c_d"
          case 'l':	 // 1 string to match.
            return MCK_image_95_sample_95_c_95_l;	 // "image_sample_c_l"
          case 'o':	 // 1 string to match.
            return MCK_image_95_sample_95_c_95_o;	 // "image_sample_c_o"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_o", 2))
            break;
          return MCK_image_95_sample_95_d_95_o;	 // "image_sample_d_o"
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_o", 2))
            break;
          return MCK_image_95_sample_95_l_95_o;	 // "image_sample_l_o"
        }
        break;
      }
      break;
    case 's':	 // 4 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "branch_", 7))
          break;
        switch (Name[10]) {
        default: break;
        case 'e':	 // 1 string to match.
          if (memcmp(Name.data()+11, "xecnz", 5))
            break;
          return MCK_s_95_cbranch_95_execnz;	 // "s_cbranch_execnz"
        case 'g':	 // 1 string to match.
          if (memcmp(Name.data()+11, "_fork", 5))
            break;
          return MCK_s_95_cbranch_95_g_95_fork;	 // "s_cbranch_g_fork"
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+11, "_fork", 5))
            break;
          return MCK_s_95_cbranch_95_i_95_fork;	 // "s_cbranch_i_fork"
        }
        break;
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+3, "cache_inv_vol", 13))
          break;
        return MCK_s_95_dcache_95_inv_95_vol;	 // "s_dcache_inv_vol"
      }
      break;
    case 'v':	 // 82 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 65 strings to match.
        switch (Name[3]) {
        default: break;
        case 'm':	 // 58 strings to match.
          if (Name[4] != 'p')
            break;
          switch (Name[5]) {
          default: break;
          case '_':	 // 36 strings to match.
            switch (Name[6]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (memcmp(Name.data()+7, "q_", 2))
                break;
              switch (Name[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_f32_95_e32;	 // "v_cmp_eq_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_f64_95_e32;	 // "v_cmp_eq_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_i32_95_e32;	 // "v_cmp_eq_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_i64_95_e32;	 // "v_cmp_eq_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_u32_95_e32;	 // "v_cmp_eq_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_eq_95_u64_95_e32;	 // "v_cmp_eq_u64_e32"
                }
                break;
              }
              break;
            case 'g':	 // 12 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_f32_95_e32;	 // "v_cmp_ge_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_f64_95_e32;	 // "v_cmp_ge_f64_e32"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_i32_95_e32;	 // "v_cmp_ge_i32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_i64_95_e32;	 // "v_cmp_ge_i64_e32"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_u32_95_e32;	 // "v_cmp_ge_u32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_ge_95_u64_95_e32;	 // "v_cmp_ge_u64_e32"
                  }
                  break;
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_f32_95_e32;	 // "v_cmp_gt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_f64_95_e32;	 // "v_cmp_gt_f64_e32"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_i32_95_e32;	 // "v_cmp_gt_i32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_i64_95_e32;	 // "v_cmp_gt_i64_e32"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_u32_95_e32;	 // "v_cmp_gt_u32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_gt_95_u64_95_e32;	 // "v_cmp_gt_u64_e32"
                  }
                  break;
                }
                break;
              }
              break;
            case 'l':	 // 14 strings to match.
              switch (Name[7]) {
              default: break;
              case 'e':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_f32_95_e32;	 // "v_cmp_le_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_f64_95_e32;	 // "v_cmp_le_f64_e32"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_i32_95_e32;	 // "v_cmp_le_i32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_i64_95_e32;	 // "v_cmp_le_i64_e32"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_u32_95_e32;	 // "v_cmp_le_u32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_le_95_u64_95_e32;	 // "v_cmp_le_u64_e32"
                  }
                  break;
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+8, "_f", 2))
                  break;
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_lg_95_f32_95_e32;	 // "v_cmp_lg_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_lg_95_f64_95_e32;	 // "v_cmp_lg_f64_e32"
                }
                break;
              case 't':	 // 6 strings to match.
                if (Name[8] != '_')
                  break;
                switch (Name[9]) {
                default: break;
                case 'f':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_f32_95_e32;	 // "v_cmp_lt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_f64_95_e32;	 // "v_cmp_lt_f64_e32"
                  }
                  break;
                case 'i':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_i32_95_e32;	 // "v_cmp_lt_i32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_i64_95_e32;	 // "v_cmp_lt_i64_e32"
                  }
                  break;
                case 'u':	 // 2 strings to match.
                  switch (Name[10]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "2_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_u32_95_e32;	 // "v_cmp_lt_u32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+11, "4_e32", 5))
                      break;
                    return MCK_v_95_cmp_95_lt_95_u64_95_e32;	 // "v_cmp_lt_u64_e32"
                  }
                  break;
                }
                break;
              }
              break;
            case 'n':	 // 4 strings to match.
              if (memcmp(Name.data()+7, "e_", 2))
                break;
              switch (Name[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ne_95_i32_95_e32;	 // "v_cmp_ne_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ne_95_i64_95_e32;	 // "v_cmp_ne_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ne_95_u32_95_e32;	 // "v_cmp_ne_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ne_95_u64_95_e32;	 // "v_cmp_ne_u64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 's':	 // 6 strings to match.
            if (Name[6] != '_')
              break;
            switch (Name[7]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+11, "2_e32", 5))
                  break;
                return MCK_v_95_cmps_95_f_95_f32_95_e32;	 // "v_cmps_f_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+11, "4_e32", 5))
                  break;
                return MCK_v_95_cmps_95_f_95_f64_95_e32;	 // "v_cmps_f_f64_e32"
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+11, "2_e32", 5))
                  break;
                return MCK_v_95_cmps_95_o_95_f32_95_e32;	 // "v_cmps_o_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+11, "4_e32", 5))
                  break;
                return MCK_v_95_cmps_95_o_95_f64_95_e32;	 // "v_cmps_o_f64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+11, "2_e32", 5))
                  break;
                return MCK_v_95_cmps_95_u_95_f32_95_e32;	 // "v_cmps_u_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+11, "4_e32", 5))
                  break;
                return MCK_v_95_cmps_95_u_95_f64_95_e32;	 // "v_cmps_u_f64_e32"
              }
              break;
            }
            break;
          case 'x':	 // 16 strings to match.
            if (Name[6] != '_')
              break;
            switch (Name[7]) {
            default: break;
            case 'c':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "lass_f", 6))
                break;
              switch (Name[14]) {
              default: break;
              case '3':	 // 1 string to match.
                if (Name[15] != '2')
                  break;
                return MCK_v_95_cmpx_95_class_95_f32;	 // "v_cmpx_class_f32"
              case '6':	 // 1 string to match.
                if (Name[15] != '4')
                  break;
                return MCK_v_95_cmpx_95_class_95_f64;	 // "v_cmpx_class_f64"
              }
              break;
            case 'f':	 // 6 strings to match.
              if (Name[8] != '_')
                break;
              switch (Name[9]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_f32_95_e32;	 // "v_cmpx_f_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_f64_95_e32;	 // "v_cmpx_f_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_i32_95_e32;	 // "v_cmpx_f_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_i64_95_e32;	 // "v_cmpx_f_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_u32_95_e32;	 // "v_cmpx_f_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_f_95_u64_95_e32;	 // "v_cmpx_f_u64_e32"
                }
                break;
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+11, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_o_95_f32_95_e32;	 // "v_cmpx_o_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+11, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_o_95_f64_95_e32;	 // "v_cmpx_o_f64_e32"
              }
              break;
            case 't':	 // 4 strings to match.
              if (Name[8] != '_')
                break;
              switch (Name[9]) {
              default: break;
              case 'i':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_t_95_i32_95_e32;	 // "v_cmpx_t_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_t_95_i64_95_e32;	 // "v_cmpx_t_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[10]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_t_95_u32_95_e32;	 // "v_cmpx_t_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+11, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_t_95_u64_95_e32;	 // "v_cmpx_t_u64_e32"
                }
                break;
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "_f", 2))
                break;
              switch (Name[10]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+11, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_u_95_f32_95_e32;	 // "v_cmpx_u_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+11, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_u_95_f64_95_e32;	 // "v_cmpx_u_f64_e32"
              }
              break;
            }
            break;
          }
          break;
        case 'v':	 // 7 strings to match.
          if (memcmp(Name.data()+4, "t_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'f':	 // 4 strings to match.
            if (memcmp(Name.data()+7, "32_ubyte", 8))
              break;
            switch (Name[15]) {
            default: break;
            case '0':	 // 1 string to match.
              return MCK_v_95_cvt_95_f32_95_ubyte0;	 // "v_cvt_f32_ubyte0"
            case '1':	 // 1 string to match.
              return MCK_v_95_cvt_95_f32_95_ubyte1;	 // "v_cvt_f32_ubyte1"
            case '2':	 // 1 string to match.
              return MCK_v_95_cvt_95_f32_95_ubyte2;	 // "v_cvt_f32_ubyte2"
            case '3':	 // 1 string to match.
              return MCK_v_95_cvt_95_f32_95_ubyte3;	 // "v_cvt_f32_ubyte3"
            }
            break;
          case 'o':	 // 1 string to match.
            if (memcmp(Name.data()+7, "ff_f32_i4", 9))
              break;
            return MCK_v_95_cvt_95_off_95_f32_95_i4;	 // "v_cvt_off_f32_i4"
          case 'p':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "k_", 2))
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "16_i32", 6))
                break;
              return MCK_v_95_cvt_95_pk_95_i16_95_i32;	 // "v_cvt_pk_i16_i32"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "16_u32", 6))
                break;
              return MCK_v_95_cvt_95_pk_95_u16_95_u32;	 // "v_cvt_pk_u16_u32"
            }
            break;
          }
          break;
        }
        break;
      case 'e':	 // 1 string to match.
        if (memcmp(Name.data()+3, "xp_legacy_f32", 13))
          break;
        return MCK_v_95_exp_95_legacy_95_f32;	 // "v_exp_legacy_f32"
      case 'f':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "rexp_mant_f", 11))
          break;
        switch (Name[14]) {
        default: break;
        case '1':	 // 1 string to match.
          if (Name[15] != '6')
            break;
          return MCK_v_95_frexp_95_mant_95_f16;	 // "v_frexp_mant_f16"
        case '3':	 // 1 string to match.
          if (Name[15] != '2')
            break;
          return MCK_v_95_frexp_95_mant_95_f32;	 // "v_frexp_mant_f32"
        case '6':	 // 1 string to match.
          if (Name[15] != '4')
            break;
          return MCK_v_95_frexp_95_mant_95_f64;	 // "v_frexp_mant_f64"
        }
        break;
      case 'i':	 // 1 string to match.
        if (memcmp(Name.data()+3, "nterp_mov_f32", 13))
          break;
        return MCK_v_95_interp_95_mov_95_f32;	 // "v_interp_mov_f32"
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+3, "og_legacy_f32", 13))
          break;
        return MCK_v_95_log_95_legacy_95_f32;	 // "v_log_legacy_f32"
      case 'm':	 // 7 strings to match.
        switch (Name[3]) {
        default: break;
        case 'a':	 // 3 strings to match.
          switch (Name[4]) {
          default: break;
          case 'c':	 // 1 string to match.
            if (memcmp(Name.data()+5, "_legacy_f32", 11))
              break;
            return MCK_v_95_mac_95_legacy_95_f32;	 // "v_mac_legacy_f32"
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+5, "_legacy_f32", 11))
              break;
            return MCK_v_95_mad_95_legacy_95_f32;	 // "v_mad_legacy_f32"
          case 'x':	 // 1 string to match.
            if (memcmp(Name.data()+5, "_legacy_f32", 11))
              break;
            return MCK_v_95_max_95_legacy_95_f32;	 // "v_max_legacy_f32"
          }
          break;
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+4, "n_legacy_f32", 12))
            break;
          return MCK_v_95_min_95_legacy_95_f32;	 // "v_min_legacy_f32"
        case 'u':	 // 3 strings to match.
          if (memcmp(Name.data()+4, "l_", 2))
            break;
          switch (Name[6]) {
          default: break;
          case 'h':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "i_", 2))
              break;
            switch (Name[9]) {
            default: break;
            case 'i':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32_i24", 6))
                break;
              return MCK_v_95_mul_95_hi_95_i32_95_i24;	 // "v_mul_hi_i32_i24"
            case 'u':	 // 1 string to match.
              if (memcmp(Name.data()+10, "32_u24", 6))
                break;
              return MCK_v_95_mul_95_hi_95_u32_95_u24;	 // "v_mul_hi_u32_u24"
            }
            break;
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+7, "egacy_f32", 9))
              break;
            return MCK_v_95_mul_95_legacy_95_f32;	 // "v_mul_legacy_f32"
          }
          break;
        }
        break;
      case 'q':	 // 1 string to match.
        if (memcmp(Name.data()+3, "sad_pk_u16_u8", 13))
          break;
        return MCK_v_95_qsad_95_pk_95_u16_95_u8;	 // "v_qsad_pk_u16_u8"
      case 'r':	 // 2 strings to match.
        switch (Name[3]) {
        default: break;
        case 'c':	 // 1 string to match.
          if (memcmp(Name.data()+4, "p_legacy_f32", 12))
            break;
          return MCK_v_95_rcp_95_legacy_95_f32;	 // "v_rcp_legacy_f32"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+4, "q_legacy_f32", 12))
            break;
          return MCK_v_95_rsq_95_legacy_95_f32;	 // "v_rsq_legacy_f32"
        }
        break;
      case 't':	 // 1 string to match.
        if (memcmp(Name.data()+3, "rig_preop_f64", 13))
          break;
        return MCK_v_95_trig_95_preop_95_f64;	 // "v_trig_preop_f64"
      }
      break;
    }
    break;
  case 17:	 // 104 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'a':	 // 4 strings to match.
        if (memcmp(Name.data()+8, "tomic_", 6))
          break;
        switch (Name[14]) {
        default: break;
        case 'a':	 // 2 strings to match.
          switch (Name[15]) {
          default: break;
          case 'd':	 // 1 string to match.
            if (Name[16] != 'd')
              break;
            return MCK_buffer_95_atomic_95_add;	 // "buffer_atomic_add"
          case 'n':	 // 1 string to match.
            if (Name[16] != 'd')
              break;
            return MCK_buffer_95_atomic_95_and;	 // "buffer_atomic_and"
          }
          break;
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+15, "ub", 2))
            break;
          return MCK_buffer_95_atomic_95_sub;	 // "buffer_atomic_sub"
        case 'x':	 // 1 string to match.
          if (memcmp(Name.data()+15, "or", 2))
            break;
          return MCK_buffer_95_atomic_95_xor;	 // "buffer_atomic_xor"
        }
        break;
      case 'l':	 // 3 strings to match.
        if (memcmp(Name.data()+8, "oad_", 4))
          break;
        switch (Name[12]) {
        default: break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+13, "word", 4))
            break;
          return MCK_buffer_95_load_95_dword;	 // "buffer_load_dword"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+13, "byte", 4))
            break;
          return MCK_buffer_95_load_95_sbyte;	 // "buffer_load_sbyte"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+13, "byte", 4))
            break;
          return MCK_buffer_95_load_95_ubyte;	 // "buffer_load_ubyte"
        }
        break;
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+8, "tore_byte", 9))
          break;
        return MCK_buffer_95_store_95_byte;	 // "buffer_store_byte"
      case 'w':	 // 1 string to match.
        if (memcmp(Name.data()+8, "binvl1_sc", 9))
          break;
        return MCK_buffer_95_wbinvl1_95_sc;	 // "buffer_wbinvl1_sc"
      }
      break;
    case 'd':	 // 6 strings to match.
      if (memcmp(Name.data()+1, "s_wr", 4))
        break;
      switch (Name[5]) {
      default: break;
      case 'i':	 // 4 strings to match.
        if (memcmp(Name.data()+6, "te", 2))
          break;
        switch (Name[8]) {
        default: break;
        case '2':	 // 2 strings to match.
          if (memcmp(Name.data()+9, "st64_b", 6))
            break;
          switch (Name[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[16] != '2')
              break;
            return MCK_ds_95_write2st64_95_b32;	 // "ds_write2st64_b32"
          case '6':	 // 1 string to match.
            if (Name[16] != '4')
              break;
            return MCK_ds_95_write2st64_95_b64;	 // "ds_write2st64_b64"
          }
          break;
        case '_':	 // 2 strings to match.
          if (memcmp(Name.data()+9, "src2_b", 6))
            break;
          switch (Name[15]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[16] != '2')
              break;
            return MCK_ds_95_write_95_src2_95_b32;	 // "ds_write_src2_b32"
          case '6':	 // 1 string to match.
            if (Name[16] != '4')
              break;
            return MCK_ds_95_write_95_src2_95_b64;	 // "ds_write_src2_b64"
          }
          break;
        }
        break;
      case 'x':	 // 2 strings to match.
        if (memcmp(Name.data()+6, "chg_rtn_b", 9))
          break;
        switch (Name[15]) {
        default: break;
        case '3':	 // 1 string to match.
          if (Name[16] != '2')
            break;
          return MCK_ds_95_wrxchg_95_rtn_95_b32;	 // "ds_wrxchg_rtn_b32"
        case '6':	 // 1 string to match.
          if (Name[16] != '4')
            break;
          return MCK_ds_95_wrxchg_95_rtn_95_b64;	 // "ds_wrxchg_rtn_b64"
        }
        break;
      }
      break;
    case 'f':	 // 4 strings to match.
      if (memcmp(Name.data()+1, "lat_", 4))
        break;
      switch (Name[5]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+6, "tomic_or_x2", 11))
          break;
        return MCK_flat_95_atomic_95_or_95_x2;	 // "flat_atomic_or_x2"
      case 'l':	 // 3 strings to match.
        if (memcmp(Name.data()+6, "oad_dwordx", 10))
          break;
        switch (Name[16]) {
        default: break;
        case '2':	 // 1 string to match.
          return MCK_flat_95_load_95_dwordx2;	 // "flat_load_dwordx2"
        case '3':	 // 1 string to match.
          return MCK_flat_95_load_95_dwordx3;	 // "flat_load_dwordx3"
        case '4':	 // 1 string to match.
          return MCK_flat_95_load_95_dwordx4;	 // "flat_load_dwordx4"
        }
        break;
      }
      break;
    case 'i':	 // 14 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 6 strings to match.
        switch (Name[7]) {
        default: break;
        case 'a':	 // 5 strings to match.
          if (memcmp(Name.data()+8, "ther4_", 6))
            break;
          switch (Name[14]) {
          default: break;
          case 'b':	 // 1 string to match.
            if (memcmp(Name.data()+15, "_o", 2))
              break;
            return MCK_image_95_gather4_95_b_95_o;	 // "image_gather4_b_o"
          case 'c':	 // 3 strings to match.
            if (Name[15] != '_')
              break;
            switch (Name[16]) {
            default: break;
            case 'b':	 // 1 string to match.
              return MCK_image_95_gather4_95_c_95_b;	 // "image_gather4_c_b"
            case 'l':	 // 1 string to match.
              return MCK_image_95_gather4_95_c_95_l;	 // "image_gather4_c_l"
            case 'o':	 // 1 string to match.
              return MCK_image_95_gather4_95_c_95_o;	 // "image_gather4_c_o"
            }
            break;
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+15, "_o", 2))
              break;
            return MCK_image_95_gather4_95_l_95_o;	 // "image_gather4_l_o"
          }
          break;
        case 'e':	 // 1 string to match.
          if (memcmp(Name.data()+8, "t_resinfo", 9))
            break;
          return MCK_image_95_get_95_resinfo;	 // "image_get_resinfo"
        }
        break;
      case 's':	 // 8 strings to match.
        if (memcmp(Name.data()+7, "ample_", 6))
          break;
        switch (Name[13]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_cl", 3))
            break;
          return MCK_image_95_sample_95_b_95_cl;	 // "image_sample_b_cl"
        case 'c':	 // 5 strings to match.
          switch (Name[14]) {
          default: break;
          case '_':	 // 3 strings to match.
            switch (Name[15]) {
            default: break;
            case 'c':	 // 2 strings to match.
              switch (Name[16]) {
              default: break;
              case 'd':	 // 1 string to match.
                return MCK_image_95_sample_95_c_95_cd;	 // "image_sample_c_cd"
              case 'l':	 // 1 string to match.
                return MCK_image_95_sample_95_c_95_cl;	 // "image_sample_c_cl"
              }
              break;
            case 'l':	 // 1 string to match.
              if (Name[16] != 'z')
                break;
              return MCK_image_95_sample_95_c_95_lz;	 // "image_sample_c_lz"
            }
            break;
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+15, "_o", 2))
              break;
            return MCK_image_95_sample_95_cd_95_o;	 // "image_sample_cd_o"
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+15, "_o", 2))
              break;
            return MCK_image_95_sample_95_cl_95_o;	 // "image_sample_cl_o"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_cl", 3))
            break;
          return MCK_image_95_sample_95_d_95_cl;	 // "image_sample_d_cl"
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+14, "z_o", 3))
            break;
          return MCK_image_95_sample_95_lz_95_o;	 // "image_sample_lz_o"
        }
        break;
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_or_saveexec_b64", 16))
        break;
      return MCK_s_95_or_95_saveexec_95_b64;	 // "s_or_saveexec_b64"
    case 'v':	 // 70 strings to match.
      if (memcmp(Name.data()+1, "_c", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'm':	 // 68 strings to match.
        if (Name[4] != 'p')
          break;
        switch (Name[5]) {
        default: break;
        case '_':	 // 14 strings to match.
          switch (Name[6]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Name[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "q_f", 3))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmp_95_neq_95_f32_95_e32;	 // "v_cmp_neq_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmp_95_neq_95_f64_95_e32;	 // "v_cmp_neq_f64_e32"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nge_95_f32_95_e32;	 // "v_cmp_nge_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nge_95_f64_95_e32;	 // "v_cmp_nge_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ngt_95_f32_95_e32;	 // "v_cmp_ngt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_ngt_95_f64_95_e32;	 // "v_cmp_ngt_f64_e32"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nle_95_f32_95_e32;	 // "v_cmp_nle_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nle_95_f64_95_e32;	 // "v_cmp_nle_f64_e32"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nlg_95_f32_95_e32;	 // "v_cmp_nlg_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nlg_95_f64_95_e32;	 // "v_cmp_nlg_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nlt_95_f32_95_e32;	 // "v_cmp_nlt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmp_95_nlt_95_f64_95_e32;	 // "v_cmp_nlt_f64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Name.data()+7, "ru_f", 4))
              break;
            switch (Name[11]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+12, "2_e32", 5))
                break;
              return MCK_v_95_cmp_95_tru_95_f32_95_e32;	 // "v_cmp_tru_f32_e32"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+12, "4_e32", 5))
                break;
              return MCK_v_95_cmp_95_tru_95_f64_95_e32;	 // "v_cmp_tru_f64_e32"
            }
            break;
          }
          break;
        case 's':	 // 18 strings to match.
          switch (Name[6]) {
          default: break;
          case '_':	 // 12 strings to match.
            switch (Name[7]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "q_f", 3))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmps_95_eq_95_f32_95_e32;	 // "v_cmps_eq_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmps_95_eq_95_f64_95_e32;	 // "v_cmps_eq_f64_e32"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_ge_95_f32_95_e32;	 // "v_cmps_ge_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_ge_95_f64_95_e32;	 // "v_cmps_ge_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_gt_95_f32_95_e32;	 // "v_cmps_gt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_gt_95_f64_95_e32;	 // "v_cmps_gt_f64_e32"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_le_95_f32_95_e32;	 // "v_cmps_le_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_le_95_f64_95_e32;	 // "v_cmps_le_f64_e32"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_lg_95_f32_95_e32;	 // "v_cmps_lg_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_lg_95_f64_95_e32;	 // "v_cmps_lg_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "_f", 2))
                  break;
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_lt_95_f32_95_e32;	 // "v_cmps_lt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_lt_95_f64_95_e32;	 // "v_cmps_lt_f64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 'x':	 // 6 strings to match.
            if (Name[7] != '_')
              break;
            switch (Name[8]) {
            default: break;
            case 'f':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "_f", 2))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_f_95_f32_95_e32;	 // "v_cmpsx_f_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_f_95_f64_95_e32;	 // "v_cmpsx_f_f64_e32"
              }
              break;
            case 'o':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "_f", 2))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_o_95_f32_95_e32;	 // "v_cmpsx_o_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_o_95_f64_95_e32;	 // "v_cmpsx_o_f64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "_f", 2))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_u_95_f32_95_e32;	 // "v_cmpsx_u_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_u_95_f64_95_e32;	 // "v_cmpsx_u_f64_e32"
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 36 strings to match.
          if (Name[6] != '_')
            break;
          switch (Name[7]) {
          default: break;
          case 'e':	 // 6 strings to match.
            if (memcmp(Name.data()+8, "q_", 2))
              break;
            switch (Name[10]) {
            default: break;
            case 'f':	 // 2 strings to match.
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_f32_95_e32;	 // "v_cmpx_eq_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_f64_95_e32;	 // "v_cmpx_eq_f64_e32"
              }
              break;
            case 'i':	 // 2 strings to match.
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_i32_95_e32;	 // "v_cmpx_eq_i32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_i64_95_e32;	 // "v_cmpx_eq_i64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_u32_95_e32;	 // "v_cmpx_eq_u32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_eq_95_u64_95_e32;	 // "v_cmpx_eq_u64_e32"
              }
              break;
            }
            break;
          case 'g':	 // 12 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_f32_95_e32;	 // "v_cmpx_ge_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_f64_95_e32;	 // "v_cmpx_ge_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_i32_95_e32;	 // "v_cmpx_ge_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_i64_95_e32;	 // "v_cmpx_ge_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_u32_95_e32;	 // "v_cmpx_ge_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ge_95_u64_95_e32;	 // "v_cmpx_ge_u64_e32"
                }
                break;
              }
              break;
            case 't':	 // 6 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_f32_95_e32;	 // "v_cmpx_gt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_f64_95_e32;	 // "v_cmpx_gt_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_i32_95_e32;	 // "v_cmpx_gt_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_i64_95_e32;	 // "v_cmpx_gt_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_u32_95_e32;	 // "v_cmpx_gt_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_gt_95_u64_95_e32;	 // "v_cmpx_gt_u64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 'l':	 // 14 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 6 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_f32_95_e32;	 // "v_cmpx_le_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_f64_95_e32;	 // "v_cmpx_le_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_i32_95_e32;	 // "v_cmpx_le_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_i64_95_e32;	 // "v_cmpx_le_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_u32_95_e32;	 // "v_cmpx_le_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_le_95_u64_95_e32;	 // "v_cmpx_le_u64_e32"
                }
                break;
              }
              break;
            case 'g':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "_f", 2))
                break;
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_lg_95_f32_95_e32;	 // "v_cmpx_lg_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_lg_95_f64_95_e32;	 // "v_cmpx_lg_f64_e32"
              }
              break;
            case 't':	 // 6 strings to match.
              if (Name[9] != '_')
                break;
              switch (Name[10]) {
              default: break;
              case 'f':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_f32_95_e32;	 // "v_cmpx_lt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_f64_95_e32;	 // "v_cmpx_lt_f64_e32"
                }
                break;
              case 'i':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_i32_95_e32;	 // "v_cmpx_lt_i32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_i64_95_e32;	 // "v_cmpx_lt_i64_e32"
                }
                break;
              case 'u':	 // 2 strings to match.
                switch (Name[11]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_u32_95_e32;	 // "v_cmpx_lt_u32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+12, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_lt_95_u64_95_e32;	 // "v_cmpx_lt_u64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 'n':	 // 4 strings to match.
            if (memcmp(Name.data()+8, "e_", 2))
              break;
            switch (Name[10]) {
            default: break;
            case 'i':	 // 2 strings to match.
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_ne_95_i32_95_e32;	 // "v_cmpx_ne_i32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_ne_95_i64_95_e32;	 // "v_cmpx_ne_i64_e32"
              }
              break;
            case 'u':	 // 2 strings to match.
              switch (Name[11]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+12, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_ne_95_u32_95_e32;	 // "v_cmpx_ne_u32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+12, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_ne_95_u64_95_e32;	 // "v_cmpx_ne_u64_e32"
              }
              break;
            }
            break;
          }
          break;
        }
        break;
      case 'v':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "t_", 2))
          break;
        switch (Name[6]) {
        default: break;
        case 'f':	 // 1 string to match.
          if (memcmp(Name.data()+7, "lr_i32_f32", 10))
            break;
          return MCK_v_95_cvt_95_flr_95_i32_95_f32;	 // "v_cvt_flr_i32_f32"
        case 'r':	 // 1 string to match.
          if (memcmp(Name.data()+7, "pi_i32_f32", 10))
            break;
          return MCK_v_95_cvt_95_rpi_95_i32_95_f32;	 // "v_cvt_rpi_i32_f32"
        }
        break;
      }
      break;
    }
    break;
  case 18:	 // 76 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 10 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'a':	 // 5 strings to match.
        if (memcmp(Name.data()+8, "tomic_", 6))
          break;
        switch (Name[14]) {
        default: break;
        case 's':	 // 3 strings to match.
          switch (Name[15]) {
          default: break;
          case 'm':	 // 2 strings to match.
            switch (Name[16]) {
            default: break;
            case 'a':	 // 1 string to match.
              if (Name[17] != 'x')
                break;
              return MCK_buffer_95_atomic_95_smax;	 // "buffer_atomic_smax"
            case 'i':	 // 1 string to match.
              if (Name[17] != 'n')
                break;
              return MCK_buffer_95_atomic_95_smin;	 // "buffer_atomic_smin"
            }
            break;
          case 'w':	 // 1 string to match.
            if (memcmp(Name.data()+16, "ap", 2))
              break;
            return MCK_buffer_95_atomic_95_swap;	 // "buffer_atomic_swap"
          }
          break;
        case 'u':	 // 2 strings to match.
          if (Name[15] != 'm')
            break;
          switch (Name[16]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (Name[17] != 'x')
              break;
            return MCK_buffer_95_atomic_95_umax;	 // "buffer_atomic_umax"
          case 'i':	 // 1 string to match.
            if (Name[17] != 'n')
              break;
            return MCK_buffer_95_atomic_95_umin;	 // "buffer_atomic_umin"
          }
          break;
        }
        break;
      case 'l':	 // 2 strings to match.
        if (memcmp(Name.data()+8, "oad_", 4))
          break;
        switch (Name[12]) {
        default: break;
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+13, "short", 5))
            break;
          return MCK_buffer_95_load_95_sshort;	 // "buffer_load_sshort"
        case 'u':	 // 1 string to match.
          if (memcmp(Name.data()+13, "short", 5))
            break;
          return MCK_buffer_95_load_95_ushort;	 // "buffer_load_ushort"
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+8, "tore_", 5))
          break;
        switch (Name[13]) {
        default: break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+14, "word", 4))
            break;
          return MCK_buffer_95_store_95_dword;	 // "buffer_store_dword"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+14, "hort", 4))
            break;
          return MCK_buffer_95_store_95_short;	 // "buffer_store_short"
        }
        break;
      case 'w':	 // 1 string to match.
        if (memcmp(Name.data()+8, "binvl1_vol", 10))
          break;
        return MCK_buffer_95_wbinvl1_95_vol;	 // "buffer_wbinvl1_vol"
      }
      break;
    case 'd':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "s_wrxchg2_rtn_b", 15))
        break;
      switch (Name[16]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Name[17] != '2')
          break;
        return MCK_ds_95_wrxchg2_95_rtn_95_b32;	 // "ds_wrxchg2_rtn_b32"
      case '6':	 // 1 string to match.
        if (Name[17] != '4')
          break;
        return MCK_ds_95_wrxchg2_95_rtn_95_b64;	 // "ds_wrxchg2_rtn_b64"
      }
      break;
    case 'f':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "lat_", 4))
        break;
      switch (Name[5]) {
      default: break;
      case 'a':	 // 6 strings to match.
        if (memcmp(Name.data()+6, "tomic_", 6))
          break;
        switch (Name[12]) {
        default: break;
        case 'a':	 // 2 strings to match.
          switch (Name[13]) {
          default: break;
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+14, "d_x2", 4))
              break;
            return MCK_flat_95_atomic_95_add_95_x2;	 // "flat_atomic_add_x2"
          case 'n':	 // 1 string to match.
            if (memcmp(Name.data()+14, "d_x2", 4))
              break;
            return MCK_flat_95_atomic_95_and_95_x2;	 // "flat_atomic_and_x2"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+13, "ec_x2", 5))
            break;
          return MCK_flat_95_atomic_95_dec_95_x2;	 // "flat_atomic_dec_x2"
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+13, "nc_x2", 5))
            break;
          return MCK_flat_95_atomic_95_inc_95_x2;	 // "flat_atomic_inc_x2"
        case 's':	 // 1 string to match.
          if (memcmp(Name.data()+13, "ub_x2", 5))
            break;
          return MCK_flat_95_atomic_95_sub_95_x2;	 // "flat_atomic_sub_x2"
        case 'x':	 // 1 string to match.
          if (memcmp(Name.data()+13, "or_x2", 5))
            break;
          return MCK_flat_95_atomic_95_xor_95_x2;	 // "flat_atomic_xor_x2"
        }
        break;
      case 's':	 // 3 strings to match.
        if (memcmp(Name.data()+6, "tore_dwordx", 11))
          break;
        switch (Name[17]) {
        default: break;
        case '2':	 // 1 string to match.
          return MCK_flat_95_store_95_dwordx2;	 // "flat_store_dwordx2"
        case '3':	 // 1 string to match.
          return MCK_flat_95_store_95_dwordx3;	 // "flat_store_dwordx3"
        case '4':	 // 1 string to match.
          return MCK_flat_95_store_95_dwordx4;	 // "flat_store_dwordx4"
        }
        break;
      }
      break;
    case 'i':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 5 strings to match.
        if (memcmp(Name.data()+7, "ather4_", 7))
          break;
        switch (Name[14]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+15, "_cl", 3))
            break;
          return MCK_image_95_gather4_95_b_95_cl;	 // "image_gather4_b_cl"
        case 'c':	 // 3 strings to match.
          switch (Name[15]) {
          default: break;
          case '_':	 // 2 strings to match.
            switch (Name[16]) {
            default: break;
            case 'c':	 // 1 string to match.
              if (Name[17] != 'l')
                break;
              return MCK_image_95_gather4_95_c_95_cl;	 // "image_gather4_c_cl"
            case 'l':	 // 1 string to match.
              if (Name[17] != 'z')
                break;
              return MCK_image_95_gather4_95_c_95_lz;	 // "image_gather4_c_lz"
            }
            break;
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_o", 2))
              break;
            return MCK_image_95_gather4_95_cl_95_o;	 // "image_gather4_cl_o"
          }
          break;
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+15, "z_o", 3))
            break;
          return MCK_image_95_gather4_95_lz_95_o;	 // "image_gather4_lz_o"
        }
        break;
      case 's':	 // 4 strings to match.
        if (memcmp(Name.data()+7, "ample_c", 7))
          break;
        switch (Name[14]) {
        default: break;
        case '_':	 // 3 strings to match.
          switch (Name[15]) {
          default: break;
          case 'b':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_o", 2))
              break;
            return MCK_image_95_sample_95_c_95_b_95_o;	 // "image_sample_c_b_o"
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_o", 2))
              break;
            return MCK_image_95_sample_95_c_95_d_95_o;	 // "image_sample_c_d_o"
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_o", 2))
              break;
            return MCK_image_95_sample_95_c_95_l_95_o;	 // "image_sample_c_l_o"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+15, "_cl", 3))
            break;
          return MCK_image_95_sample_95_cd_95_cl;	 // "image_sample_cd_cl"
        }
        break;
      }
      break;
    case 's':	 // 4 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'a':	 // 1 string to match.
        if (memcmp(Name.data()+3, "nd_saveexec_b64", 15))
          break;
        return MCK_s_95_and_95_saveexec_95_b64;	 // "s_and_saveexec_b64"
      case 'n':	 // 1 string to match.
        if (memcmp(Name.data()+3, "or_saveexec_b64", 15))
          break;
        return MCK_s_95_nor_95_saveexec_95_b64;	 // "s_nor_saveexec_b64"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+3, "etreg_imm32_b32", 15))
          break;
        return MCK_s_95_setreg_95_imm32_95_b32;	 // "s_setreg_imm32_b32"
      case 'x':	 // 1 string to match.
        if (memcmp(Name.data()+3, "or_saveexec_b64", 15))
          break;
        return MCK_s_95_xor_95_saveexec_95_b64;	 // "s_xor_saveexec_b64"
      }
      break;
    case 'v':	 // 42 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 40 strings to match.
        if (memcmp(Name.data()+3, "mp", 2))
          break;
        switch (Name[5]) {
        default: break;
        case 's':	 // 26 strings to match.
          switch (Name[6]) {
          default: break;
          case '_':	 // 14 strings to match.
            switch (Name[7]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Name[8]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+9, "q_f", 3))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_neq_95_f32_95_e32;	 // "v_cmps_neq_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmps_95_neq_95_f64_95_e32;	 // "v_cmps_neq_f64_e32"
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Name[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "2_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nge_95_f32_95_e32;	 // "v_cmps_nge_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "4_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nge_95_f64_95_e32;	 // "v_cmps_nge_f64_e32"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "2_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_ngt_95_f32_95_e32;	 // "v_cmps_ngt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "4_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_ngt_95_f64_95_e32;	 // "v_cmps_ngt_f64_e32"
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Name[9]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "2_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nle_95_f32_95_e32;	 // "v_cmps_nle_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "4_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nle_95_f64_95_e32;	 // "v_cmps_nle_f64_e32"
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "2_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nlg_95_f32_95_e32;	 // "v_cmps_nlg_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "4_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nlg_95_f64_95_e32;	 // "v_cmps_nlg_f64_e32"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+10, "_f", 2))
                    break;
                  switch (Name[12]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "2_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nlt_95_f32_95_e32;	 // "v_cmps_nlt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+13, "4_e32", 5))
                      break;
                    return MCK_v_95_cmps_95_nlt_95_f64_95_e32;	 // "v_cmps_nlt_f64_e32"
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Name.data()+8, "ru_f", 4))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+13, "2_e32", 5))
                  break;
                return MCK_v_95_cmps_95_tru_95_f32_95_e32;	 // "v_cmps_tru_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+13, "4_e32", 5))
                  break;
                return MCK_v_95_cmps_95_tru_95_f64_95_e32;	 // "v_cmps_tru_f64_e32"
              }
              break;
            }
            break;
          case 'x':	 // 12 strings to match.
            if (Name[7] != '_')
              break;
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "q_f", 3))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+13, "2_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_eq_95_f32_95_e32;	 // "v_cmpsx_eq_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+13, "4_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_eq_95_f64_95_e32;	 // "v_cmpsx_eq_f64_e32"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_ge_95_f32_95_e32;	 // "v_cmpsx_ge_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_ge_95_f64_95_e32;	 // "v_cmpsx_ge_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_gt_95_f32_95_e32;	 // "v_cmpsx_gt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_gt_95_f64_95_e32;	 // "v_cmpsx_gt_f64_e32"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_le_95_f32_95_e32;	 // "v_cmpsx_le_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_le_95_f64_95_e32;	 // "v_cmpsx_le_f64_e32"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_lg_95_f32_95_e32;	 // "v_cmpsx_lg_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_lg_95_f64_95_e32;	 // "v_cmpsx_lg_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_lt_95_f32_95_e32;	 // "v_cmpsx_lt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_lt_95_f64_95_e32;	 // "v_cmpsx_lt_f64_e32"
                }
                break;
              }
              break;
            }
            break;
          }
          break;
        case 'x':	 // 14 strings to match.
          if (Name[6] != '_')
            break;
          switch (Name[7]) {
          default: break;
          case 'n':	 // 12 strings to match.
            switch (Name[8]) {
            default: break;
            case 'e':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "q_f", 3))
                break;
              switch (Name[12]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+13, "2_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_neq_95_f32_95_e32;	 // "v_cmpx_neq_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+13, "4_e32", 5))
                  break;
                return MCK_v_95_cmpx_95_neq_95_f64_95_e32;	 // "v_cmpx_neq_f64_e32"
              }
              break;
            case 'g':	 // 4 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nge_95_f32_95_e32;	 // "v_cmpx_nge_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nge_95_f64_95_e32;	 // "v_cmpx_nge_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ngt_95_f32_95_e32;	 // "v_cmpx_ngt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_ngt_95_f64_95_e32;	 // "v_cmpx_ngt_f64_e32"
                }
                break;
              }
              break;
            case 'l':	 // 6 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nle_95_f32_95_e32;	 // "v_cmpx_nle_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nle_95_f64_95_e32;	 // "v_cmpx_nle_f64_e32"
                }
                break;
              case 'g':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nlg_95_f32_95_e32;	 // "v_cmpx_nlg_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nlg_95_f64_95_e32;	 // "v_cmpx_nlg_f64_e32"
                }
                break;
              case 't':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "_f", 2))
                  break;
                switch (Name[12]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nlt_95_f32_95_e32;	 // "v_cmpx_nlt_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+13, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpx_95_nlt_95_f64_95_e32;	 // "v_cmpx_nlt_f64_e32"
                }
                break;
              }
              break;
            }
            break;
          case 't':	 // 2 strings to match.
            if (memcmp(Name.data()+8, "ru_f", 4))
              break;
            switch (Name[12]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+13, "2_e32", 5))
                break;
              return MCK_v_95_cmpx_95_tru_95_f32_95_e32;	 // "v_cmpx_tru_f32_e32"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+13, "4_e32", 5))
                break;
              return MCK_v_95_cmpx_95_tru_95_f64_95_e32;	 // "v_cmpx_tru_f64_e32"
            }
            break;
          }
          break;
        }
        break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Name.data()+3, "bcnt_", 5))
          break;
        switch (Name[8]) {
        default: break;
        case 'h':	 // 1 string to match.
          if (memcmp(Name.data()+9, "i_u32_b32", 9))
            break;
          return MCK_v_95_mbcnt_95_hi_95_u32_95_b32;	 // "v_mbcnt_hi_u32_b32"
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+9, "o_u32_b32", 9))
            break;
          return MCK_v_95_mbcnt_95_lo_95_u32_95_b32;	 // "v_mbcnt_lo_u32_b32"
        }
        break;
      }
      break;
    }
    break;
  case 19:	 // 45 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "uffer_load_dwordx", 17))
        break;
      switch (Name[18]) {
      default: break;
      case '2':	 // 1 string to match.
        return MCK_buffer_95_load_95_dwordx2;	 // "buffer_load_dwordx2"
      case '4':	 // 1 string to match.
        return MCK_buffer_95_load_95_dwordx4;	 // "buffer_load_dwordx4"
      }
      break;
    case 'f':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "lat_atomic_", 11))
        break;
      switch (Name[12]) {
      default: break;
      case 'c':	 // 1 string to match.
        if (memcmp(Name.data()+13, "mpswap", 6))
          break;
        return MCK_flat_95_atomic_95_cmpswap;	 // "flat_atomic_cmpswap"
      case 'f':	 // 2 strings to match.
        if (Name[13] != 'm')
          break;
        switch (Name[14]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+15, "x_x2", 4))
            break;
          return MCK_flat_95_atomic_95_fmax_95_x2;	 // "flat_atomic_fmax_x2"
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+15, "n_x2", 4))
            break;
          return MCK_flat_95_atomic_95_fmin_95_x2;	 // "flat_atomic_fmin_x2"
        }
        break;
      case 'r':	 // 1 string to match.
        if (memcmp(Name.data()+13, "sub_x2", 6))
          break;
        return MCK_flat_95_atomic_95_rsub_95_x2;	 // "flat_atomic_rsub_x2"
      case 's':	 // 3 strings to match.
        switch (Name[13]) {
        default: break;
        case 'm':	 // 2 strings to match.
          switch (Name[14]) {
          default: break;
          case 'a':	 // 1 string to match.
            if (memcmp(Name.data()+15, "x_x2", 4))
              break;
            return MCK_flat_95_atomic_95_smax_95_x2;	 // "flat_atomic_smax_x2"
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+15, "n_x2", 4))
              break;
            return MCK_flat_95_atomic_95_smin_95_x2;	 // "flat_atomic_smin_x2"
          }
          break;
        case 'w':	 // 1 string to match.
          if (memcmp(Name.data()+14, "ap_x2", 5))
            break;
          return MCK_flat_95_atomic_95_swap_95_x2;	 // "flat_atomic_swap_x2"
        }
        break;
      case 'u':	 // 2 strings to match.
        if (Name[13] != 'm')
          break;
        switch (Name[14]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+15, "x_x2", 4))
            break;
          return MCK_flat_95_atomic_95_umax_95_x2;	 // "flat_atomic_umax_x2"
        case 'i':	 // 1 string to match.
          if (memcmp(Name.data()+15, "n_x2", 4))
            break;
          return MCK_flat_95_atomic_95_umin_95_x2;	 // "flat_atomic_umin_x2"
        }
        break;
      }
      break;
    case 'i':	 // 9 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 2 strings to match.
        if (memcmp(Name.data()+7, "ather4_c_", 9))
          break;
        switch (Name[16]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+17, "_o", 2))
            break;
          return MCK_image_95_gather4_95_c_95_b_95_o;	 // "image_gather4_c_b_o"
        case 'l':	 // 1 string to match.
          if (memcmp(Name.data()+17, "_o", 2))
            break;
          return MCK_image_95_gather4_95_c_95_l_95_o;	 // "image_gather4_c_l_o"
        }
        break;
      case 's':	 // 7 strings to match.
        if (memcmp(Name.data()+7, "ample_", 6))
          break;
        switch (Name[13]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_cl_o", 5))
            break;
          return MCK_image_95_sample_95_b_95_cl_95_o;	 // "image_sample_b_cl_o"
        case 'c':	 // 5 strings to match.
          if (Name[14] != '_')
            break;
          switch (Name[15]) {
          default: break;
          case 'b':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_cl", 3))
              break;
            return MCK_image_95_sample_95_c_95_b_95_cl;	 // "image_sample_c_b_cl"
          case 'c':	 // 2 strings to match.
            switch (Name[16]) {
            default: break;
            case 'd':	 // 1 string to match.
              if (memcmp(Name.data()+17, "_o", 2))
                break;
              return MCK_image_95_sample_95_c_95_cd_95_o;	 // "image_sample_c_cd_o"
            case 'l':	 // 1 string to match.
              if (memcmp(Name.data()+17, "_o", 2))
                break;
              return MCK_image_95_sample_95_c_95_cl_95_o;	 // "image_sample_c_cl_o"
            }
            break;
          case 'd':	 // 1 string to match.
            if (memcmp(Name.data()+16, "_cl", 3))
              break;
            return MCK_image_95_sample_95_c_95_d_95_cl;	 // "image_sample_c_d_cl"
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+16, "z_o", 3))
              break;
            return MCK_image_95_sample_95_c_95_lz_95_o;	 // "image_sample_c_lz_o"
          }
          break;
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+14, "_cl_o", 5))
            break;
          return MCK_image_95_sample_95_d_95_cl_95_o;	 // "image_sample_d_cl_o"
        }
        break;
      }
      break;
    case 's':	 // 4 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'b':	 // 1 string to match.
        if (memcmp(Name.data()+3, "uffer_load_dword", 16))
          break;
        return MCK_s_95_buffer_95_load_95_dword;	 // "s_buffer_load_dword"
      case 'n':	 // 1 string to match.
        if (memcmp(Name.data()+3, "and_saveexec_b64", 16))
          break;
        return MCK_s_95_nand_95_saveexec_95_b64;	 // "s_nand_saveexec_b64"
      case 'o':	 // 1 string to match.
        if (memcmp(Name.data()+3, "rn2_saveexec_b64", 16))
          break;
        return MCK_s_95_orn2_95_saveexec_95_b64;	 // "s_orn2_saveexec_b64"
      case 'x':	 // 1 string to match.
        if (memcmp(Name.data()+3, "nor_saveexec_b64", 16))
          break;
        return MCK_s_95_xnor_95_saveexec_95_b64;	 // "s_xnor_saveexec_b64"
      }
      break;
    case 'v':	 // 21 strings to match.
      if (Name[1] != '_')
        break;
      switch (Name[2]) {
      default: break;
      case 'c':	 // 17 strings to match.
        switch (Name[3]) {
        default: break;
        case 'm':	 // 16 strings to match.
          if (Name[4] != 'p')
            break;
          switch (Name[5]) {
          default: break;
          case '_':	 // 2 strings to match.
            if (memcmp(Name.data()+6, "class_f", 7))
              break;
            switch (Name[13]) {
            default: break;
            case '3':	 // 1 string to match.
              if (memcmp(Name.data()+14, "2_e32", 5))
                break;
              return MCK_v_95_cmp_95_class_95_f32_95_e32;	 // "v_cmp_class_f32_e32"
            case '6':	 // 1 string to match.
              if (memcmp(Name.data()+14, "4_e32", 5))
                break;
              return MCK_v_95_cmp_95_class_95_f64_95_e32;	 // "v_cmp_class_f64_e32"
            }
            break;
          case 's':	 // 14 strings to match.
            if (memcmp(Name.data()+6, "x_", 2))
              break;
            switch (Name[8]) {
            default: break;
            case 'n':	 // 12 strings to match.
              switch (Name[9]) {
              default: break;
              case 'e':	 // 2 strings to match.
                if (memcmp(Name.data()+10, "q_f", 3))
                  break;
                switch (Name[13]) {
                default: break;
                case '3':	 // 1 string to match.
                  if (memcmp(Name.data()+14, "2_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_neq_95_f32_95_e32;	 // "v_cmpsx_neq_f32_e32"
                case '6':	 // 1 string to match.
                  if (memcmp(Name.data()+14, "4_e32", 5))
                    break;
                  return MCK_v_95_cmpsx_95_neq_95_f64_95_e32;	 // "v_cmpsx_neq_f64_e32"
                }
                break;
              case 'g':	 // 4 strings to match.
                switch (Name[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+11, "_f", 2))
                    break;
                  switch (Name[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "2_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nge_95_f32_95_e32;	 // "v_cmpsx_nge_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "4_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nge_95_f64_95_e32;	 // "v_cmpsx_nge_f64_e32"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+11, "_f", 2))
                    break;
                  switch (Name[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "2_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_ngt_95_f32_95_e32;	 // "v_cmpsx_ngt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "4_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_ngt_95_f64_95_e32;	 // "v_cmpsx_ngt_f64_e32"
                  }
                  break;
                }
                break;
              case 'l':	 // 6 strings to match.
                switch (Name[10]) {
                default: break;
                case 'e':	 // 2 strings to match.
                  if (memcmp(Name.data()+11, "_f", 2))
                    break;
                  switch (Name[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "2_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nle_95_f32_95_e32;	 // "v_cmpsx_nle_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "4_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nle_95_f64_95_e32;	 // "v_cmpsx_nle_f64_e32"
                  }
                  break;
                case 'g':	 // 2 strings to match.
                  if (memcmp(Name.data()+11, "_f", 2))
                    break;
                  switch (Name[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "2_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nlg_95_f32_95_e32;	 // "v_cmpsx_nlg_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "4_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nlg_95_f64_95_e32;	 // "v_cmpsx_nlg_f64_e32"
                  }
                  break;
                case 't':	 // 2 strings to match.
                  if (memcmp(Name.data()+11, "_f", 2))
                    break;
                  switch (Name[13]) {
                  default: break;
                  case '3':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "2_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nlt_95_f32_95_e32;	 // "v_cmpsx_nlt_f32_e32"
                  case '6':	 // 1 string to match.
                    if (memcmp(Name.data()+14, "4_e32", 5))
                      break;
                    return MCK_v_95_cmpsx_95_nlt_95_f64_95_e32;	 // "v_cmpsx_nlt_f64_e32"
                  }
                  break;
                }
                break;
              }
              break;
            case 't':	 // 2 strings to match.
              if (memcmp(Name.data()+9, "ru_f", 4))
                break;
              switch (Name[13]) {
              default: break;
              case '3':	 // 1 string to match.
                if (memcmp(Name.data()+14, "2_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_tru_95_f32_95_e32;	 // "v_cmpsx_tru_f32_e32"
              case '6':	 // 1 string to match.
                if (memcmp(Name.data()+14, "4_e32", 5))
                  break;
                return MCK_v_95_cmpsx_95_tru_95_f64_95_e32;	 // "v_cmpsx_tru_f64_e32"
              }
              break;
            }
            break;
          }
          break;
        case 'v':	 // 1 string to match.
          if (memcmp(Name.data()+4, "t_pkrtz_f16_f32", 15))
            break;
          return MCK_v_95_cvt_95_pkrtz_95_f16_95_f32;	 // "v_cvt_pkrtz_f16_f32"
        }
        break;
      case 'f':	 // 3 strings to match.
        if (memcmp(Name.data()+3, "rexp_exp_i", 10))
          break;
        switch (Name[13]) {
        default: break;
        case '1':	 // 1 string to match.
          if (memcmp(Name.data()+14, "6_f16", 5))
            break;
          return MCK_v_95_frexp_95_exp_95_i16_95_f16;	 // "v_frexp_exp_i16_f16"
        case '3':	 // 2 strings to match.
          if (memcmp(Name.data()+14, "2_f", 3))
            break;
          switch (Name[17]) {
          default: break;
          case '3':	 // 1 string to match.
            if (Name[18] != '2')
              break;
            return MCK_v_95_frexp_95_exp_95_i32_95_f32;	 // "v_frexp_exp_i32_f32"
          case '6':	 // 1 string to match.
            if (Name[18] != '4')
              break;
            return MCK_v_95_frexp_95_exp_95_i32_95_f64;	 // "v_frexp_exp_i32_f64"
          }
          break;
        }
        break;
      case 'r':	 // 1 string to match.
        if (memcmp(Name.data()+3, "eadfirstlane_b32", 16))
          break;
        return MCK_v_95_readfirstlane_95_b32;	 // "v_readfirstlane_b32"
      }
      break;
    }
    break;
  case 20:	 // 16 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 3 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+8, "oad_format_x", 12))
          break;
        return MCK_buffer_95_load_95_format_95_x;	 // "buffer_load_format_x"
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+8, "tore_dwordx", 11))
          break;
        switch (Name[19]) {
        default: break;
        case '2':	 // 1 string to match.
          return MCK_buffer_95_store_95_dwordx2;	 // "buffer_store_dwordx2"
        case '4':	 // 1 string to match.
          return MCK_buffer_95_store_95_dwordx4;	 // "buffer_store_dwordx4"
        }
        break;
      }
      break;
    case 'f':	 // 1 string to match.
      if (memcmp(Name.data()+1, "lat_atomic_fcmpswap", 19))
        break;
      return MCK_flat_95_atomic_95_fcmpswap;	 // "flat_atomic_fcmpswap"
    case 'i':	 // 6 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 4 strings to match.
        if (memcmp(Name.data()+7, "ather4_", 7))
          break;
        switch (Name[14]) {
        default: break;
        case 'b':	 // 1 string to match.
          if (memcmp(Name.data()+15, "_cl_o", 5))
            break;
          return MCK_image_95_gather4_95_b_95_cl_95_o;	 // "image_gather4_b_cl_o"
        case 'c':	 // 3 strings to match.
          if (Name[15] != '_')
            break;
          switch (Name[16]) {
          default: break;
          case 'b':	 // 1 string to match.
            if (memcmp(Name.data()+17, "_cl", 3))
              break;
            return MCK_image_95_gather4_95_c_95_b_95_cl;	 // "image_gather4_c_b_cl"
          case 'c':	 // 1 string to match.
            if (memcmp(Name.data()+17, "l_o", 3))
              break;
            return MCK_image_95_gather4_95_c_95_cl_95_o;	 // "image_gather4_c_cl_o"
          case 'l':	 // 1 string to match.
            if (memcmp(Name.data()+17, "z_o", 3))
              break;
            return MCK_image_95_gather4_95_c_95_lz_95_o;	 // "image_gather4_c_lz_o"
          }
          break;
        }
        break;
      case 's':	 // 2 strings to match.
        if (memcmp(Name.data()+7, "ample_c", 7))
          break;
        switch (Name[14]) {
        default: break;
        case '_':	 // 1 string to match.
          if (memcmp(Name.data()+15, "cd_cl", 5))
            break;
          return MCK_image_95_sample_95_c_95_cd_95_cl;	 // "image_sample_c_cd_cl"
        case 'd':	 // 1 string to match.
          if (memcmp(Name.data()+15, "_cl_o", 5))
            break;
          return MCK_image_95_sample_95_cd_95_cl_95_o;	 // "image_sample_cd_cl_o"
        }
        break;
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_andn2_saveexec_b64", 19))
        break;
      return MCK_s_95_andn2_95_saveexec_95_b64;	 // "s_andn2_saveexec_b64"
    case 'v':	 // 5 strings to match.
      if (memcmp(Name.data()+1, "_c", 2))
        break;
      switch (Name[3]) {
      default: break;
      case 'm':	 // 2 strings to match.
        if (memcmp(Name.data()+4, "px_class_f", 10))
          break;
        switch (Name[14]) {
        default: break;
        case '3':	 // 1 string to match.
          if (memcmp(Name.data()+15, "2_e32", 5))
            break;
          return MCK_v_95_cmpx_95_class_95_f32_95_e32;	 // "v_cmpx_class_f32_e32"
        case '6':	 // 1 string to match.
          if (memcmp(Name.data()+15, "4_e32", 5))
            break;
          return MCK_v_95_cmpx_95_class_95_f64_95_e32;	 // "v_cmpx_class_f64_e32"
        }
        break;
      case 'v':	 // 3 strings to match.
        if (memcmp(Name.data()+4, "t_pk", 4))
          break;
        switch (Name[8]) {
        default: break;
        case 'a':	 // 1 string to match.
          if (memcmp(Name.data()+9, "ccum_u8_f32", 11))
            break;
          return MCK_v_95_cvt_95_pkaccum_95_u8_95_f32;	 // "v_cvt_pkaccum_u8_f32"
        case 'n':	 // 2 strings to match.
          if (memcmp(Name.data()+9, "orm_", 4))
            break;
          switch (Name[13]) {
          default: break;
          case 'i':	 // 1 string to match.
            if (memcmp(Name.data()+14, "16_f32", 6))
              break;
            return MCK_v_95_cvt_95_pknorm_95_i16_95_f32;	 // "v_cvt_pknorm_i16_f32"
          case 'u':	 // 1 string to match.
            if (memcmp(Name.data()+14, "16_f32", 6))
              break;
            return MCK_v_95_cvt_95_pknorm_95_u16_95_f32;	 // "v_cvt_pknorm_u16_f32"
          }
          break;
        }
        break;
      }
      break;
    }
    break;
  case 21:	 // 7 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+8, "oad_format_xy", 13))
          break;
        return MCK_buffer_95_load_95_format_95_xy;	 // "buffer_load_format_xy"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+8, "tore_format_x", 13))
          break;
        return MCK_buffer_95_store_95_format_95_x;	 // "buffer_store_format_x"
      }
      break;
    case 'i':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "mage_sample_c_", 14))
        break;
      switch (Name[15]) {
      default: break;
      case 'b':	 // 1 string to match.
        if (memcmp(Name.data()+16, "_cl_o", 5))
          break;
        return MCK_image_95_sample_95_c_95_b_95_cl_95_o;	 // "image_sample_c_b_cl_o"
      case 'd':	 // 1 string to match.
        if (memcmp(Name.data()+16, "_cl_o", 5))
          break;
        return MCK_image_95_sample_95_c_95_d_95_cl_95_o;	 // "image_sample_c_d_cl_o"
      }
      break;
    case 's':	 // 3 strings to match.
      if (memcmp(Name.data()+1, "_buffer_load_dwordx", 19))
        break;
      switch (Name[20]) {
      default: break;
      case '2':	 // 1 string to match.
        return MCK_s_95_buffer_95_load_95_dwordx2;	 // "s_buffer_load_dwordx2"
      case '4':	 // 1 string to match.
        return MCK_s_95_buffer_95_load_95_dwordx4;	 // "s_buffer_load_dwordx4"
      case '8':	 // 1 string to match.
        return MCK_s_95_buffer_95_load_95_dwordx8;	 // "s_buffer_load_dwordx8"
      }
      break;
    }
    break;
  case 22:	 // 9 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+8, "oad_format_xyz", 14))
          break;
        return MCK_buffer_95_load_95_format_95_xyz;	 // "buffer_load_format_xyz"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+8, "tore_format_xy", 14))
          break;
        return MCK_buffer_95_store_95_format_95_xy;	 // "buffer_store_format_xy"
      }
      break;
    case 'd':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "s_wrxchg2st64_rtn_b", 19))
        break;
      switch (Name[20]) {
      default: break;
      case '3':	 // 1 string to match.
        if (Name[21] != '2')
          break;
        return MCK_ds_95_wrxchg2st64_95_rtn_95_b32;	 // "ds_wrxchg2st64_rtn_b32"
      case '6':	 // 1 string to match.
        if (Name[21] != '4')
          break;
        return MCK_ds_95_wrxchg2st64_95_rtn_95_b64;	 // "ds_wrxchg2st64_rtn_b64"
      }
      break;
    case 'f':	 // 1 string to match.
      if (memcmp(Name.data()+1, "lat_atomic_cmpswap_x2", 21))
        break;
      return MCK_flat_95_atomic_95_cmpswap_95_x2;	 // "flat_atomic_cmpswap_x2"
    case 'i':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "mage_", 5))
        break;
      switch (Name[6]) {
      default: break;
      case 'g':	 // 1 string to match.
        if (memcmp(Name.data()+7, "ather4_c_b_cl_o", 15))
          break;
        return MCK_image_95_gather4_95_c_95_b_95_cl_95_o;	 // "image_gather4_c_b_cl_o"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+7, "ample_c_cd_cl_o", 15))
          break;
        return MCK_image_95_sample_95_c_95_cd_95_cl_95_o;	 // "image_sample_c_cd_cl_o"
      }
      break;
    case 's':	 // 1 string to match.
      if (memcmp(Name.data()+1, "_buffer_load_dwordx16", 21))
        break;
      return MCK_s_95_buffer_95_load_95_dwordx16;	 // "s_buffer_load_dwordx16"
    case 't':	 // 1 string to match.
      if (memcmp(Name.data()+1, "buffer_store_format_x", 21))
        break;
      return MCK_tbuffer_95_store_95_format_95_x;	 // "tbuffer_store_format_x"
    }
    break;
  case 23:	 // 4 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "uffer_", 6))
        break;
      switch (Name[7]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+8, "oad_format_xyzw", 15))
          break;
        return MCK_buffer_95_load_95_format_95_xyzw;	 // "buffer_load_format_xyzw"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+8, "tore_format_xyz", 15))
          break;
        return MCK_buffer_95_store_95_format_95_xyz;	 // "buffer_store_format_xyz"
      }
      break;
    case 'f':	 // 1 string to match.
      if (memcmp(Name.data()+1, "lat_atomic_fcmpswap_x2", 22))
        break;
      return MCK_flat_95_atomic_95_fcmpswap_95_x2;	 // "flat_atomic_fcmpswap_x2"
    case 't':	 // 1 string to match.
      if (memcmp(Name.data()+1, "buffer_store_format_xy", 22))
        break;
      return MCK_tbuffer_95_store_95_format_95_xy;	 // "tbuffer_store_format_xy"
    }
    break;
  case 24:	 // 3 strings to match.
    switch (Name[0]) {
    default: break;
    case 'b':	 // 1 string to match.
      if (memcmp(Name.data()+1, "uffer_store_format_xyzw", 23))
        break;
      return MCK_buffer_95_store_95_format_95_xyzw;	 // "buffer_store_format_xyzw"
    case 't':	 // 2 strings to match.
      if (memcmp(Name.data()+1, "buffer_", 7))
        break;
      switch (Name[8]) {
      default: break;
      case 'l':	 // 1 string to match.
        if (memcmp(Name.data()+9, "oad_format_xyzw", 15))
          break;
        return MCK_tbuffer_95_load_95_format_95_xyzw;	 // "tbuffer_load_format_xyzw"
      case 's':	 // 1 string to match.
        if (memcmp(Name.data()+9, "tore_format_xyz", 15))
          break;
        return MCK_tbuffer_95_store_95_format_95_xyz;	 // "tbuffer_store_format_xyz"
      }
      break;
    }
    break;
  case 25:	 // 1 string to match.
    if (memcmp(Name.data()+0, "tbuffer_store_format_xyzw", 25))
      break;
    return MCK_tbuffer_95_store_95_format_95_xyzw;	 // "tbuffer_store_format_xyzw"
  }
  return InvalidMatchClass;
}

/// isSubclass - Compute whether \p A is a subclass of \p B.
static bool isSubclass(MatchClassKind A, MatchClassKind B) {
  if (A == B)
    return true;

  switch (A) {
  default:
    return false;

  case MCK_R600_TReg32_X:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_Y:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_Z:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32_W:
    switch (B) {
    default: return false;
    case MCK_R600_TReg32: return true;
    case MCK_R600_Reg32: return true;
    }

  case MCK_R600_TReg32:
    return B == MCK_R600_Reg32;

  case MCK_R600_Addr:
    return B == MCK_R600_Reg32;

  case MCK_Reg12:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg14:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg15:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg16:
    return B == MCK_R600_Reg128Vertical;

  case MCK_Reg18:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg19:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg20:
    return B == MCK_R600_Reg64Vertical;

  case MCK_Reg21:
    return B == MCK_R600_Reg64Vertical;

  case MCK_R600_KC0_X:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0_Y:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0_Z:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0_W:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC0: return true;
    }

  case MCK_R600_KC0:
    return B == MCK_R600_Reg32;

  case MCK_R600_KC1_X:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC1: return true;
    }

  case MCK_R600_KC1_Y:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC1: return true;
    }

  case MCK_R600_KC1_Z:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC1: return true;
    }

  case MCK_R600_KC1_W:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_KC1: return true;
    }

  case MCK_R600_KC1:
    return B == MCK_R600_Reg32;

  case MCK_R600_ArrayBase:
    return B == MCK_R600_Reg32;

  case MCK_Reg34:
    switch (B) {
    default: return false;
    case MCK_R600_Reg32: return true;
    case MCK_R600_LDS_SRC_REG: return true;
    }

  case MCK_M0:
    switch (B) {
    default: return false;
    case MCK_SReg_32: return true;
    case MCK_VS_32: return true;
    }

  case MCK_SGPR_32:
    switch (B) {
    default: return false;
    case MCK_SReg_32: return true;
    case MCK_VS_32: return true;
    }

  case MCK_SReg_32:
    return B == MCK_VS_32;

  case MCK_VGPR_32:
    return B == MCK_VS_32;

  case MCK_VCC:
    switch (B) {
    default: return false;
    case MCK_SReg_64: return true;
    case MCK_VS_64: return true;
    }

  case MCK_SReg_64:
    return B == MCK_VS_64;

  case MCK_SGPR_64:
    switch (B) {
    default: return false;
    case MCK_SReg_64: return true;
    case MCK_VS_64: return true;
    }

  case MCK_VReg_64:
    return B == MCK_VS_64;
  }
}

static unsigned validateOperandClass(MCParsedAsmOperand &GOp, MatchClassKind Kind) {
  AMDGPUOperand &Operand = (AMDGPUOperand&)GOp;
  if (Kind == InvalidMatchClass)
    return MCTargetAsmParser::Match_InvalidOperand;

  if (Operand.isToken())
    return isSubclass(matchTokenString(Operand.getToken()), Kind) ?
             MCTargetAsmParser::Match_Success :
             MCTargetAsmParser::Match_InvalidOperand;

  // 'Clamp' class
  if (Kind == MCK_Clamp) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffset1' class
  if (Kind == MCK_DSOffset1) {
    if (Operand.isDSOffset01())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffsetparseDSOffsetOptional' class
  if (Kind == MCK_DSOffsetparseDSOffsetOptional) {
    if (Operand.isDSOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'DSOffsetparseDSOptionalOps' class
  if (Kind == MCK_DSOffsetparseDSOptionalOps) {
    if (Operand.isDSOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GDSparseDSOff01OptionalOps' class
  if (Kind == MCK_GDSparseDSOff01OptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GDSparseDSOptionalOps' class
  if (Kind == MCK_GDSparseDSOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GLCparseFlatOptionalOps' class
  if (Kind == MCK_GLCparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'GLCparseMubufOptionalOps' class
  if (Kind == MCK_GLCparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'Imm' class
  if (Kind == MCK_Imm) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'RegWithInputMods' class
  if (Kind == MCK_RegWithInputMods) {
    if (Operand.isRegWithInputMods())
      return MCTargetAsmParser::Match_Success;
  }

  // 'MubufOffset' class
  if (Kind == MCK_MubufOffset) {
    if (Operand.isMubufOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'OMod' class
  if (Kind == MCK_OMod) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseFlatAtomicOptionalOps' class
  if (Kind == MCK_SLCparseFlatAtomicOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseFlatOptionalOps' class
  if (Kind == MCK_SLCparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SLCparseMubufOptionalOps' class
  if (Kind == MCK_SLCparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SMRDOffsetisSMRDLiteralOffset' class
  if (Kind == MCK_SMRDOffsetisSMRDLiteralOffset) {
    if (Operand.isSMRDLiteralOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SMRDOffsetisSMRDOffset' class
  if (Kind == MCK_SMRDOffsetisSMRDOffset) {
    if (Operand.isSMRDOffset())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SWaitCnt' class
  if (Kind == MCK_SWaitCnt) {
    if (Operand.isSWaitCnt())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SoppBrTarget' class
  if (Kind == MCK_SoppBrTarget) {
    if (Operand.isSoppBrTarget())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseFlatAtomicOptionalOps' class
  if (Kind == MCK_TFEparseFlatAtomicOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseFlatOptionalOps' class
  if (Kind == MCK_TFEparseFlatOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'TFEparseMubufOptionalOps' class
  if (Kind == MCK_TFEparseMubufOptionalOps) {
    if (Operand.isImm())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SSrc32' class
  if (Kind == MCK_SSrc32) {
    if (Operand.isSSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SSrc64' class
  if (Kind == MCK_SSrc64) {
    if (Operand.isSSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SCSrc32' class
  if (Kind == MCK_SCSrc32) {
    if (Operand.isSCSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VSrc32' class
  if (Kind == MCK_VSrc32) {
    if (Operand.isVSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VSrc64' class
  if (Kind == MCK_VSrc64) {
    if (Operand.isVSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VCSrc32' class
  if (Kind == MCK_VCSrc32) {
    if (Operand.isVCSrc32())
      return MCTargetAsmParser::Match_Success;
  }

  // 'VCSrc64' class
  if (Kind == MCK_VCSrc64) {
    if (Operand.isVCSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  // 'SCSrc64' class
  if (Kind == MCK_SCSrc64) {
    if (Operand.isSCSrc64())
      return MCTargetAsmParser::Match_Success;
  }

  if (Operand.isReg()) {
    MatchClassKind OpKind;
    switch (Operand.getReg()) {
    default: OpKind = InvalidMatchClass; break;
    case AMDGPU::T0_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T0_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T0_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T0_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T1_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T1_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T1_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T1_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T2_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T2_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T2_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T2_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T3_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T3_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T3_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T3_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T4_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T4_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T4_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T4_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T5_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T5_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T5_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T5_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T6_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T6_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T6_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T6_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T7_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T7_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T7_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T7_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T8_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T8_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T8_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T8_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T9_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T9_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T9_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T9_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T10_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T10_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T10_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T10_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T11_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T11_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T11_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T11_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T12_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T12_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T12_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T12_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T13_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T13_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T13_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T13_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T14_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T14_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T14_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T14_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T15_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T15_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T15_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T15_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T16_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T16_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T16_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T16_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T17_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T17_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T17_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T17_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T18_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T18_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T18_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T18_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T19_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T19_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T19_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T19_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T20_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T20_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T20_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T20_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T21_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T21_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T21_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T21_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T22_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T22_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T22_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T22_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T23_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T23_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T23_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T23_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T24_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T24_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T24_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T24_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T25_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T25_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T25_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T25_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T26_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T26_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T26_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T26_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T27_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T27_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T27_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T27_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T28_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T28_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T28_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T28_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T29_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T29_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T29_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T29_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T30_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T30_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T30_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T30_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T31_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T31_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T31_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T31_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T32_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T32_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T32_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T32_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T33_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T33_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T33_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T33_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T34_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T34_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T34_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T34_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T35_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T35_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T35_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T35_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T36_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T36_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T36_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T36_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T37_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T37_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T37_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T37_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T38_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T38_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T38_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T38_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T39_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T39_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T39_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T39_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T40_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T40_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T40_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T40_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T41_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T41_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T41_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T41_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T42_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T42_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T42_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T42_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T43_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T43_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T43_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T43_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T44_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T44_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T44_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T44_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T45_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T45_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T45_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T45_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T46_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T46_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T46_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T46_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T47_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T47_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T47_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T47_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T48_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T48_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T48_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T48_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T49_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T49_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T49_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T49_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T50_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T50_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T50_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T50_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T51_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T51_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T51_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T51_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T52_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T52_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T52_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T52_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T53_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T53_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T53_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T53_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T54_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T54_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T54_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T54_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T55_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T55_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T55_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T55_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T56_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T56_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T56_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T56_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T57_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T57_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T57_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T57_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T58_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T58_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T58_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T58_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T59_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T59_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T59_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T59_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T60_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T60_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T60_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T60_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T61_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T61_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T61_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T61_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T62_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T62_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T62_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T62_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T63_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T63_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T63_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T63_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T64_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T64_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T64_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T64_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T65_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T65_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T65_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T65_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T66_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T66_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T66_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T66_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T67_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T67_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T67_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T67_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T68_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T68_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T68_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T68_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T69_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T69_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T69_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T69_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T70_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T70_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T70_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T70_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T71_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T71_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T71_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T71_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T72_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T72_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T72_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T72_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T73_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T73_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T73_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T73_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T74_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T74_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T74_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T74_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T75_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T75_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T75_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T75_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T76_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T76_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T76_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T76_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T77_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T77_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T77_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T77_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T78_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T78_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T78_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T78_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T79_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T79_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T79_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T79_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T80_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T80_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T80_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T80_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T81_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T81_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T81_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T81_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T82_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T82_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T82_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T82_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T83_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T83_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T83_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T83_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T84_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T84_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T84_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T84_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T85_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T85_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T85_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T85_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T86_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T86_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T86_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T86_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T87_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T87_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T87_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T87_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T88_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T88_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T88_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T88_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T89_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T89_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T89_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T89_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T90_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T90_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T90_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T90_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T91_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T91_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T91_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T91_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T92_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T92_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T92_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T92_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T93_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T93_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T93_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T93_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T94_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T94_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T94_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T94_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T95_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T95_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T95_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T95_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T96_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T96_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T96_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T96_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T97_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T97_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T97_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T97_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T98_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T98_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T98_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T98_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T99_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T99_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T99_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T99_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T100_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T100_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T100_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T100_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T101_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T101_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T101_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T101_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T102_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T102_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T102_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T102_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T103_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T103_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T103_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T103_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T104_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T104_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T104_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T104_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T105_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T105_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T105_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T105_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T106_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T106_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T106_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T106_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T107_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T107_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T107_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T107_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T108_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T108_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T108_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T108_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T109_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T109_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T109_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T109_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T110_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T110_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T110_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T110_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T111_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T111_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T111_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T111_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T112_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T112_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T112_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T112_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T113_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T113_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T113_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T113_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T114_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T114_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T114_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T114_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T115_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T115_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T115_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T115_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T116_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T116_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T116_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T116_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T117_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T117_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T117_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T117_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T118_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T118_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T118_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T118_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T119_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T119_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T119_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T119_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T120_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T120_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T120_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T120_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T121_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T121_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T121_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T121_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T122_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T122_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T122_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T122_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T123_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T123_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T123_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T123_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T124_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T124_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T124_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T124_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T125_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T125_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T125_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T125_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T126_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T126_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T126_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T126_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::T127_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::T127_Y: OpKind = MCK_R600_TReg32_Y; break;
    case AMDGPU::T127_Z: OpKind = MCK_R600_TReg32_Z; break;
    case AMDGPU::T127_W: OpKind = MCK_R600_TReg32_W; break;
    case AMDGPU::Addr0_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr0_Y: OpKind = MCK_R600_Addr_Y; break;
    case AMDGPU::Addr0_Z: OpKind = MCK_R600_Addr_Z; break;
    case AMDGPU::Addr0_W: OpKind = MCK_R600_Addr_W; break;
    case AMDGPU::Addr1_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr2_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr3_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr4_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr5_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr6_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr7_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr8_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr9_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr10_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr11_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr12_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr13_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr14_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr15_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr16_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr17_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr18_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr19_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr20_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr21_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr22_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr23_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr24_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr25_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr26_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr27_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr28_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr29_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr30_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr31_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr32_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr33_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr34_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr35_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr36_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr37_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr38_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr39_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr40_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr41_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr42_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr43_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr44_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr45_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr46_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr47_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr48_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr49_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr50_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr51_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr52_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr53_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr54_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr55_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr56_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr57_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr58_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr59_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr60_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr61_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr62_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr63_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr64_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr65_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr66_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr67_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr68_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr69_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr70_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr71_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr72_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr73_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr74_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr75_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr76_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr77_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr78_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr79_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr80_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr81_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr82_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr83_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr84_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr85_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr86_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr87_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr88_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr89_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr90_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr91_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr92_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr93_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr94_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr95_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr96_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr97_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr98_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr99_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr100_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr101_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr102_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr103_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr104_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr105_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr106_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr107_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr108_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr109_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr110_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr111_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr112_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr113_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr114_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr115_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr116_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr117_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr118_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr119_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr120_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr121_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr122_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr123_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr124_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr125_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr126_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::Addr127_X: OpKind = MCK_R600_Addr; break;
    case AMDGPU::T0_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T1_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T2_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T3_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T4_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T5_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T6_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T7_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T8_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T9_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T10_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T11_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T12_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T13_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T14_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T15_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T16_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T17_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T18_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T19_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T20_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T21_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T22_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T23_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T24_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T25_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T26_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T27_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T28_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T29_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T30_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T31_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T32_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T33_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T34_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T35_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T36_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T37_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T38_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T39_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T40_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T41_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T42_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T43_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T44_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T45_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T46_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T47_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T48_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T49_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T50_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T51_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T52_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T53_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T54_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T55_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T56_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T57_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T58_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T59_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T60_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T61_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T62_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T63_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T64_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T65_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T66_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T67_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T68_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T69_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T70_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T71_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T72_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T73_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T74_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T75_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T76_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T77_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T78_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T79_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T80_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T81_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T82_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T83_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T84_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T85_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T86_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T87_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T88_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T89_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T90_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T91_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T92_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T93_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T94_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T95_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T96_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T97_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T98_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T99_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T100_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T101_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T102_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T103_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T104_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T105_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T106_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T107_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T108_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T109_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T110_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T111_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T112_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T113_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T114_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T115_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T116_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T117_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T118_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T119_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T120_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T121_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T122_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T123_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T124_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T125_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T126_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T127_XYZW: OpKind = MCK_R600_Reg128; break;
    case AMDGPU::T0_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T1_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T2_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T3_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T4_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T5_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T6_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T7_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T8_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T9_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T10_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T11_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T12_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T13_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T14_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T15_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T16_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T17_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T18_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T19_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T20_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T21_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T22_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T23_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T24_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T25_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T26_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T27_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T28_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T29_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T30_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T31_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T32_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T33_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T34_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T35_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T36_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T37_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T38_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T39_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T40_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T41_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T42_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T43_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T44_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T45_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T46_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T47_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T48_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T49_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T50_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T51_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T52_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T53_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T54_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T55_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T56_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T57_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T58_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T59_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T60_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T61_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T62_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::T63_XY: OpKind = MCK_R600_Reg64; break;
    case AMDGPU::V0123_X: OpKind = MCK_Reg12; break;
    case AMDGPU::V0123_Y: OpKind = MCK_Reg14; break;
    case AMDGPU::V0123_Z: OpKind = MCK_Reg15; break;
    case AMDGPU::V0123_W: OpKind = MCK_Reg16; break;
    case AMDGPU::V01_X: OpKind = MCK_Reg18; break;
    case AMDGPU::V01_Y: OpKind = MCK_Reg19; break;
    case AMDGPU::V01_Z: OpKind = MCK_Reg20; break;
    case AMDGPU::V01_W: OpKind = MCK_Reg21; break;
    case AMDGPU::V23_X: OpKind = MCK_Reg18; break;
    case AMDGPU::V23_Y: OpKind = MCK_Reg19; break;
    case AMDGPU::V23_Z: OpKind = MCK_Reg20; break;
    case AMDGPU::V23_W: OpKind = MCK_Reg21; break;
    case AMDGPU::KC0_159_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_159_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_159_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_159_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_158_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_158_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_158_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_158_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_157_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_157_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_157_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_157_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_156_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_156_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_156_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_156_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_155_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_155_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_155_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_155_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_154_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_154_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_154_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_154_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_153_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_153_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_153_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_153_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_152_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_152_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_152_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_152_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_151_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_151_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_151_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_151_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_150_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_150_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_150_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_150_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_149_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_149_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_149_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_149_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_148_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_148_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_148_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_148_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_147_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_147_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_147_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_147_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_146_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_146_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_146_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_146_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_145_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_145_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_145_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_145_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_144_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_144_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_144_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_144_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_143_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_143_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_143_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_143_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_142_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_142_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_142_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_142_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_141_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_141_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_141_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_141_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_140_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_140_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_140_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_140_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_139_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_139_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_139_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_139_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_138_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_138_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_138_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_138_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_137_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_137_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_137_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_137_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_136_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_136_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_136_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_136_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_135_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_135_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_135_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_135_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_134_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_134_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_134_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_134_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_133_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_133_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_133_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_133_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_132_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_132_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_132_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_132_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_131_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_131_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_131_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_131_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_130_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_130_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_130_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_130_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_129_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_129_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_129_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_129_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC0_128_X: OpKind = MCK_R600_KC0_X; break;
    case AMDGPU::KC0_128_Y: OpKind = MCK_R600_KC0_Y; break;
    case AMDGPU::KC0_128_Z: OpKind = MCK_R600_KC0_Z; break;
    case AMDGPU::KC0_128_W: OpKind = MCK_R600_KC0_W; break;
    case AMDGPU::KC1_191_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_191_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_191_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_191_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_190_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_190_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_190_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_190_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_189_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_189_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_189_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_189_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_188_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_188_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_188_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_188_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_187_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_187_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_187_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_187_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_186_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_186_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_186_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_186_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_185_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_185_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_185_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_185_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_184_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_184_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_184_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_184_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_183_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_183_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_183_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_183_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_182_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_182_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_182_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_182_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_181_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_181_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_181_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_181_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_180_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_180_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_180_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_180_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_179_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_179_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_179_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_179_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_178_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_178_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_178_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_178_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_177_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_177_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_177_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_177_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_176_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_176_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_176_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_176_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_175_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_175_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_175_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_175_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_174_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_174_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_174_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_174_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_173_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_173_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_173_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_173_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_172_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_172_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_172_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_172_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_171_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_171_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_171_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_171_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_170_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_170_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_170_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_170_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_169_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_169_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_169_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_169_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_168_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_168_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_168_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_168_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_167_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_167_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_167_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_167_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_166_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_166_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_166_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_166_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_165_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_165_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_165_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_165_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_164_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_164_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_164_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_164_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_163_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_163_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_163_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_163_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_162_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_162_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_162_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_162_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_161_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_161_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_161_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_161_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::KC1_160_X: OpKind = MCK_R600_KC1_X; break;
    case AMDGPU::KC1_160_Y: OpKind = MCK_R600_KC1_Y; break;
    case AMDGPU::KC1_160_Z: OpKind = MCK_R600_KC1_Z; break;
    case AMDGPU::KC1_160_W: OpKind = MCK_R600_KC1_W; break;
    case AMDGPU::ArrayBase448: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase449: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase450: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase451: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase452: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase453: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase454: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase455: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase456: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase457: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase458: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase459: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase460: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase461: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase462: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase463: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase464: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase465: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase466: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase467: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase468: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase469: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase470: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase471: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase472: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase473: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase474: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase475: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase476: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase477: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase478: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase479: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::ArrayBase480: OpKind = MCK_R600_ArrayBase; break;
    case AMDGPU::OQA: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::OQB: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::OQAP: OpKind = MCK_Reg34; break;
    case AMDGPU::OQBP: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::LDS_DIRECT_A: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::LDS_DIRECT_B: OpKind = MCK_R600_LDS_SRC_REG; break;
    case AMDGPU::ZERO: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ONE: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::NEG_ONE: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ONE_INT: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::HALF: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::NEG_HALF: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ALU_LITERAL_X: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::PV_X: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::PREDICATE_BIT: OpKind = MCK_R600_Predicate_Bit; break;
    case AMDGPU::PRED_SEL_OFF: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::PRED_SEL_ZERO: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::PRED_SEL_ONE: OpKind = MCK_R600_Predicate; break;
    case AMDGPU::AR_X: OpKind = MCK_R600_TReg32_X; break;
    case AMDGPU::ALU_CONST: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::ALU_PARAM: OpKind = MCK_R600_Reg32; break;
    case AMDGPU::VCC_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::VCC_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::VCC: OpKind = MCK_VCC; break;
    case AMDGPU::EXEC_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::EXEC_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::EXEC: OpKind = MCK_SReg_64; break;
    case AMDGPU::M0: OpKind = MCK_M0; break;
    case AMDGPU::FLAT_SCR_LO: OpKind = MCK_SReg_32; break;
    case AMDGPU::FLAT_SCR_HI: OpKind = MCK_SReg_32; break;
    case AMDGPU::FLAT_SCR: OpKind = MCK_SReg_64; break;
    case AMDGPU::SGPR0: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR1: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR2: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR3: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR4: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR5: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR6: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR7: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR8: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR9: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR10: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR11: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR12: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR13: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR14: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR15: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR16: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR17: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR18: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR19: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR20: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR21: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR22: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR23: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR24: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR25: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR26: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR27: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR28: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR29: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR30: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR31: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR32: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR33: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR34: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR35: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR36: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR37: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR38: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR39: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR40: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR41: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR42: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR43: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR44: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR45: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR46: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR47: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR48: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR49: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR50: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR51: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR52: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR53: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR54: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR55: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR56: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR57: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR58: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR59: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR60: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR61: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR62: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR63: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR64: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR65: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR66: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR67: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR68: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR69: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR70: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR71: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR72: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR73: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR74: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR75: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR76: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR77: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR78: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR79: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR80: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR81: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR82: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR83: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR84: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR85: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR86: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR87: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR88: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR89: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR90: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR91: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR92: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR93: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR94: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR95: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR96: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR97: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR98: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR99: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR100: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR101: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR102: OpKind = MCK_SGPR_32; break;
    case AMDGPU::SGPR103: OpKind = MCK_SGPR_32; break;
    case AMDGPU::VGPR0: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR1: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR2: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR3: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR4: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR5: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR6: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR7: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR8: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR9: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR10: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR11: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR12: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR13: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR14: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR15: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR16: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR17: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR18: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR19: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR20: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR21: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR22: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR23: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR24: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR25: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR26: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR27: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR28: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR29: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR30: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR31: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR32: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR33: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR34: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR35: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR36: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR37: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR38: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR39: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR40: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR41: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR42: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR43: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR44: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR45: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR46: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR47: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR48: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR49: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR50: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR51: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR52: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR53: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR54: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR55: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR56: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR57: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR58: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR59: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR60: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR61: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR62: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR63: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR64: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR65: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR66: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR67: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR68: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR69: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR70: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR71: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR72: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR73: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR74: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR75: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR76: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR77: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR78: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR79: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR80: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR81: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR82: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR83: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR84: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR85: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR86: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR87: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR88: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR89: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR90: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR91: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR92: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR93: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR94: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR95: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR96: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR97: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR98: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR99: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR100: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR101: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR102: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR103: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR104: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR105: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR106: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR107: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR108: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR109: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR110: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR111: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR112: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR113: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR114: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR115: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR116: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR117: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR118: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR119: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR120: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR121: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR122: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR123: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR124: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR125: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR126: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR127: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR128: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR129: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR130: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR131: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR132: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR133: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR134: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR135: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR136: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR137: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR138: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR139: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR140: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR141: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR142: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR143: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR144: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR145: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR146: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR147: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR148: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR149: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR150: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR151: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR152: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR153: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR154: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR155: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR156: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR157: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR158: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR159: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR160: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR161: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR162: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR163: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR164: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR165: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR166: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR167: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR168: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR169: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR170: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR171: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR172: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR173: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR174: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR175: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR176: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR177: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR178: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR179: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR180: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR181: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR182: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR183: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR184: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR185: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR186: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR187: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR188: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR189: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR190: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR191: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR192: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR193: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR194: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR195: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR196: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR197: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR198: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR199: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR200: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR201: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR202: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR203: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR204: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR205: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR206: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR207: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR208: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR209: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR210: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR211: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR212: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR213: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR214: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR215: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR216: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR217: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR218: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR219: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR220: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR221: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR222: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR223: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR224: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR225: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR226: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR227: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR228: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR229: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR230: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR231: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR232: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR233: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR234: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR235: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR236: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR237: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR238: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR239: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR240: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR241: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR242: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR243: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR244: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR245: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR246: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR247: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR248: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR249: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR250: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR251: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR252: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR253: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR254: OpKind = MCK_VGPR_32; break;
    case AMDGPU::VGPR255: OpKind = MCK_VGPR_32; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR100_SGPR101_SGPR102_SGPR103: OpKind = MCK_SReg_128; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3_SGPR4_SGPR5_SGPR6_SGPR7: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR92_SGPR93_SGPR94_SGPR95_SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR96_SGPR97_SGPR98_SGPR99_SGPR100_SGPR101_SGPR102_SGPR103: OpKind = MCK_SReg_256; break;
    case AMDGPU::SGPR0_SGPR1_SGPR2_SGPR3_SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR4_SGPR5_SGPR6_SGPR7_SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR8_SGPR9_SGPR10_SGPR11_SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR12_SGPR13_SGPR14_SGPR15_SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR16_SGPR17_SGPR18_SGPR19_SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR20_SGPR21_SGPR22_SGPR23_SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR24_SGPR25_SGPR26_SGPR27_SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR28_SGPR29_SGPR30_SGPR31_SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR32_SGPR33_SGPR34_SGPR35_SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR36_SGPR37_SGPR38_SGPR39_SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR40_SGPR41_SGPR42_SGPR43_SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR44_SGPR45_SGPR46_SGPR47_SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR48_SGPR49_SGPR50_SGPR51_SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR52_SGPR53_SGPR54_SGPR55_SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR56_SGPR57_SGPR58_SGPR59_SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR60_SGPR61_SGPR62_SGPR63_SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR64_SGPR65_SGPR66_SGPR67_SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR68_SGPR69_SGPR70_SGPR71_SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR72_SGPR73_SGPR74_SGPR75_SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR76_SGPR77_SGPR78_SGPR79_SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR80_SGPR81_SGPR82_SGPR83_SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR84_SGPR85_SGPR86_SGPR87_SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95_SGPR96_SGPR97_SGPR98_SGPR99: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR88_SGPR89_SGPR90_SGPR91_SGPR92_SGPR93_SGPR94_SGPR95_SGPR96_SGPR97_SGPR98_SGPR99_SGPR100_SGPR101_SGPR102_SGPR103: OpKind = MCK_SReg_512; break;
    case AMDGPU::SGPR0_SGPR1: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR2_SGPR3: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR4_SGPR5: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR6_SGPR7: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR8_SGPR9: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR10_SGPR11: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR12_SGPR13: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR14_SGPR15: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR16_SGPR17: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR18_SGPR19: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR20_SGPR21: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR22_SGPR23: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR24_SGPR25: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR26_SGPR27: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR28_SGPR29: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR30_SGPR31: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR32_SGPR33: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR34_SGPR35: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR36_SGPR37: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR38_SGPR39: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR40_SGPR41: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR42_SGPR43: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR44_SGPR45: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR46_SGPR47: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR48_SGPR49: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR50_SGPR51: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR52_SGPR53: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR54_SGPR55: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR56_SGPR57: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR58_SGPR59: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR60_SGPR61: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR62_SGPR63: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR64_SGPR65: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR66_SGPR67: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR68_SGPR69: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR70_SGPR71: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR72_SGPR73: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR74_SGPR75: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR76_SGPR77: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR78_SGPR79: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR80_SGPR81: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR82_SGPR83: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR84_SGPR85: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR86_SGPR87: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR88_SGPR89: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR90_SGPR91: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR92_SGPR93: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR94_SGPR95: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR96_SGPR97: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR98_SGPR99: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR100_SGPR101: OpKind = MCK_SGPR_64; break;
    case AMDGPU::SGPR102_SGPR103: OpKind = MCK_SGPR_64; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_128; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_256; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242_VGPR243_VGPR244_VGPR245_VGPR246_VGPR247_VGPR248_VGPR249_VGPR250_VGPR251_VGPR252_VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_512; break;
    case AMDGPU::VGPR0_VGPR1: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR1_VGPR2: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR2_VGPR3: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR3_VGPR4: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR4_VGPR5: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR5_VGPR6: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR6_VGPR7: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR7_VGPR8: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR8_VGPR9: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR9_VGPR10: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR10_VGPR11: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR11_VGPR12: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR12_VGPR13: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR13_VGPR14: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR14_VGPR15: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR15_VGPR16: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR16_VGPR17: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR17_VGPR18: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR18_VGPR19: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR19_VGPR20: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR20_VGPR21: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR21_VGPR22: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR22_VGPR23: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR23_VGPR24: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR24_VGPR25: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR25_VGPR26: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR26_VGPR27: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR27_VGPR28: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR28_VGPR29: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR29_VGPR30: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR30_VGPR31: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR31_VGPR32: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR32_VGPR33: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR33_VGPR34: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR34_VGPR35: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR35_VGPR36: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR36_VGPR37: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR37_VGPR38: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR38_VGPR39: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR39_VGPR40: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR40_VGPR41: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR41_VGPR42: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR42_VGPR43: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR43_VGPR44: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR44_VGPR45: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR45_VGPR46: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR46_VGPR47: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR47_VGPR48: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR48_VGPR49: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR49_VGPR50: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR50_VGPR51: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR51_VGPR52: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR52_VGPR53: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR53_VGPR54: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR54_VGPR55: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR55_VGPR56: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR56_VGPR57: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR57_VGPR58: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR58_VGPR59: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR59_VGPR60: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR60_VGPR61: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR61_VGPR62: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR62_VGPR63: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR63_VGPR64: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR64_VGPR65: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR65_VGPR66: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR66_VGPR67: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR67_VGPR68: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR68_VGPR69: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR69_VGPR70: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR70_VGPR71: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR71_VGPR72: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR72_VGPR73: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR73_VGPR74: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR74_VGPR75: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR75_VGPR76: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR76_VGPR77: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR77_VGPR78: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR78_VGPR79: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR79_VGPR80: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR80_VGPR81: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR81_VGPR82: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR82_VGPR83: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR83_VGPR84: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR84_VGPR85: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR85_VGPR86: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR86_VGPR87: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR87_VGPR88: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR88_VGPR89: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR89_VGPR90: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR90_VGPR91: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR91_VGPR92: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR92_VGPR93: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR93_VGPR94: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR94_VGPR95: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR95_VGPR96: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR96_VGPR97: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR97_VGPR98: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR98_VGPR99: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR99_VGPR100: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR100_VGPR101: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR101_VGPR102: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR102_VGPR103: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR103_VGPR104: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR104_VGPR105: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR105_VGPR106: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR106_VGPR107: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR107_VGPR108: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR108_VGPR109: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR109_VGPR110: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR110_VGPR111: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR111_VGPR112: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR112_VGPR113: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR113_VGPR114: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR114_VGPR115: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR115_VGPR116: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR116_VGPR117: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR117_VGPR118: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR118_VGPR119: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR119_VGPR120: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR120_VGPR121: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR121_VGPR122: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR122_VGPR123: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR123_VGPR124: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR124_VGPR125: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR125_VGPR126: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR126_VGPR127: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR127_VGPR128: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR128_VGPR129: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR129_VGPR130: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR130_VGPR131: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR131_VGPR132: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR132_VGPR133: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR133_VGPR134: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR134_VGPR135: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR135_VGPR136: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR136_VGPR137: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR137_VGPR138: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR138_VGPR139: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR139_VGPR140: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR140_VGPR141: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR141_VGPR142: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR142_VGPR143: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR143_VGPR144: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR144_VGPR145: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR145_VGPR146: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR146_VGPR147: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR147_VGPR148: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR148_VGPR149: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR149_VGPR150: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR150_VGPR151: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR151_VGPR152: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR152_VGPR153: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR153_VGPR154: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR154_VGPR155: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR155_VGPR156: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR156_VGPR157: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR157_VGPR158: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR158_VGPR159: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR159_VGPR160: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR160_VGPR161: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR161_VGPR162: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR162_VGPR163: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR163_VGPR164: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR164_VGPR165: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR165_VGPR166: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR166_VGPR167: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR167_VGPR168: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR168_VGPR169: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR169_VGPR170: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR170_VGPR171: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR171_VGPR172: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR172_VGPR173: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR173_VGPR174: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR174_VGPR175: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR175_VGPR176: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR176_VGPR177: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR177_VGPR178: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR178_VGPR179: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR179_VGPR180: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR180_VGPR181: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR181_VGPR182: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR182_VGPR183: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR183_VGPR184: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR184_VGPR185: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR185_VGPR186: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR186_VGPR187: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR187_VGPR188: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR188_VGPR189: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR189_VGPR190: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR190_VGPR191: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR191_VGPR192: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR192_VGPR193: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR193_VGPR194: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR194_VGPR195: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR195_VGPR196: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR196_VGPR197: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR197_VGPR198: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR198_VGPR199: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR199_VGPR200: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR200_VGPR201: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR201_VGPR202: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR202_VGPR203: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR203_VGPR204: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR204_VGPR205: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR205_VGPR206: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR206_VGPR207: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR207_VGPR208: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR208_VGPR209: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR209_VGPR210: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR210_VGPR211: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR211_VGPR212: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR212_VGPR213: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR213_VGPR214: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR214_VGPR215: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR215_VGPR216: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR216_VGPR217: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR217_VGPR218: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR218_VGPR219: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR219_VGPR220: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR220_VGPR221: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR221_VGPR222: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR222_VGPR223: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR223_VGPR224: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR224_VGPR225: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR225_VGPR226: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR226_VGPR227: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR227_VGPR228: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR228_VGPR229: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR229_VGPR230: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR230_VGPR231: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR231_VGPR232: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR232_VGPR233: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR233_VGPR234: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR234_VGPR235: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR235_VGPR236: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR236_VGPR237: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR237_VGPR238: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR238_VGPR239: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR239_VGPR240: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR240_VGPR241: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR241_VGPR242: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR242_VGPR243: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR243_VGPR244: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR244_VGPR245: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR245_VGPR246: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR246_VGPR247: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR247_VGPR248: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR248_VGPR249: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR249_VGPR250: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR250_VGPR251: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR251_VGPR252: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR252_VGPR253: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR253_VGPR254: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR254_VGPR255: OpKind = MCK_VReg_64; break;
    case AMDGPU::VGPR0_VGPR1_VGPR2: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR1_VGPR2_VGPR3: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR2_VGPR3_VGPR4: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR3_VGPR4_VGPR5: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR4_VGPR5_VGPR6: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR5_VGPR6_VGPR7: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR6_VGPR7_VGPR8: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR7_VGPR8_VGPR9: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR8_VGPR9_VGPR10: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR9_VGPR10_VGPR11: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR10_VGPR11_VGPR12: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR11_VGPR12_VGPR13: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR12_VGPR13_VGPR14: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR13_VGPR14_VGPR15: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR14_VGPR15_VGPR16: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR15_VGPR16_VGPR17: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR16_VGPR17_VGPR18: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR17_VGPR18_VGPR19: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR18_VGPR19_VGPR20: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR19_VGPR20_VGPR21: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR20_VGPR21_VGPR22: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR21_VGPR22_VGPR23: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR22_VGPR23_VGPR24: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR23_VGPR24_VGPR25: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR24_VGPR25_VGPR26: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR25_VGPR26_VGPR27: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR26_VGPR27_VGPR28: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR27_VGPR28_VGPR29: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR28_VGPR29_VGPR30: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR29_VGPR30_VGPR31: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR30_VGPR31_VGPR32: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR31_VGPR32_VGPR33: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR32_VGPR33_VGPR34: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR33_VGPR34_VGPR35: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR34_VGPR35_VGPR36: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR35_VGPR36_VGPR37: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR36_VGPR37_VGPR38: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR37_VGPR38_VGPR39: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR38_VGPR39_VGPR40: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR39_VGPR40_VGPR41: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR40_VGPR41_VGPR42: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR41_VGPR42_VGPR43: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR42_VGPR43_VGPR44: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR43_VGPR44_VGPR45: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR44_VGPR45_VGPR46: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR45_VGPR46_VGPR47: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR46_VGPR47_VGPR48: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR47_VGPR48_VGPR49: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR48_VGPR49_VGPR50: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR49_VGPR50_VGPR51: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR50_VGPR51_VGPR52: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR51_VGPR52_VGPR53: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR52_VGPR53_VGPR54: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR53_VGPR54_VGPR55: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR54_VGPR55_VGPR56: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR55_VGPR56_VGPR57: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR56_VGPR57_VGPR58: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR57_VGPR58_VGPR59: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR58_VGPR59_VGPR60: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR59_VGPR60_VGPR61: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR60_VGPR61_VGPR62: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR61_VGPR62_VGPR63: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR62_VGPR63_VGPR64: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR63_VGPR64_VGPR65: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR64_VGPR65_VGPR66: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR65_VGPR66_VGPR67: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR66_VGPR67_VGPR68: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR67_VGPR68_VGPR69: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR68_VGPR69_VGPR70: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR69_VGPR70_VGPR71: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR70_VGPR71_VGPR72: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR71_VGPR72_VGPR73: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR72_VGPR73_VGPR74: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR73_VGPR74_VGPR75: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR74_VGPR75_VGPR76: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR75_VGPR76_VGPR77: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR76_VGPR77_VGPR78: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR77_VGPR78_VGPR79: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR78_VGPR79_VGPR80: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR79_VGPR80_VGPR81: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR80_VGPR81_VGPR82: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR81_VGPR82_VGPR83: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR82_VGPR83_VGPR84: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR83_VGPR84_VGPR85: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR84_VGPR85_VGPR86: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR85_VGPR86_VGPR87: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR86_VGPR87_VGPR88: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR87_VGPR88_VGPR89: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR88_VGPR89_VGPR90: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR89_VGPR90_VGPR91: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR90_VGPR91_VGPR92: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR91_VGPR92_VGPR93: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR92_VGPR93_VGPR94: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR93_VGPR94_VGPR95: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR94_VGPR95_VGPR96: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR95_VGPR96_VGPR97: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR96_VGPR97_VGPR98: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR97_VGPR98_VGPR99: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR98_VGPR99_VGPR100: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR99_VGPR100_VGPR101: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR100_VGPR101_VGPR102: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR101_VGPR102_VGPR103: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR102_VGPR103_VGPR104: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR103_VGPR104_VGPR105: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR104_VGPR105_VGPR106: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR105_VGPR106_VGPR107: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR106_VGPR107_VGPR108: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR107_VGPR108_VGPR109: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR108_VGPR109_VGPR110: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR109_VGPR110_VGPR111: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR110_VGPR111_VGPR112: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR111_VGPR112_VGPR113: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR112_VGPR113_VGPR114: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR113_VGPR114_VGPR115: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR114_VGPR115_VGPR116: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR115_VGPR116_VGPR117: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR116_VGPR117_VGPR118: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR117_VGPR118_VGPR119: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR118_VGPR119_VGPR120: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR119_VGPR120_VGPR121: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR120_VGPR121_VGPR122: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR121_VGPR122_VGPR123: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR122_VGPR123_VGPR124: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR123_VGPR124_VGPR125: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR124_VGPR125_VGPR126: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR125_VGPR126_VGPR127: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR126_VGPR127_VGPR128: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR127_VGPR128_VGPR129: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR128_VGPR129_VGPR130: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR129_VGPR130_VGPR131: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR130_VGPR131_VGPR132: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR131_VGPR132_VGPR133: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR132_VGPR133_VGPR134: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR133_VGPR134_VGPR135: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR134_VGPR135_VGPR136: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR135_VGPR136_VGPR137: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR136_VGPR137_VGPR138: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR137_VGPR138_VGPR139: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR138_VGPR139_VGPR140: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR139_VGPR140_VGPR141: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR140_VGPR141_VGPR142: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR141_VGPR142_VGPR143: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR142_VGPR143_VGPR144: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR143_VGPR144_VGPR145: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR144_VGPR145_VGPR146: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR145_VGPR146_VGPR147: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR146_VGPR147_VGPR148: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR147_VGPR148_VGPR149: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR148_VGPR149_VGPR150: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR149_VGPR150_VGPR151: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR150_VGPR151_VGPR152: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR151_VGPR152_VGPR153: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR152_VGPR153_VGPR154: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR153_VGPR154_VGPR155: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR154_VGPR155_VGPR156: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR155_VGPR156_VGPR157: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR156_VGPR157_VGPR158: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR157_VGPR158_VGPR159: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR158_VGPR159_VGPR160: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR159_VGPR160_VGPR161: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR160_VGPR161_VGPR162: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR161_VGPR162_VGPR163: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR162_VGPR163_VGPR164: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR163_VGPR164_VGPR165: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR164_VGPR165_VGPR166: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR165_VGPR166_VGPR167: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR166_VGPR167_VGPR168: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR167_VGPR168_VGPR169: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR168_VGPR169_VGPR170: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR169_VGPR170_VGPR171: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR170_VGPR171_VGPR172: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR171_VGPR172_VGPR173: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR172_VGPR173_VGPR174: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR173_VGPR174_VGPR175: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR174_VGPR175_VGPR176: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR175_VGPR176_VGPR177: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR176_VGPR177_VGPR178: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR177_VGPR178_VGPR179: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR178_VGPR179_VGPR180: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR179_VGPR180_VGPR181: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR180_VGPR181_VGPR182: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR181_VGPR182_VGPR183: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR182_VGPR183_VGPR184: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR183_VGPR184_VGPR185: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR184_VGPR185_VGPR186: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR185_VGPR186_VGPR187: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR186_VGPR187_VGPR188: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR187_VGPR188_VGPR189: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR188_VGPR189_VGPR190: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR189_VGPR190_VGPR191: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR190_VGPR191_VGPR192: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR191_VGPR192_VGPR193: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR192_VGPR193_VGPR194: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR193_VGPR194_VGPR195: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR194_VGPR195_VGPR196: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR195_VGPR196_VGPR197: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR196_VGPR197_VGPR198: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR197_VGPR198_VGPR199: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR198_VGPR199_VGPR200: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR199_VGPR200_VGPR201: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR200_VGPR201_VGPR202: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR201_VGPR202_VGPR203: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR202_VGPR203_VGPR204: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR203_VGPR204_VGPR205: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR204_VGPR205_VGPR206: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR205_VGPR206_VGPR207: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR206_VGPR207_VGPR208: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR207_VGPR208_VGPR209: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR208_VGPR209_VGPR210: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR209_VGPR210_VGPR211: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR210_VGPR211_VGPR212: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR211_VGPR212_VGPR213: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR212_VGPR213_VGPR214: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR213_VGPR214_VGPR215: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR214_VGPR215_VGPR216: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR215_VGPR216_VGPR217: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR216_VGPR217_VGPR218: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR217_VGPR218_VGPR219: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR218_VGPR219_VGPR220: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR219_VGPR220_VGPR221: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR220_VGPR221_VGPR222: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR221_VGPR222_VGPR223: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR222_VGPR223_VGPR224: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR223_VGPR224_VGPR225: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR224_VGPR225_VGPR226: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR225_VGPR226_VGPR227: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR226_VGPR227_VGPR228: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR227_VGPR228_VGPR229: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR228_VGPR229_VGPR230: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR229_VGPR230_VGPR231: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR230_VGPR231_VGPR232: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR231_VGPR232_VGPR233: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR232_VGPR233_VGPR234: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR233_VGPR234_VGPR235: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR234_VGPR235_VGPR236: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR235_VGPR236_VGPR237: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR236_VGPR237_VGPR238: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR237_VGPR238_VGPR239: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR238_VGPR239_VGPR240: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR239_VGPR240_VGPR241: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR240_VGPR241_VGPR242: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR241_VGPR242_VGPR243: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR242_VGPR243_VGPR244: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR243_VGPR244_VGPR245: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR244_VGPR245_VGPR246: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR245_VGPR246_VGPR247: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR246_VGPR247_VGPR248: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR247_VGPR248_VGPR249: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR248_VGPR249_VGPR250: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR249_VGPR250_VGPR251: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR250_VGPR251_VGPR252: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR251_VGPR252_VGPR253: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR252_VGPR253_VGPR254: OpKind = MCK_VReg_96; break;
    case AMDGPU::VGPR253_VGPR254_VGPR255: OpKind = MCK_VReg_96; break;
    }
    return isSubclass(OpKind, Kind) ? MCTargetAsmParser::Match_Success :
                                      MCTargetAsmParser::Match_InvalidOperand;
  }

  return MCTargetAsmParser::Match_InvalidOperand;
}

uint64_t AMDGPUAsmParser::
ComputeAvailableFeatures(const FeatureBitset& FB) const {
  uint64_t Features = 0;
  if ((FB[AMDGPU::FeatureGCN1Encoding]))
    Features |= Feature_isSICI;
  if ((FB[AMDGPU::FeatureSeaIslands]))
    Features |= Feature_isCIOnly;
  if ((FB[AMDGPU::FeatureGCN3Encoding]))
    Features |= Feature_isVI;
  if ((FB[AMDGPU::FeatureDisable]))
    Features |= Feature_DisableInst;
  if ((FB[AMDGPU::FeatureGCN]))
    Features |= Feature_isGCN;
  if ((FB[AMDGPU::FeatureSouthernIslands]))
    Features |= Feature_isSI;
  if ((FB[AMDGPU::FeatureCIInsts]))
    Features |= Feature_isCIVI;
  return Features;
}

static const char *const MnemonicTable =
    "\007CALL_FS\006CF_END\010CONTINUE\004ELSE\010END_LOOP\013INTERP_LOAD\016"
    "INTERP_PAIR_XY\016INTERP_PAIR_ZW\004JUMP\nLOOP_BREAK\017LOOP_START_DX10"
    "\nMASK_WRITE\003PAD\003POP\004PUSH\tPUSH_ELSE\003TEX\003VTX\021buffer_a"
    "tomic_add\021buffer_atomic_and\020buffer_atomic_or\022buffer_atomic_sma"
    "x\022buffer_atomic_smin\021buffer_atomic_sub\022buffer_atomic_swap\022b"
    "uffer_atomic_umax\022buffer_atomic_umin\021buffer_atomic_xor\021buffer_"
    "load_dword\023buffer_load_dwordx2\023buffer_load_dwordx4\024buffer_load"
    "_format_x\025buffer_load_format_xy\026buffer_load_format_xyz\027buffer_"
    "load_format_xyzw\021buffer_load_sbyte\022buffer_load_sshort\021buffer_l"
    "oad_ubyte\022buffer_load_ushort\021buffer_store_byte\022buffer_store_dw"
    "ord\024buffer_store_dwordx2\024buffer_store_dwordx4\025buffer_store_for"
    "mat_x\026buffer_store_format_xy\027buffer_store_format_xyz\030buffer_st"
    "ore_format_xyzw\022buffer_store_short\016buffer_wbinvl1\021buffer_wbinv"
    "l1_sc\022buffer_wbinvl1_vol\016ds_add_rtn_u32\016ds_add_rtn_u64\017ds_a"
    "dd_src2_u32\017ds_add_src2_u64\nds_add_u32\nds_add_u64\nds_and_b32\nds_"
    "and_b64\016ds_and_rtn_b32\016ds_and_rtn_b64\017ds_and_src2_b64\016ds_an"
    "d_src_b32\tds_append\014ds_cmpst_b32\014ds_cmpst_b64\014ds_cmpst_f32\014"
    "ds_cmpst_f64\020ds_cmpst_rtn_b32\020ds_cmpst_rtn_b64\020ds_cmpst_rtn_f3"
    "2\020ds_cmpst_rtn_f64\nds_consume\016ds_dec_rtn_u32\016ds_dec_rtn_u64\017"
    "ds_dec_src2_u32\017ds_dec_src2_u64\nds_dec_u32\nds_dec_u64\016ds_gws_ba"
    "rrier\013ds_gws_init\016ds_gws_sema_br\015ds_gws_sema_p\015ds_gws_sema_"
    "v\016ds_inc_rtn_u32\016ds_inc_rtn_u64\017ds_inc_src2_u32\017ds_inc_src2"
    "_u64\nds_inc_u32\nds_inc_u64\nds_max_f32\nds_max_f64\nds_max_i32\nds_ma"
    "x_i64\016ds_max_rtn_f32\016ds_max_rtn_f64\016ds_max_rtn_i32\016ds_max_r"
    "tn_i64\016ds_max_rtn_u32\016ds_max_rtn_u64\017ds_max_src2_f32\017ds_max"
    "_src2_f64\017ds_max_src2_i32\017ds_max_src2_i64\017ds_max_src2_u32\017d"
    "s_max_src2_u64\nds_max_u32\nds_max_u64\nds_min_f32\nds_min_f64\nds_min_"
    "i32\nds_min_i64\016ds_min_rtn_f32\016ds_min_rtn_f64\016ds_min_rtn_i32\016"
    "ds_min_rtn_i64\016ds_min_rtn_u32\016ds_min_rtn_u64\017ds_min_src2_f32\017"
    "ds_min_src2_f64\017ds_min_src2_i32\017ds_min_src2_i64\017ds_min_src2_u3"
    "2\017ds_min_src2_u64\nds_min_u32\nds_min_u64\014ds_mskor_b32\014ds_msko"
    "r_b64\020ds_mskor_rtn_b32\020ds_mskor_rtn_b64\tds_or_b32\tds_or_b64\015"
    "ds_or_rtn_b32\015ds_or_rtn_b64\016ds_or_src2_b32\016ds_or_src2_b64\020d"
    "s_ordered_count\014ds_read2_b32\014ds_read2_b64\020ds_read2st64_b32\020"
    "ds_read2st64_b64\013ds_read_b32\013ds_read_b64\013ds_read_i16\nds_read_"
    "i8\013ds_read_u16\nds_read_u8\017ds_rsub_rtn_u32\017ds_rsub_rtn_u64\020"
    "ds_rsub_src2_u32\020ds_rsub_src2_u64\013ds_rsub_u32\013ds_rsub_u64\016d"
    "s_sub_rtn_u32\016ds_sub_rtn_u64\017ds_sub_src2_u32\017ds_sub_src2_u64\n"
    "ds_sub_u32\nds_sub_u64\016ds_swizzle_b32\017ds_wrap_rtn_f32\015ds_write"
    "2_b32\015ds_write2_b64\021ds_write2st64_b32\021ds_write2st64_b64\014ds_"
    "write_b16\014ds_write_b32\014ds_write_b64\013ds_write_b8\021ds_write_sr"
    "c2_b32\021ds_write_src2_b64\022ds_wrxchg2_rtn_b32\022ds_wrxchg2_rtn_b64"
    "\026ds_wrxchg2st64_rtn_b32\026ds_wrxchg2st64_rtn_b64\021ds_wrxchg_rtn_b"
    "32\021ds_wrxchg_rtn_b64\nds_xor_b32\nds_xor_b64\016ds_xor_rtn_b32\016ds"
    "_xor_rtn_b64\017ds_xor_src2_b32\017ds_xor_src2_b64\003exp\017flat_atomi"
    "c_add\022flat_atomic_add_x2\017flat_atomic_and\022flat_atomic_and_x2\023"
    "flat_atomic_cmpswap\026flat_atomic_cmpswap_x2\017flat_atomic_dec\022fla"
    "t_atomic_dec_x2\024flat_atomic_fcmpswap\027flat_atomic_fcmpswap_x2\020f"
    "lat_atomic_fmax\023flat_atomic_fmax_x2\020flat_atomic_fmin\023flat_atom"
    "ic_fmin_x2\017flat_atomic_inc\022flat_atomic_inc_x2\016flat_atomic_or\021"
    "flat_atomic_or_x2\020flat_atomic_rsub\023flat_atomic_rsub_x2\020flat_at"
    "omic_smax\023flat_atomic_smax_x2\020flat_atomic_smin\023flat_atomic_smi"
    "n_x2\017flat_atomic_sub\022flat_atomic_sub_x2\020flat_atomic_swap\023fl"
    "at_atomic_swap_x2\020flat_atomic_umax\023flat_atomic_umax_x2\020flat_at"
    "omic_umin\023flat_atomic_umin_x2\017flat_atomic_xor\022flat_atomic_xor_"
    "x2\017flat_load_dword\021flat_load_dwordx2\021flat_load_dwordx3\021flat"
    "_load_dwordx4\017flat_load_sbyte\020flat_load_sshort\017flat_load_ubyte"
    "\020flat_load_ushort\017flat_store_byte\020flat_store_dword\022flat_sto"
    "re_dwordx2\022flat_store_dwordx3\022flat_store_dwordx4\020flat_store_sh"
    "ort\015image_gather4\017image_gather4_b\022image_gather4_b_cl\024image_"
    "gather4_b_cl_o\021image_gather4_b_o\017image_gather4_c\021image_gather4"
    "_c_b\024image_gather4_c_b_cl\026image_gather4_c_b_cl_o\023image_gather4"
    "_c_b_o\022image_gather4_c_cl\024image_gather4_c_cl_o\021image_gather4_c"
    "_l\023image_gather4_c_l_o\022image_gather4_c_lz\024image_gather4_c_lz_o"
    "\021image_gather4_c_o\020image_gather4_cl\022image_gather4_cl_o\017imag"
    "e_gather4_l\021image_gather4_l_o\020image_gather4_lz\022image_gather4_l"
    "z_o\017image_gather4_o\015image_get_lod\021image_get_resinfo\nimage_loa"
    "d\016image_load_mip\014image_sample\016image_sample_b\021image_sample_b"
    "_cl\023image_sample_b_cl_o\020image_sample_b_o\016image_sample_c\020ima"
    "ge_sample_c_b\023image_sample_c_b_cl\025image_sample_c_b_cl_o\022image_"
    "sample_c_b_o\021image_sample_c_cd\024image_sample_c_cd_cl\026image_samp"
    "le_c_cd_cl_o\023image_sample_c_cd_o\021image_sample_c_cl\023image_sampl"
    "e_c_cl_o\020image_sample_c_d\023image_sample_c_d_cl\025image_sample_c_d"
    "_cl_o\022image_sample_c_d_o\020image_sample_c_l\022image_sample_c_l_o\021"
    "image_sample_c_lz\023image_sample_c_lz_o\020image_sample_c_o\017image_s"
    "ample_cd\022image_sample_cd_cl\024image_sample_cd_cl_o\021image_sample_"
    "cd_o\017image_sample_cl\021image_sample_cl_o\016image_sample_d\021image"
    "_sample_d_cl\023image_sample_d_cl_o\020image_sample_d_o\016image_sample"
    "_l\020image_sample_l_o\017image_sample_lz\021image_sample_lz_o\016image"
    "_sample_o\ts_abs_i32\015s_absdiff_i32\ts_add_i32\ts_add_u32\ns_addc_u32"
    "\ns_addk_i32\ts_and_b32\ts_and_b64\022s_and_saveexec_b64\013s_andn2_b32"
    "\013s_andn2_b64\024s_andn2_saveexec_b64\ns_ashr_i32\ns_ashr_i64\ts_barr"
    "ier\017s_bcnt0_i32_b32\017s_bcnt0_i32_b64\017s_bcnt1_i32_b32\017s_bcnt1"
    "_i32_b64\ts_bfe_i32\ts_bfe_i64\ts_bfe_u32\ts_bfe_u64\ts_bfm_b32\ts_bfm_"
    "b64\015s_bitset0_b32\015s_bitset0_b64\015s_bitset1_b32\015s_bitset1_b64"
    "\010s_branch\ns_brev_b32\ns_brev_b64\023s_buffer_load_dword\026s_buffer"
    "_load_dwordx16\025s_buffer_load_dwordx2\025s_buffer_load_dwordx4\025s_b"
    "uffer_load_dwordx8\020s_cbranch_execnz\017s_cbranch_execz\020s_cbranch_"
    "g_fork\020s_cbranch_i_fork\016s_cbranch_join\016s_cbranch_scc0\016s_cbr"
    "anch_scc1\017s_cbranch_vccnz\016s_cbranch_vccz\ns_cmov_b32\ns_cmov_b64\013"
    "s_cmovk_i32\014s_cmp_eq_i32\014s_cmp_eq_u32\014s_cmp_ge_i32\014s_cmp_ge"
    "_u32\014s_cmp_gt_i32\014s_cmp_gt_u32\014s_cmp_le_i32\014s_cmp_le_u32\014"
    "s_cmp_lg_i32\014s_cmp_lg_u32\014s_cmp_lt_i32\014s_cmp_lt_u32\015s_cmpk_"
    "eq_i32\015s_cmpk_eq_u32\015s_cmpk_ge_i32\015s_cmpk_ge_u32\015s_cmpk_gt_"
    "i32\015s_cmpk_gt_u32\015s_cmpk_le_i32\015s_cmpk_le_u32\015s_cmpk_lg_i32"
    "\015s_cmpk_lg_u32\015s_cmpk_lt_i32\015s_cmpk_lt_u32\015s_cselect_b32\015"
    "s_cselect_b64\014s_dcache_inv\020s_dcache_inv_vol\013s_dcache_wb\017s_d"
    "cache_wb_vol\016s_decperflevel\010s_endpgm\015s_ff0_i32_b32\015s_ff0_i3"
    "2_b64\015s_ff1_i32_b32\015s_ff1_i32_b64\013s_flbit_i32\017s_flbit_i32_b"
    "32\017s_flbit_i32_b64\017s_flbit_i32_i64\013s_getpc_b64\014s_getreg_b32"
    "\014s_icache_inv\016s_incperflevel\014s_load_dword\017s_load_dwordx16\016"
    "s_load_dwordx2\016s_load_dwordx4\016s_load_dwordx8\ns_lshl_b32\ns_lshl_"
    "b64\ns_lshr_b32\ns_lshr_b64\ts_max_i32\ts_max_u32\ts_min_i32\ts_min_u32"
    "\ts_mov_b32\ts_mov_b64\015s_mov_fed_b32\017s_mov_regrd_b32\ns_movk_i32\015"
    "s_movreld_b32\015s_movreld_b64\015s_movrels_b32\015s_movrels_b64\ts_mul"
    "_i32\ns_mulk_i32\ns_nand_b32\ns_nand_b64\023s_nand_saveexec_b64\005s_no"
    "p\ts_nor_b32\ts_nor_b64\022s_nor_saveexec_b64\ts_not_b32\ts_not_b64\010"
    "s_or_b32\010s_or_b64\021s_or_saveexec_b64\ns_orn2_b32\ns_orn2_b64\023s_"
    "orn2_saveexec_b64\016s_quadmask_b32\016s_quadmask_b64\ts_rfe_b64\ts_sen"
    "dmsg\015s_sendmsghalt\ts_sethalt\013s_setpc_b64\ts_setprio\014s_setreg_"
    "b32\022s_setreg_imm32_b32\016s_sext_i32_i16\015s_sext_i32_i8\007s_sleep"
    "\ts_sub_i32\ts_sub_u32\ns_subb_u32\014s_swappc_b64\006s_trap\014s_ttrac"
    "edata\ts_waitcnt\ts_wqm_b32\ts_wqm_b64\ns_xnor_b32\ns_xnor_b64\023s_xno"
    "r_saveexec_b64\ts_xor_b32\ts_xor_b64\022s_xor_saveexec_b64\030tbuffer_l"
    "oad_format_xyzw\026tbuffer_store_format_x\027tbuffer_store_format_xy\030"
    "tbuffer_store_format_xyz\031tbuffer_store_format_xyzw\tv_add_f16\tv_add"
    "_f32\tv_add_f64\tv_add_i32\tv_add_u16\nv_addc_u32\016v_alignbit_b32\017"
    "v_alignbyte_b32\tv_and_b32\nv_ashr_i32\nv_ashr_i64\015v_ashrrev_b16\015"
    "v_ashrrev_i32\015v_ashrrev_i64\016v_bcnt_u32_b32\tv_bfe_i32\tv_bfe_u32\t"
    "v_bfi_b32\tv_bfm_b32\013v_bfrev_b32\nv_ceil_f16\nv_ceil_f32\nv_ceil_f64"
    "\tv_clrexcp\017v_cmp_class_f32\023v_cmp_class_f32_e32\017v_cmp_class_f6"
    "4\023v_cmp_class_f64_e32\014v_cmp_eq_f32\020v_cmp_eq_f32_e32\014v_cmp_e"
    "q_f64\020v_cmp_eq_f64_e32\014v_cmp_eq_i32\020v_cmp_eq_i32_e32\014v_cmp_"
    "eq_i64\020v_cmp_eq_i64_e32\014v_cmp_eq_u32\020v_cmp_eq_u32_e32\014v_cmp"
    "_eq_u64\020v_cmp_eq_u64_e32\013v_cmp_f_f32\017v_cmp_f_f32_e32\013v_cmp_"
    "f_f64\017v_cmp_f_f64_e32\013v_cmp_f_i32\017v_cmp_f_i32_e32\013v_cmp_f_i"
    "64\017v_cmp_f_i64_e32\013v_cmp_f_u32\017v_cmp_f_u32_e32\013v_cmp_f_u64\017"
    "v_cmp_f_u64_e32\014v_cmp_ge_f32\020v_cmp_ge_f32_e32\014v_cmp_ge_f64\020"
    "v_cmp_ge_f64_e32\014v_cmp_ge_i32\020v_cmp_ge_i32_e32\014v_cmp_ge_i64\020"
    "v_cmp_ge_i64_e32\014v_cmp_ge_u32\020v_cmp_ge_u32_e32\014v_cmp_ge_u64\020"
    "v_cmp_ge_u64_e32\014v_cmp_gt_f32\020v_cmp_gt_f32_e32\014v_cmp_gt_f64\020"
    "v_cmp_gt_f64_e32\014v_cmp_gt_i32\020v_cmp_gt_i32_e32\014v_cmp_gt_i64\020"
    "v_cmp_gt_i64_e32\014v_cmp_gt_u32\020v_cmp_gt_u32_e32\014v_cmp_gt_u64\020"
    "v_cmp_gt_u64_e32\014v_cmp_le_f32\020v_cmp_le_f32_e32\014v_cmp_le_f64\020"
    "v_cmp_le_f64_e32\014v_cmp_le_i32\020v_cmp_le_i32_e32\014v_cmp_le_i64\020"
    "v_cmp_le_i64_e32\014v_cmp_le_u32\020v_cmp_le_u32_e32\014v_cmp_le_u64\020"
    "v_cmp_le_u64_e32\014v_cmp_lg_f32\020v_cmp_lg_f32_e32\014v_cmp_lg_f64\020"
    "v_cmp_lg_f64_e32\014v_cmp_lt_f32\020v_cmp_lt_f32_e32\014v_cmp_lt_f64\020"
    "v_cmp_lt_f64_e32\014v_cmp_lt_i32\020v_cmp_lt_i32_e32\014v_cmp_lt_i64\020"
    "v_cmp_lt_i64_e32\014v_cmp_lt_u32\020v_cmp_lt_u32_e32\014v_cmp_lt_u64\020"
    "v_cmp_lt_u64_e32\014v_cmp_ne_i32\020v_cmp_ne_i32_e32\014v_cmp_ne_i64\020"
    "v_cmp_ne_i64_e32\014v_cmp_ne_u32\020v_cmp_ne_u32_e32\014v_cmp_ne_u64\020"
    "v_cmp_ne_u64_e32\015v_cmp_neq_f32\021v_cmp_neq_f32_e32\015v_cmp_neq_f64"
    "\021v_cmp_neq_f64_e32\015v_cmp_nge_f32\021v_cmp_nge_f32_e32\015v_cmp_ng"
    "e_f64\021v_cmp_nge_f64_e32\015v_cmp_ngt_f32\021v_cmp_ngt_f32_e32\015v_c"
    "mp_ngt_f64\021v_cmp_ngt_f64_e32\015v_cmp_nle_f32\021v_cmp_nle_f32_e32\015"
    "v_cmp_nle_f64\021v_cmp_nle_f64_e32\015v_cmp_nlg_f32\021v_cmp_nlg_f32_e3"
    "2\015v_cmp_nlg_f64\021v_cmp_nlg_f64_e32\015v_cmp_nlt_f32\021v_cmp_nlt_f"
    "32_e32\015v_cmp_nlt_f64\021v_cmp_nlt_f64_e32\013v_cmp_o_f32\017v_cmp_o_"
    "f32_e32\013v_cmp_o_f64\017v_cmp_o_f64_e32\013v_cmp_t_i32\017v_cmp_t_i32"
    "_e32\013v_cmp_t_i64\017v_cmp_t_i64_e32\013v_cmp_t_u32\017v_cmp_t_u32_e3"
    "2\013v_cmp_t_u64\017v_cmp_t_u64_e32\015v_cmp_tru_f32\021v_cmp_tru_f32_e"
    "32\015v_cmp_tru_f64\021v_cmp_tru_f64_e32\013v_cmp_u_f32\017v_cmp_u_f32_"
    "e32\013v_cmp_u_f64\017v_cmp_u_f64_e32\015v_cmps_eq_f32\021v_cmps_eq_f32"
    "_e32\015v_cmps_eq_f64\021v_cmps_eq_f64_e32\014v_cmps_f_f32\020v_cmps_f_"
    "f32_e32\014v_cmps_f_f64\020v_cmps_f_f64_e32\015v_cmps_ge_f32\021v_cmps_"
    "ge_f32_e32\015v_cmps_ge_f64\021v_cmps_ge_f64_e32\015v_cmps_gt_f32\021v_"
    "cmps_gt_f32_e32\015v_cmps_gt_f64\021v_cmps_gt_f64_e32\015v_cmps_le_f32\021"
    "v_cmps_le_f32_e32\015v_cmps_le_f64\021v_cmps_le_f64_e32\015v_cmps_lg_f3"
    "2\021v_cmps_lg_f32_e32\015v_cmps_lg_f64\021v_cmps_lg_f64_e32\015v_cmps_"
    "lt_f32\021v_cmps_lt_f32_e32\015v_cmps_lt_f64\021v_cmps_lt_f64_e32\016v_"
    "cmps_neq_f32\022v_cmps_neq_f32_e32\016v_cmps_neq_f64\022v_cmps_neq_f64_"
    "e32\016v_cmps_nge_f32\022v_cmps_nge_f32_e32\016v_cmps_nge_f64\022v_cmps"
    "_nge_f64_e32\016v_cmps_ngt_f32\022v_cmps_ngt_f32_e32\016v_cmps_ngt_f64\022"
    "v_cmps_ngt_f64_e32\016v_cmps_nle_f32\022v_cmps_nle_f32_e32\016v_cmps_nl"
    "e_f64\022v_cmps_nle_f64_e32\016v_cmps_nlg_f32\022v_cmps_nlg_f32_e32\016"
    "v_cmps_nlg_f64\022v_cmps_nlg_f64_e32\016v_cmps_nlt_f32\022v_cmps_nlt_f3"
    "2_e32\016v_cmps_nlt_f64\022v_cmps_nlt_f64_e32\014v_cmps_o_f32\020v_cmps"
    "_o_f32_e32\014v_cmps_o_f64\020v_cmps_o_f64_e32\016v_cmps_tru_f32\022v_c"
    "mps_tru_f32_e32\016v_cmps_tru_f64\022v_cmps_tru_f64_e32\014v_cmps_u_f32"
    "\020v_cmps_u_f32_e32\014v_cmps_u_f64\020v_cmps_u_f64_e32\016v_cmpsx_eq_"
    "f32\022v_cmpsx_eq_f32_e32\016v_cmpsx_eq_f64\022v_cmpsx_eq_f64_e32\015v_"
    "cmpsx_f_f32\021v_cmpsx_f_f32_e32\015v_cmpsx_f_f64\021v_cmpsx_f_f64_e32\016"
    "v_cmpsx_ge_f32\022v_cmpsx_ge_f32_e32\016v_cmpsx_ge_f64\022v_cmpsx_ge_f6"
    "4_e32\016v_cmpsx_gt_f32\022v_cmpsx_gt_f32_e32\016v_cmpsx_gt_f64\022v_cm"
    "psx_gt_f64_e32\016v_cmpsx_le_f32\022v_cmpsx_le_f32_e32\016v_cmpsx_le_f6"
    "4\022v_cmpsx_le_f64_e32\016v_cmpsx_lg_f32\022v_cmpsx_lg_f32_e32\016v_cm"
    "psx_lg_f64\022v_cmpsx_lg_f64_e32\016v_cmpsx_lt_f32\022v_cmpsx_lt_f32_e3"
    "2\016v_cmpsx_lt_f64\022v_cmpsx_lt_f64_e32\017v_cmpsx_neq_f32\023v_cmpsx"
    "_neq_f32_e32\017v_cmpsx_neq_f64\023v_cmpsx_neq_f64_e32\017v_cmpsx_nge_f"
    "32\023v_cmpsx_nge_f32_e32\017v_cmpsx_nge_f64\023v_cmpsx_nge_f64_e32\017"
    "v_cmpsx_ngt_f32\023v_cmpsx_ngt_f32_e32\017v_cmpsx_ngt_f64\023v_cmpsx_ng"
    "t_f64_e32\017v_cmpsx_nle_f32\023v_cmpsx_nle_f32_e32\017v_cmpsx_nle_f64\023"
    "v_cmpsx_nle_f64_e32\017v_cmpsx_nlg_f32\023v_cmpsx_nlg_f32_e32\017v_cmps"
    "x_nlg_f64\023v_cmpsx_nlg_f64_e32\017v_cmpsx_nlt_f32\023v_cmpsx_nlt_f32_"
    "e32\017v_cmpsx_nlt_f64\023v_cmpsx_nlt_f64_e32\015v_cmpsx_o_f32\021v_cmp"
    "sx_o_f32_e32\015v_cmpsx_o_f64\021v_cmpsx_o_f64_e32\017v_cmpsx_tru_f32\023"
    "v_cmpsx_tru_f32_e32\017v_cmpsx_tru_f64\023v_cmpsx_tru_f64_e32\015v_cmps"
    "x_u_f32\021v_cmpsx_u_f32_e32\015v_cmpsx_u_f64\021v_cmpsx_u_f64_e32\020v"
    "_cmpx_class_f32\024v_cmpx_class_f32_e32\020v_cmpx_class_f64\024v_cmpx_c"
    "lass_f64_e32\015v_cmpx_eq_f32\021v_cmpx_eq_f32_e32\015v_cmpx_eq_f64\021"
    "v_cmpx_eq_f64_e32\015v_cmpx_eq_i32\021v_cmpx_eq_i32_e32\015v_cmpx_eq_i6"
    "4\021v_cmpx_eq_i64_e32\015v_cmpx_eq_u32\021v_cmpx_eq_u32_e32\015v_cmpx_"
    "eq_u64\021v_cmpx_eq_u64_e32\014v_cmpx_f_f32\020v_cmpx_f_f32_e32\014v_cm"
    "px_f_f64\020v_cmpx_f_f64_e32\014v_cmpx_f_i32\020v_cmpx_f_i32_e32\014v_c"
    "mpx_f_i64\020v_cmpx_f_i64_e32\014v_cmpx_f_u32\020v_cmpx_f_u32_e32\014v_"
    "cmpx_f_u64\020v_cmpx_f_u64_e32\015v_cmpx_ge_f32\021v_cmpx_ge_f32_e32\015"
    "v_cmpx_ge_f64\021v_cmpx_ge_f64_e32\015v_cmpx_ge_i32\021v_cmpx_ge_i32_e3"
    "2\015v_cmpx_ge_i64\021v_cmpx_ge_i64_e32\015v_cmpx_ge_u32\021v_cmpx_ge_u"
    "32_e32\015v_cmpx_ge_u64\021v_cmpx_ge_u64_e32\015v_cmpx_gt_f32\021v_cmpx"
    "_gt_f32_e32\015v_cmpx_gt_f64\021v_cmpx_gt_f64_e32\015v_cmpx_gt_i32\021v"
    "_cmpx_gt_i32_e32\015v_cmpx_gt_i64\021v_cmpx_gt_i64_e32\015v_cmpx_gt_u32"
    "\021v_cmpx_gt_u32_e32\015v_cmpx_gt_u64\021v_cmpx_gt_u64_e32\015v_cmpx_l"
    "e_f32\021v_cmpx_le_f32_e32\015v_cmpx_le_f64\021v_cmpx_le_f64_e32\015v_c"
    "mpx_le_i32\021v_cmpx_le_i32_e32\015v_cmpx_le_i64\021v_cmpx_le_i64_e32\015"
    "v_cmpx_le_u32\021v_cmpx_le_u32_e32\015v_cmpx_le_u64\021v_cmpx_le_u64_e3"
    "2\015v_cmpx_lg_f32\021v_cmpx_lg_f32_e32\015v_cmpx_lg_f64\021v_cmpx_lg_f"
    "64_e32\015v_cmpx_lt_f32\021v_cmpx_lt_f32_e32\015v_cmpx_lt_f64\021v_cmpx"
    "_lt_f64_e32\015v_cmpx_lt_i32\021v_cmpx_lt_i32_e32\015v_cmpx_lt_i64\021v"
    "_cmpx_lt_i64_e32\015v_cmpx_lt_u32\021v_cmpx_lt_u32_e32\015v_cmpx_lt_u64"
    "\021v_cmpx_lt_u64_e32\015v_cmpx_ne_i32\021v_cmpx_ne_i32_e32\015v_cmpx_n"
    "e_i64\021v_cmpx_ne_i64_e32\015v_cmpx_ne_u32\021v_cmpx_ne_u32_e32\015v_c"
    "mpx_ne_u64\021v_cmpx_ne_u64_e32\016v_cmpx_neq_f32\022v_cmpx_neq_f32_e32"
    "\016v_cmpx_neq_f64\022v_cmpx_neq_f64_e32\016v_cmpx_nge_f32\022v_cmpx_ng"
    "e_f32_e32\016v_cmpx_nge_f64\022v_cmpx_nge_f64_e32\016v_cmpx_ngt_f32\022"
    "v_cmpx_ngt_f32_e32\016v_cmpx_ngt_f64\022v_cmpx_ngt_f64_e32\016v_cmpx_nl"
    "e_f32\022v_cmpx_nle_f32_e32\016v_cmpx_nle_f64\022v_cmpx_nle_f64_e32\016"
    "v_cmpx_nlg_f32\022v_cmpx_nlg_f32_e32\016v_cmpx_nlg_f64\022v_cmpx_nlg_f6"
    "4_e32\016v_cmpx_nlt_f32\022v_cmpx_nlt_f32_e32\016v_cmpx_nlt_f64\022v_cm"
    "px_nlt_f64_e32\014v_cmpx_o_f32\020v_cmpx_o_f32_e32\014v_cmpx_o_f64\020v"
    "_cmpx_o_f64_e32\014v_cmpx_t_i32\020v_cmpx_t_i32_e32\014v_cmpx_t_i64\020"
    "v_cmpx_t_i64_e32\014v_cmpx_t_u32\020v_cmpx_t_u32_e32\014v_cmpx_t_u64\020"
    "v_cmpx_t_u64_e32\016v_cmpx_tru_f32\022v_cmpx_tru_f32_e32\016v_cmpx_tru_"
    "f64\022v_cmpx_tru_f64_e32\014v_cmpx_u_f32\020v_cmpx_u_f32_e32\014v_cmpx"
    "_u_f64\020v_cmpx_u_f64_e32\015v_cndmask_b32\tv_cos_f16\tv_cos_f32\014v_"
    "cubeid_f32\014v_cubema_f32\014v_cubesc_f32\014v_cubetc_f32\015v_cvt_f16"
    "_f32\015v_cvt_f16_i16\015v_cvt_f16_u16\015v_cvt_f32_f16\015v_cvt_f32_f6"
    "4\015v_cvt_f32_i32\015v_cvt_f32_u32\020v_cvt_f32_ubyte0\020v_cvt_f32_ub"
    "yte1\020v_cvt_f32_ubyte2\020v_cvt_f32_ubyte3\015v_cvt_f64_f32\015v_cvt_"
    "f64_i32\015v_cvt_f64_u32\021v_cvt_flr_i32_f32\015v_cvt_i16_f16\015v_cvt"
    "_i32_f32\015v_cvt_i32_f64\020v_cvt_off_f32_i4\020v_cvt_pk_i16_i32\020v_"
    "cvt_pk_u16_u32\024v_cvt_pkaccum_u8_f32\024v_cvt_pknorm_i16_f32\024v_cvt"
    "_pknorm_u16_f32\023v_cvt_pkrtz_f16_f32\021v_cvt_rpi_i32_f32\015v_cvt_u1"
    "6_f16\015v_cvt_u32_f32\015v_cvt_u32_f64\017v_div_fixup_f32\017v_div_fix"
    "up_f64\016v_div_fmas_f32\016v_div_fmas_f64\017v_div_scale_f32\017v_div_"
    "scale_f64\tv_exp_f16\tv_exp_f32\020v_exp_legacy_f32\nv_ffbh_i32\nv_ffbh"
    "_u32\nv_ffbl_b32\013v_floor_f16\013v_floor_f32\013v_floor_f64\tv_fma_f3"
    "2\tv_fma_f64\013v_fract_f16\013v_fract_f32\013v_fract_f64\023v_frexp_ex"
    "p_i16_f16\023v_frexp_exp_i32_f32\023v_frexp_exp_i32_f64\020v_frexp_mant"
    "_f16\020v_frexp_mant_f32\020v_frexp_mant_f64\020v_interp_mov_f32\017v_i"
    "nterp_p1_f32\017v_interp_p2_f32\013v_ldexp_f16\013v_ldexp_f32\013v_ldex"
    "p_f64\017v_log_clamp_f32\tv_log_f16\tv_log_f32\020v_log_legacy_f32\nv_l"
    "shl_b32\nv_lshl_b64\015v_lshlrev_b16\015v_lshlrev_b32\015v_lshlrev_b64\n"
    "v_lshr_b32\nv_lshr_b64\015v_lshrrev_b16\015v_lshrrev_b32\015v_lshrrev_b"
    "64\tv_mac_f16\tv_mac_f32\020v_mac_legacy_f32\tv_mad_f32\015v_mad_i32_i2"
    "4\015v_mad_i64_i32\020v_mad_legacy_f32\015v_mad_u32_u24\015v_mad_u64_u3"
    "2\013v_madak_f16\013v_madak_f32\013v_madmk_f16\013v_madmk_f32\nv_max3_f"
    "32\nv_max3_i32\nv_max3_u32\tv_max_f16\tv_max_f32\tv_max_f64\tv_max_i16\t"
    "v_max_i32\020v_max_legacy_f32\tv_max_u16\tv_max_u32\022v_mbcnt_hi_u32_b"
    "32\022v_mbcnt_lo_u32_b32\nv_med3_f32\nv_med3_i32\nv_med3_u32\nv_min3_f3"
    "2\nv_min3_i32\nv_min3_u32\tv_min_f16\tv_min_f32\tv_min_f64\tv_min_i16\t"
    "v_min_i32\020v_min_legacy_f32\tv_min_u16\tv_min_u32\tv_mov_b32\015v_mov"
    "_fed_b32\015v_movreld_b32\015v_movrels_b32\016v_movrelsd_b32\016v_mqsad"
    "_u16_u8\016v_mqsad_u32_u8\tv_mul_f16\tv_mul_f32\tv_mul_f64\014v_mul_hi_"
    "i32\020v_mul_hi_i32_i24\014v_mul_hi_u32\020v_mul_hi_u32_u24\015v_mul_i3"
    "2_i24\020v_mul_legacy_f32\014v_mul_lo_i32\014v_mul_lo_u16\014v_mul_lo_u"
    "32\015v_mul_u32_u24\014v_mullit_f32\005v_nop\tv_not_b32\010v_or_b32\020"
    "v_qsad_pk_u16_u8\017v_rcp_clamp_f32\017v_rcp_clamp_f64\tv_rcp_f16\tv_rc"
    "p_f32\tv_rcp_f64\017v_rcp_iflag_f32\020v_rcp_legacy_f32\023v_readfirstl"
    "ane_b32\016v_readlane_b32\013v_rndne_f16\013v_rndne_f32\013v_rndne_f64\017"
    "v_rsq_clamp_f32\017v_rsq_clamp_f64\tv_rsq_f16\tv_rsq_f32\tv_rsq_f64\020"
    "v_rsq_legacy_f32\tv_sad_u32\tv_sin_f16\tv_sin_f32\nv_sqrt_f16\nv_sqrt_f"
    "32\nv_sqrt_f64\tv_sub_f16\tv_sub_f32\tv_sub_i32\tv_sub_u16\nv_subb_u32\015"
    "v_subbrev_u32\014v_subrev_f16\014v_subrev_f32\014v_subrev_i32\014v_subr"
    "ev_u16\020v_trig_preop_f64\013v_trunc_f16\013v_trunc_f32\013v_trunc_f64"
    "\017v_writelane_b32\tv_xor_b32";

namespace {
  struct MatchEntry {
    uint16_t Mnemonic;
    uint16_t Opcode;
    uint16_t ConvertFn;
    uint8_t RequiredFeatures;
    uint16_t Classes[14];
    StringRef getMnemonic() const {
      return StringRef(MnemonicTable + Mnemonic + 1,
                       MnemonicTable[Mnemonic]);
    }
  };

  // Predicate for searching for an opcode.
  struct LessOpcode {
    bool operator()(const MatchEntry &LHS, StringRef RHS) {
      return LHS.getMnemonic() < RHS;
    }
    bool operator()(StringRef LHS, const MatchEntry &RHS) {
      return LHS < RHS.getMnemonic();
    }
    bool operator()(const MatchEntry &LHS, const MatchEntry &RHS) {
      return LHS.getMnemonic() < RHS.getMnemonic();
    }
  };
} // end anonymous namespace.

static const MatchEntry MatchTable0[] = {
  { 0 /* CALL_FS */, AMDGPU::CF_CALL_FS_EG, Convert_NoOperands, 0, { MCK_CALL_95_FS }, },
  { 0 /* CALL_FS */, AMDGPU::CF_CALL_FS_R600, Convert_NoOperands, 0, { MCK_CALL_95_FS }, },
  { 8 /* CF_END */, AMDGPU::CF_END_CM, Convert_NoOperands, 0, { MCK_CF_95_END }, },
  { 8 /* CF_END */, AMDGPU::CF_END_EG, Convert_NoOperands, 0, { MCK_CF_95_END }, },
  { 8 /* CF_END */, AMDGPU::CF_END_R600, Convert_NoOperands, 0, { MCK_CF_95_END }, },
  { 15 /* CONTINUE */, AMDGPU::CF_CONTINUE_EG, Convert__Imm1_2, 0, { MCK_CONTINUE, MCK__64_, MCK_Imm }, },
  { 15 /* CONTINUE */, AMDGPU::CF_CONTINUE_R600, Convert__Imm1_2, 0, { MCK_CONTINUE, MCK__64_, MCK_Imm }, },
  { 24 /* ELSE */, AMDGPU::CF_ELSE_EG, Convert__Imm1_2__Imm1_4, 0, { MCK_ELSE, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 24 /* ELSE */, AMDGPU::CF_ELSE_R600, Convert__Imm1_2__Imm1_4, 0, { MCK_ELSE, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 29 /* END_LOOP */, AMDGPU::END_LOOP_EG, Convert__Imm1_2, 0, { MCK_END_95_LOOP, MCK__64_, MCK_Imm }, },
  { 29 /* END_LOOP */, AMDGPU::END_LOOP_R600, Convert__Imm1_2, 0, { MCK_END_95_LOOP, MCK__64_, MCK_Imm }, },
  { 38 /* INTERP_LOAD */, AMDGPU::INTERP_VEC_LOAD, Convert__Reg1_3__Imm1_1, 0, { MCK_INTERP_95_LOAD, MCK_Imm, MCK__COLON_, MCK_R600_Reg128 }, },
  { 50 /* INTERP_PAIR_XY */, AMDGPU::INTERP_PAIR_XY, Convert__Reg1_5__imm_95_0__Imm1_1__Reg1_2__Reg1_3, 0, { MCK_INTERP_95_PAIR_95_XY, MCK_Imm, MCK_R600_TReg32_Y, MCK_R600_TReg32_X, MCK__COLON_, MCK_R600_TReg32_X, MCK_dst1 }, },
  { 65 /* INTERP_PAIR_ZW */, AMDGPU::INTERP_PAIR_ZW, Convert__Reg1_5__imm_95_0__Imm1_1__Reg1_2__Reg1_3, 0, { MCK_INTERP_95_PAIR_95_ZW, MCK_Imm, MCK_R600_TReg32_Y, MCK_R600_TReg32_X, MCK__COLON_, MCK_R600_TReg32_Z, MCK_dst1 }, },
  { 80 /* JUMP */, AMDGPU::CF_JUMP_EG, Convert__Imm1_2__Imm1_4, 0, { MCK_JUMP, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 80 /* JUMP */, AMDGPU::CF_JUMP_R600, Convert__Imm1_2__Imm1_4, 0, { MCK_JUMP, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 85 /* LOOP_BREAK */, AMDGPU::LOOP_BREAK_EG, Convert__Imm1_2, 0, { MCK_LOOP_95_BREAK, MCK__64_, MCK_Imm }, },
  { 85 /* LOOP_BREAK */, AMDGPU::LOOP_BREAK_R600, Convert__Imm1_2, 0, { MCK_LOOP_95_BREAK, MCK__64_, MCK_Imm }, },
  { 96 /* LOOP_START_DX10 */, AMDGPU::WHILE_LOOP_EG, Convert__Imm1_2, 0, { MCK_LOOP_95_START_95_DX10, MCK__64_, MCK_Imm }, },
  { 96 /* LOOP_START_DX10 */, AMDGPU::WHILE_LOOP_R600, Convert__Imm1_2, 0, { MCK_LOOP_95_START_95_DX10, MCK__64_, MCK_Imm }, },
  { 112 /* MASK_WRITE */, AMDGPU::MASK_WRITE, Convert__Reg1_1, 0, { MCK_MASK_95_WRITE, MCK_R600_Reg32 }, },
  { 123 /* PAD */, AMDGPU::PAD, Convert_NoOperands, 0, { MCK_PAD }, },
  { 127 /* POP */, AMDGPU::POP_EG, Convert__Imm1_2__Imm1_4, 0, { MCK_POP, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 127 /* POP */, AMDGPU::POP_R600, Convert__Imm1_2__Imm1_4, 0, { MCK_POP, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 131 /* PUSH */, AMDGPU::CF_PUSH_EG, Convert__Imm1_2__Imm1_4, 0, { MCK_PUSH, MCK__64_, MCK_Imm, MCK_POP_COLON_, MCK_Imm }, },
  { 136 /* PUSH_ELSE */, AMDGPU::CF_PUSH_ELSE_R600, Convert__Imm1_2, 0, { MCK_PUSH_95_ELSE, MCK__64_, MCK_Imm }, },
  { 146 /* TEX */, AMDGPU::CF_TC_EG, Convert__Imm1_3__Imm1_1, 0, { MCK_TEX, MCK_Imm, MCK__64_, MCK_Imm }, },
  { 146 /* TEX */, AMDGPU::CF_TC_R600, Convert__Imm1_3__Imm1_1, 0, { MCK_TEX, MCK_Imm, MCK__64_, MCK_Imm }, },
  { 150 /* VTX */, AMDGPU::CF_VC_EG, Convert__Imm1_3__Imm1_1, 0, { MCK_VTX, MCK_Imm, MCK__64_, MCK_Imm }, },
  { 150 /* VTX */, AMDGPU::CF_VC_R600, Convert__Imm1_3__Imm1_1, 0, { MCK_VTX, MCK_Imm, MCK__64_, MCK_Imm }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 154 /* buffer_atomic_add */, AMDGPU::BUFFER_ATOMIC_ADD_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_add, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 172 /* buffer_atomic_and */, AMDGPU::BUFFER_ATOMIC_AND_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_and, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 190 /* buffer_atomic_or */, AMDGPU::BUFFER_ATOMIC_OR_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_or, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 207 /* buffer_atomic_smax */, AMDGPU::BUFFER_ATOMIC_SMAX_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smax, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 226 /* buffer_atomic_smin */, AMDGPU::BUFFER_ATOMIC_SMIN_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_smin, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 245 /* buffer_atomic_sub */, AMDGPU::BUFFER_ATOMIC_SUB_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_sub, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 263 /* buffer_atomic_swap */, AMDGPU::BUFFER_ATOMIC_SWAP_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_swap, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 282 /* buffer_atomic_umax */, AMDGPU::BUFFER_ATOMIC_UMAX_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umax, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 301 /* buffer_atomic_umin */, AMDGPU::BUFFER_ATOMIC_UMIN_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_umin, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_SLCparseMubufOptionalOps }, },
  { 320 /* buffer_atomic_xor */, AMDGPU::BUFFER_ATOMIC_XOR_RTN_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_atomic_95_xor, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_glc, MCK_SLCparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 338 /* buffer_load_dword */, AMDGPU::BUFFER_LOAD_DWORD_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 356 /* buffer_load_dwordx2 */, AMDGPU::BUFFER_LOAD_DWORDX2_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 376 /* buffer_load_dwordx4 */, AMDGPU::BUFFER_LOAD_DWORDX4_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 396 /* buffer_load_format_x */, AMDGPU::BUFFER_LOAD_FORMAT_X_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 417 /* buffer_load_format_xy */, AMDGPU::BUFFER_LOAD_FORMAT_XY_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 439 /* buffer_load_format_xyz */, AMDGPU::BUFFER_LOAD_FORMAT_XYZ_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 462 /* buffer_load_format_xyzw */, AMDGPU::BUFFER_LOAD_FORMAT_XYZW_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 486 /* buffer_load_sbyte */, AMDGPU::BUFFER_LOAD_SBYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sbyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 504 /* buffer_load_sshort */, AMDGPU::BUFFER_LOAD_SSHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_sshort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 523 /* buffer_load_ubyte */, AMDGPU::BUFFER_LOAD_UBYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ubyte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 541 /* buffer_load_ushort */, AMDGPU::BUFFER_LOAD_USHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_load_95_ushort, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTEanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTEanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 560 /* buffer_store_byte */, AMDGPU::BUFFER_STORE_BYTE_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_byte, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORDanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORDanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 578 /* buffer_store_dword */, AMDGPU::BUFFER_STORE_DWORD_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2anonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2anonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 597 /* buffer_store_dwordx2 */, AMDGPU::BUFFER_STORE_DWORDX2_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4anonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4anonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 618 /* buffer_store_dwordx4 */, AMDGPU::BUFFER_STORE_DWORDX4_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_Xanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 639 /* buffer_store_format_x */, AMDGPU::BUFFER_STORE_FORMAT_X_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XYanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 661 /* buffer_store_format_xy */, AMDGPU::BUFFER_STORE_FORMAT_XY_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 684 /* buffer_store_format_xyz */, AMDGPU::BUFFER_STORE_FORMAT_XYZ_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyz, MCK_VReg_96, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZWanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 708 /* buffer_store_format_xyzw */, AMDGPU::BUFFER_STORE_FORMAT_XYZW_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFSET_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFSET_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_IDXEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_IDXEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_OFFEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_ADDR64_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_addr64, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORTanonymous_792_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORTanonymous_792_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VGPR_32, MCK_SReg_128, MCK_SCSrc32, MCK_Imm, MCK_Imm, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_BOTHEN_si, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 733 /* buffer_store_short */, AMDGPU::BUFFER_STORE_SHORT_BOTHEN_vi, ConvertCustom_cvtMubuf, Feature_isGCN, { MCK_buffer_95_store_95_short, MCK_VGPR_32, MCK_VReg_64, MCK_SReg_128, MCK_SCSrc32, MCK_idxen, MCK_offen, MCK_MubufOffset, MCK_GLCparseMubufOptionalOps, MCK_SLCparseMubufOptionalOps, MCK_TFEparseMubufOptionalOps }, },
  { 752 /* buffer_wbinvl1 */, AMDGPU::BUFFER_WBINVL1_si, Convert_NoOperands, Feature_isGCN, { MCK_buffer_95_wbinvl1 }, },
  { 752 /* buffer_wbinvl1 */, AMDGPU::BUFFER_WBINVL1_vi, Convert_NoOperands, Feature_isGCN, { MCK_buffer_95_wbinvl1 }, },
  { 767 /* buffer_wbinvl1_sc */, AMDGPU::BUFFER_WBINVL1_SC_si, Convert_NoOperands, Feature_isSI, { MCK_buffer_95_wbinvl1_95_sc }, },
  { 767 /* buffer_wbinvl1_sc */, AMDGPU::BUFFER_WBINVL1_SC_vi, Convert_NoOperands, Feature_isSI, { MCK_buffer_95_wbinvl1_95_sc }, },
  { 785 /* buffer_wbinvl1_vol */, AMDGPU::BUFFER_WBINVL1_VOL_si, Convert_NoOperands, Feature_isCIVI, { MCK_buffer_95_wbinvl1_95_vol }, },
  { 785 /* buffer_wbinvl1_vol */, AMDGPU::BUFFER_WBINVL1_VOL_vi, Convert_NoOperands, Feature_isCIVI, { MCK_buffer_95_wbinvl1_95_vol }, },
  { 804 /* ds_add_rtn_u32 */, AMDGPU::DS_ADD_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 804 /* ds_add_rtn_u32 */, AMDGPU::DS_ADD_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 819 /* ds_add_rtn_u64 */, AMDGPU::DS_ADD_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 819 /* ds_add_rtn_u64 */, AMDGPU::DS_ADD_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 834 /* ds_add_src2_u32 */, AMDGPU::DS_ADD_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 834 /* ds_add_src2_u32 */, AMDGPU::DS_ADD_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 850 /* ds_add_src2_u64 */, AMDGPU::DS_ADD_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 850 /* ds_add_src2_u64 */, AMDGPU::DS_ADD_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 866 /* ds_add_u32 */, AMDGPU::DS_ADD_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 866 /* ds_add_u32 */, AMDGPU::DS_ADD_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 877 /* ds_add_u64 */, AMDGPU::DS_ADD_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 877 /* ds_add_u64 */, AMDGPU::DS_ADD_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_add_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 888 /* ds_and_b32 */, AMDGPU::DS_AND_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 888 /* ds_and_b32 */, AMDGPU::DS_AND_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 899 /* ds_and_b64 */, AMDGPU::DS_AND_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 899 /* ds_and_b64 */, AMDGPU::DS_AND_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 910 /* ds_and_rtn_b32 */, AMDGPU::DS_AND_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 910 /* ds_and_rtn_b32 */, AMDGPU::DS_AND_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 925 /* ds_and_rtn_b64 */, AMDGPU::DS_AND_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 925 /* ds_and_rtn_b64 */, AMDGPU::DS_AND_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 940 /* ds_and_src2_b64 */, AMDGPU::DS_AND_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 940 /* ds_and_src2_b64 */, AMDGPU::DS_AND_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 956 /* ds_and_src_b32 */, AMDGPU::DS_AND_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_src_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 956 /* ds_and_src_b32 */, AMDGPU::DS_AND_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_and_95_src_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 971 /* ds_append */, AMDGPU::DS_APPEND_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_append, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 971 /* ds_append */, AMDGPU::DS_APPEND_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_append, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 981 /* ds_cmpst_b32 */, AMDGPU::DS_CMPST_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 981 /* ds_cmpst_b32 */, AMDGPU::DS_CMPST_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 994 /* ds_cmpst_b64 */, AMDGPU::DS_CMPST_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 994 /* ds_cmpst_b64 */, AMDGPU::DS_CMPST_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1007 /* ds_cmpst_f32 */, AMDGPU::DS_CMPST_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1007 /* ds_cmpst_f32 */, AMDGPU::DS_CMPST_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1020 /* ds_cmpst_f64 */, AMDGPU::DS_CMPST_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1020 /* ds_cmpst_f64 */, AMDGPU::DS_CMPST_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1033 /* ds_cmpst_rtn_b32 */, AMDGPU::DS_CMPST_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1033 /* ds_cmpst_rtn_b32 */, AMDGPU::DS_CMPST_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1050 /* ds_cmpst_rtn_b64 */, AMDGPU::DS_CMPST_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1050 /* ds_cmpst_rtn_b64 */, AMDGPU::DS_CMPST_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1067 /* ds_cmpst_rtn_f32 */, AMDGPU::DS_CMPST_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1067 /* ds_cmpst_rtn_f32 */, AMDGPU::DS_CMPST_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1084 /* ds_cmpst_rtn_f64 */, AMDGPU::DS_CMPST_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1084 /* ds_cmpst_rtn_f64 */, AMDGPU::DS_CMPST_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_cmpst_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1101 /* ds_consume */, AMDGPU::DS_CONSUME_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_consume, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1101 /* ds_consume */, AMDGPU::DS_CONSUME_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_consume, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1112 /* ds_dec_rtn_u32 */, AMDGPU::DS_DEC_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1112 /* ds_dec_rtn_u32 */, AMDGPU::DS_DEC_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1127 /* ds_dec_rtn_u64 */, AMDGPU::DS_DEC_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1127 /* ds_dec_rtn_u64 */, AMDGPU::DS_DEC_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1142 /* ds_dec_src2_u32 */, AMDGPU::DS_DEC_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1142 /* ds_dec_src2_u32 */, AMDGPU::DS_DEC_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1158 /* ds_dec_src2_u64 */, AMDGPU::DS_DEC_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1158 /* ds_dec_src2_u64 */, AMDGPU::DS_DEC_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1174 /* ds_dec_u32 */, AMDGPU::DS_DEC_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1174 /* ds_dec_u32 */, AMDGPU::DS_DEC_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1185 /* ds_dec_u64 */, AMDGPU::DS_DEC_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1185 /* ds_dec_u64 */, AMDGPU::DS_DEC_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_dec_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1196 /* ds_gws_barrier */, AMDGPU::DS_GWS_BARRIER_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_barrier, MCK_VGPR_32, MCK_gds }, },
  { 1196 /* ds_gws_barrier */, AMDGPU::DS_GWS_BARRIER_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_barrier, MCK_VGPR_32, MCK_gds }, },
  { 1211 /* ds_gws_init */, AMDGPU::DS_GWS_INIT_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_init, MCK_VGPR_32, MCK_gds }, },
  { 1211 /* ds_gws_init */, AMDGPU::DS_GWS_INIT_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_init, MCK_VGPR_32, MCK_gds }, },
  { 1223 /* ds_gws_sema_br */, AMDGPU::DS_GWS_SEMA_BR_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_br, MCK_VGPR_32, MCK_gds }, },
  { 1223 /* ds_gws_sema_br */, AMDGPU::DS_GWS_SEMA_BR_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_br, MCK_VGPR_32, MCK_gds }, },
  { 1238 /* ds_gws_sema_p */, AMDGPU::DS_GWS_SEMA_P_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_p, MCK_VGPR_32, MCK_gds }, },
  { 1238 /* ds_gws_sema_p */, AMDGPU::DS_GWS_SEMA_P_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_p, MCK_VGPR_32, MCK_gds }, },
  { 1252 /* ds_gws_sema_v */, AMDGPU::DS_GWS_SEMA_V_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_v, MCK_VGPR_32, MCK_gds }, },
  { 1252 /* ds_gws_sema_v */, AMDGPU::DS_GWS_SEMA_V_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_gws_95_sema_95_v, MCK_VGPR_32, MCK_gds }, },
  { 1266 /* ds_inc_rtn_u32 */, AMDGPU::DS_INC_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1266 /* ds_inc_rtn_u32 */, AMDGPU::DS_INC_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1281 /* ds_inc_rtn_u64 */, AMDGPU::DS_INC_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1281 /* ds_inc_rtn_u64 */, AMDGPU::DS_INC_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1296 /* ds_inc_src2_u32 */, AMDGPU::DS_INC_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1296 /* ds_inc_src2_u32 */, AMDGPU::DS_INC_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1312 /* ds_inc_src2_u64 */, AMDGPU::DS_INC_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1312 /* ds_inc_src2_u64 */, AMDGPU::DS_INC_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1328 /* ds_inc_u32 */, AMDGPU::DS_INC_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1328 /* ds_inc_u32 */, AMDGPU::DS_INC_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1339 /* ds_inc_u64 */, AMDGPU::DS_INC_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1339 /* ds_inc_u64 */, AMDGPU::DS_INC_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_inc_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1350 /* ds_max_f32 */, AMDGPU::DS_MAX_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1350 /* ds_max_f32 */, AMDGPU::DS_MAX_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1361 /* ds_max_f64 */, AMDGPU::DS_MAX_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1361 /* ds_max_f64 */, AMDGPU::DS_MAX_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1372 /* ds_max_i32 */, AMDGPU::DS_MAX_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1372 /* ds_max_i32 */, AMDGPU::DS_MAX_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1383 /* ds_max_i64 */, AMDGPU::DS_MAX_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_i64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1383 /* ds_max_i64 */, AMDGPU::DS_MAX_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_i64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1394 /* ds_max_rtn_f32 */, AMDGPU::DS_MAX_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1394 /* ds_max_rtn_f32 */, AMDGPU::DS_MAX_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1409 /* ds_max_rtn_f64 */, AMDGPU::DS_MAX_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1409 /* ds_max_rtn_f64 */, AMDGPU::DS_MAX_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1424 /* ds_max_rtn_i32 */, AMDGPU::DS_MAX_RTN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1424 /* ds_max_rtn_i32 */, AMDGPU::DS_MAX_RTN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1439 /* ds_max_rtn_i64 */, AMDGPU::DS_MAX_RTN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_i64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1439 /* ds_max_rtn_i64 */, AMDGPU::DS_MAX_RTN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_i64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1454 /* ds_max_rtn_u32 */, AMDGPU::DS_MAX_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1454 /* ds_max_rtn_u32 */, AMDGPU::DS_MAX_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1469 /* ds_max_rtn_u64 */, AMDGPU::DS_MAX_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1469 /* ds_max_rtn_u64 */, AMDGPU::DS_MAX_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1484 /* ds_max_src2_f32 */, AMDGPU::DS_MAX_SRC2_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_f32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1484 /* ds_max_src2_f32 */, AMDGPU::DS_MAX_SRC2_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_f32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1500 /* ds_max_src2_f64 */, AMDGPU::DS_MAX_SRC2_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_f64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1500 /* ds_max_src2_f64 */, AMDGPU::DS_MAX_SRC2_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_f64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1516 /* ds_max_src2_i32 */, AMDGPU::DS_MAX_SRC2_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_i32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1516 /* ds_max_src2_i32 */, AMDGPU::DS_MAX_SRC2_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_i32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1532 /* ds_max_src2_i64 */, AMDGPU::DS_MAX_SRC2_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_i64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1532 /* ds_max_src2_i64 */, AMDGPU::DS_MAX_SRC2_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_i64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1548 /* ds_max_src2_u32 */, AMDGPU::DS_MAX_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1548 /* ds_max_src2_u32 */, AMDGPU::DS_MAX_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1564 /* ds_max_src2_u64 */, AMDGPU::DS_MAX_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1564 /* ds_max_src2_u64 */, AMDGPU::DS_MAX_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1580 /* ds_max_u32 */, AMDGPU::DS_MAX_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1580 /* ds_max_u32 */, AMDGPU::DS_MAX_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1591 /* ds_max_u64 */, AMDGPU::DS_MAX_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1591 /* ds_max_u64 */, AMDGPU::DS_MAX_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_max_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1602 /* ds_min_f32 */, AMDGPU::DS_MIN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1602 /* ds_min_f32 */, AMDGPU::DS_MIN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1613 /* ds_min_f64 */, AMDGPU::DS_MIN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1613 /* ds_min_f64 */, AMDGPU::DS_MIN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_f64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1624 /* ds_min_i32 */, AMDGPU::DS_MIN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1624 /* ds_min_i32 */, AMDGPU::DS_MIN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1635 /* ds_min_i64 */, AMDGPU::DS_MIN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_i64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1635 /* ds_min_i64 */, AMDGPU::DS_MIN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_i64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1646 /* ds_min_rtn_f32 */, AMDGPU::DS_MIN_RTN_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1646 /* ds_min_rtn_f32 */, AMDGPU::DS_MIN_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1661 /* ds_min_rtn_f64 */, AMDGPU::DS_MIN_RTN_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1661 /* ds_min_rtn_f64 */, AMDGPU::DS_MIN_RTN_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_f64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1676 /* ds_min_rtn_i32 */, AMDGPU::DS_MIN_RTN_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1676 /* ds_min_rtn_i32 */, AMDGPU::DS_MIN_RTN_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_i32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1691 /* ds_min_rtn_i64 */, AMDGPU::DS_MIN_RTN_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_i64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1691 /* ds_min_rtn_i64 */, AMDGPU::DS_MIN_RTN_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_i64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1706 /* ds_min_rtn_u32 */, AMDGPU::DS_MIN_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1706 /* ds_min_rtn_u32 */, AMDGPU::DS_MIN_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1721 /* ds_min_rtn_u64 */, AMDGPU::DS_MIN_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1721 /* ds_min_rtn_u64 */, AMDGPU::DS_MIN_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1736 /* ds_min_src2_f32 */, AMDGPU::DS_MIN_SRC2_F32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_f32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1736 /* ds_min_src2_f32 */, AMDGPU::DS_MIN_SRC2_F32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_f32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1752 /* ds_min_src2_f64 */, AMDGPU::DS_MIN_SRC2_F64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_f64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1752 /* ds_min_src2_f64 */, AMDGPU::DS_MIN_SRC2_F64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_f64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1768 /* ds_min_src2_i32 */, AMDGPU::DS_MIN_SRC2_I32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_i32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1768 /* ds_min_src2_i32 */, AMDGPU::DS_MIN_SRC2_I32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_i32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1784 /* ds_min_src2_i64 */, AMDGPU::DS_MIN_SRC2_I64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_i64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1784 /* ds_min_src2_i64 */, AMDGPU::DS_MIN_SRC2_I64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_i64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1800 /* ds_min_src2_u32 */, AMDGPU::DS_MIN_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1800 /* ds_min_src2_u32 */, AMDGPU::DS_MIN_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1816 /* ds_min_src2_u64 */, AMDGPU::DS_MIN_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1816 /* ds_min_src2_u64 */, AMDGPU::DS_MIN_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1832 /* ds_min_u32 */, AMDGPU::DS_MIN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1832 /* ds_min_u32 */, AMDGPU::DS_MIN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1843 /* ds_min_u64 */, AMDGPU::DS_MIN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1843 /* ds_min_u64 */, AMDGPU::DS_MIN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_min_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1854 /* ds_mskor_b32 */, AMDGPU::DS_MSKOR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1854 /* ds_mskor_b32 */, AMDGPU::DS_MSKOR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1867 /* ds_mskor_b64 */, AMDGPU::DS_MSKOR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1867 /* ds_mskor_b64 */, AMDGPU::DS_MSKOR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1880 /* ds_mskor_rtn_b32 */, AMDGPU::DS_MSKOR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1880 /* ds_mskor_rtn_b32 */, AMDGPU::DS_MSKOR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1897 /* ds_mskor_rtn_b64 */, AMDGPU::DS_MSKOR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1897 /* ds_mskor_rtn_b64 */, AMDGPU::DS_MSKOR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_mskor_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1914 /* ds_or_b32 */, AMDGPU::DS_OR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1914 /* ds_or_b32 */, AMDGPU::DS_OR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1924 /* ds_or_b64 */, AMDGPU::DS_OR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1924 /* ds_or_b64 */, AMDGPU::DS_OR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1934 /* ds_or_rtn_b32 */, AMDGPU::DS_OR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1934 /* ds_or_rtn_b32 */, AMDGPU::DS_OR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1948 /* ds_or_rtn_b64 */, AMDGPU::DS_OR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1948 /* ds_or_rtn_b64 */, AMDGPU::DS_OR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1962 /* ds_or_src2_b32 */, AMDGPU::DS_OR_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1962 /* ds_or_src2_b32 */, AMDGPU::DS_OR_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1977 /* ds_or_src2_b64 */, AMDGPU::DS_OR_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1977 /* ds_or_src2_b64 */, AMDGPU::DS_OR_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_or_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 1992 /* ds_ordered_count */, AMDGPU::DS_ORDERED_COUNT_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_ordered_95_count, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOffsetOptional, MCK_gds }, },
  { 1992 /* ds_ordered_count */, AMDGPU::DS_ORDERED_COUNT_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_ordered_95_count, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOffsetOptional, MCK_gds }, },
  { 2009 /* ds_read2_b32 */, AMDGPU::DS_READ2_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2009 /* ds_read2_b32 */, AMDGPU::DS_READ2_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2022 /* ds_read2_b64 */, AMDGPU::DS_READ2_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2022 /* ds_read2_b64 */, AMDGPU::DS_READ2_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2035 /* ds_read2st64_b32 */, AMDGPU::DS_READ2ST64_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2st64_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2035 /* ds_read2st64_b32 */, AMDGPU::DS_READ2ST64_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2st64_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2052 /* ds_read2st64_b64 */, AMDGPU::DS_READ2ST64_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2st64_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2052 /* ds_read2st64_b64 */, AMDGPU::DS_READ2ST64_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_read2st64_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2069 /* ds_read_b32 */, AMDGPU::DS_READ_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2069 /* ds_read_b32 */, AMDGPU::DS_READ_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2081 /* ds_read_b64 */, AMDGPU::DS_READ_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2081 /* ds_read_b64 */, AMDGPU::DS_READ_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2093 /* ds_read_i16 */, AMDGPU::DS_READ_I16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_i16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2093 /* ds_read_i16 */, AMDGPU::DS_READ_I16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_i16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2105 /* ds_read_i8 */, AMDGPU::DS_READ_I8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_i8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2105 /* ds_read_i8 */, AMDGPU::DS_READ_I8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_i8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2116 /* ds_read_u16 */, AMDGPU::DS_READ_U16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_u16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2116 /* ds_read_u16 */, AMDGPU::DS_READ_U16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_u16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2128 /* ds_read_u8 */, AMDGPU::DS_READ_U8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_u8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2128 /* ds_read_u8 */, AMDGPU::DS_READ_U8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_read_95_u8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2139 /* ds_rsub_rtn_u32 */, AMDGPU::DS_RSUB_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2139 /* ds_rsub_rtn_u32 */, AMDGPU::DS_RSUB_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2155 /* ds_rsub_rtn_u64 */, AMDGPU::DS_RSUB_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2155 /* ds_rsub_rtn_u64 */, AMDGPU::DS_RSUB_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2171 /* ds_rsub_src2_u32 */, AMDGPU::DS_RSUB_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2171 /* ds_rsub_src2_u32 */, AMDGPU::DS_RSUB_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2188 /* ds_rsub_src2_u64 */, AMDGPU::DS_RSUB_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2188 /* ds_rsub_src2_u64 */, AMDGPU::DS_RSUB_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2205 /* ds_rsub_u32 */, AMDGPU::DS_RSUB_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2205 /* ds_rsub_u32 */, AMDGPU::DS_RSUB_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2217 /* ds_rsub_u64 */, AMDGPU::DS_RSUB_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2217 /* ds_rsub_u64 */, AMDGPU::DS_RSUB_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_rsub_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2229 /* ds_sub_rtn_u32 */, AMDGPU::DS_SUB_RTN_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2229 /* ds_sub_rtn_u32 */, AMDGPU::DS_SUB_RTN_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_rtn_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2244 /* ds_sub_rtn_u64 */, AMDGPU::DS_SUB_RTN_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2244 /* ds_sub_rtn_u64 */, AMDGPU::DS_SUB_RTN_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_rtn_95_u64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2259 /* ds_sub_src2_u32 */, AMDGPU::DS_SUB_SRC2_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2259 /* ds_sub_src2_u32 */, AMDGPU::DS_SUB_SRC2_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_src2_95_u32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2275 /* ds_sub_src2_u64 */, AMDGPU::DS_SUB_SRC2_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2275 /* ds_sub_src2_u64 */, AMDGPU::DS_SUB_SRC2_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_src2_95_u64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2291 /* ds_sub_u32 */, AMDGPU::DS_SUB_U32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2291 /* ds_sub_u32 */, AMDGPU::DS_SUB_U32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_u32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2302 /* ds_sub_u64 */, AMDGPU::DS_SUB_U64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2302 /* ds_sub_u64 */, AMDGPU::DS_SUB_U64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_sub_95_u64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2313 /* ds_swizzle_b32 */, AMDGPU::DS_SWIZZLE_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_swizzle_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2313 /* ds_swizzle_b32 */, AMDGPU::DS_SWIZZLE_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_swizzle_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2328 /* ds_wrap_rtn_f32 */, AMDGPU::DS_WRAP_RTN_F32_si, ConvertCustom_cvtDS, Feature_isCIVI, { MCK_ds_95_wrap_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2328 /* ds_wrap_rtn_f32 */, AMDGPU::DS_WRAP_RTN_F32_vi, ConvertCustom_cvtDS, Feature_isCIVI, { MCK_ds_95_wrap_95_rtn_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2344 /* ds_write2_b32 */, AMDGPU::DS_WRITE2_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2344 /* ds_write2_b32 */, AMDGPU::DS_WRITE2_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2358 /* ds_write2_b64 */, AMDGPU::DS_WRITE2_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2358 /* ds_write2_b64 */, AMDGPU::DS_WRITE2_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2372 /* ds_write2st64_b32 */, AMDGPU::DS_WRITE2ST64_B32_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2st64_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2372 /* ds_write2st64_b32 */, AMDGPU::DS_WRITE2ST64_B32_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2st64_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2390 /* ds_write2st64_b64 */, AMDGPU::DS_WRITE2ST64_B64_si, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2st64_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2390 /* ds_write2st64_b64 */, AMDGPU::DS_WRITE2ST64_B64_vi, ConvertCustom_cvtDSOffset01, Feature_isGCN, { MCK_ds_95_write2st64_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffset1, MCK_DSOffset1, MCK_GDSparseDSOff01OptionalOps }, },
  { 2408 /* ds_write_b16 */, AMDGPU::DS_WRITE_B16_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2408 /* ds_write_b16 */, AMDGPU::DS_WRITE_B16_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b16, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2421 /* ds_write_b32 */, AMDGPU::DS_WRITE_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2421 /* ds_write_b32 */, AMDGPU::DS_WRITE_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2434 /* ds_write_b64 */, AMDGPU::DS_WRITE_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2434 /* ds_write_b64 */, AMDGPU::DS_WRITE_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2447 /* ds_write_b8 */, AMDGPU::DS_WRITE_B8_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2447 /* ds_write_b8 */, AMDGPU::DS_WRITE_B8_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_b8, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2459 /* ds_write_src2_b32 */, AMDGPU::DS_WRITE_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2459 /* ds_write_src2_b32 */, AMDGPU::DS_WRITE_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2477 /* ds_write_src2_b64 */, AMDGPU::DS_WRITE_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2477 /* ds_write_src2_b64 */, AMDGPU::DS_WRITE_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_write_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2495 /* ds_wrxchg2_rtn_b32 */, AMDGPU::DS_WRXCHG2_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2_95_rtn_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2495 /* ds_wrxchg2_rtn_b32 */, AMDGPU::DS_WRXCHG2_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2_95_rtn_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2514 /* ds_wrxchg2_rtn_b64 */, AMDGPU::DS_WRXCHG2_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2_95_rtn_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2514 /* ds_wrxchg2_rtn_b64 */, AMDGPU::DS_WRXCHG2_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2_95_rtn_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2533 /* ds_wrxchg2st64_rtn_b32 */, AMDGPU::DS_WRXCHG2ST64_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2st64_95_rtn_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2533 /* ds_wrxchg2st64_rtn_b32 */, AMDGPU::DS_WRXCHG2ST64_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2st64_95_rtn_95_b32, MCK_VReg_64, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2556 /* ds_wrxchg2st64_rtn_b64 */, AMDGPU::DS_WRXCHG2ST64_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2st64_95_rtn_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2556 /* ds_wrxchg2st64_rtn_b64 */, AMDGPU::DS_WRXCHG2ST64_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg2st64_95_rtn_95_b64, MCK_VReg_128, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2579 /* ds_wrxchg_rtn_b32 */, AMDGPU::DS_WRXCHG_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2579 /* ds_wrxchg_rtn_b32 */, AMDGPU::DS_WRXCHG_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2597 /* ds_wrxchg_rtn_b64 */, AMDGPU::DS_WRXCHG_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2597 /* ds_wrxchg_rtn_b64 */, AMDGPU::DS_WRXCHG_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_wrxchg_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2615 /* ds_xor_b32 */, AMDGPU::DS_XOR_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2615 /* ds_xor_b32 */, AMDGPU::DS_XOR_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2626 /* ds_xor_b64 */, AMDGPU::DS_XOR_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2626 /* ds_xor_b64 */, AMDGPU::DS_XOR_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_b64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2637 /* ds_xor_rtn_b32 */, AMDGPU::DS_XOR_RTN_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2637 /* ds_xor_rtn_b32 */, AMDGPU::DS_XOR_RTN_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_rtn_95_b32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2652 /* ds_xor_rtn_b64 */, AMDGPU::DS_XOR_RTN_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2652 /* ds_xor_rtn_b64 */, AMDGPU::DS_XOR_RTN_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_rtn_95_b64, MCK_VReg_64, MCK_VGPR_32, MCK_VReg_64, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2667 /* ds_xor_src2_b32 */, AMDGPU::DS_XOR_SRC2_B32_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2667 /* ds_xor_src2_b32 */, AMDGPU::DS_XOR_SRC2_B32_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_src2_95_b32, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2683 /* ds_xor_src2_b64 */, AMDGPU::DS_XOR_SRC2_B64_si, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2683 /* ds_xor_src2_b64 */, AMDGPU::DS_XOR_SRC2_B64_vi, ConvertCustom_cvtDS, Feature_isGCN, { MCK_ds_95_xor_95_src2_95_b64, MCK_VGPR_32, MCK_DSOffsetparseDSOptionalOps, MCK_GDSparseDSOptionalOps }, },
  { 2699 /* exp */, AMDGPU::EXP_si, Convert__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_9, Feature_isGCN, { MCK_exp, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32 }, },
  { 2699 /* exp */, AMDGPU::EXP_vi, Convert__Imm1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Reg1_6__Reg1_7__Reg1_8__Reg1_9, Feature_isGCN, { MCK_exp, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32, MCK_VGPR_32 }, },
  { 2703 /* flat_atomic_add */, AMDGPU::FLAT_ATOMIC_ADD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_add, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2703 /* flat_atomic_add */, AMDGPU::FLAT_ATOMIC_ADD_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_add, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2719 /* flat_atomic_add_x2 */, AMDGPU::FLAT_ATOMIC_ADD_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_add_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2719 /* flat_atomic_add_x2 */, AMDGPU::FLAT_ATOMIC_ADD_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_add_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2738 /* flat_atomic_and */, AMDGPU::FLAT_ATOMIC_AND, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_and, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2738 /* flat_atomic_and */, AMDGPU::FLAT_ATOMIC_AND_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_and, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2754 /* flat_atomic_and_x2 */, AMDGPU::FLAT_ATOMIC_AND_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_and_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2754 /* flat_atomic_and_x2 */, AMDGPU::FLAT_ATOMIC_AND_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_and_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2773 /* flat_atomic_cmpswap */, AMDGPU::FLAT_ATOMIC_CMPSWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_cmpswap, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2773 /* flat_atomic_cmpswap */, AMDGPU::FLAT_ATOMIC_CMPSWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_cmpswap, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2793 /* flat_atomic_cmpswap_x2 */, AMDGPU::FLAT_ATOMIC_CMPSWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_cmpswap_95_x2, MCK_VReg_64, MCK_VReg_128, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2793 /* flat_atomic_cmpswap_x2 */, AMDGPU::FLAT_ATOMIC_CMPSWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_cmpswap_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_128, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2816 /* flat_atomic_dec */, AMDGPU::FLAT_ATOMIC_DEC, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_dec, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2816 /* flat_atomic_dec */, AMDGPU::FLAT_ATOMIC_DEC_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_dec, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2832 /* flat_atomic_dec_x2 */, AMDGPU::FLAT_ATOMIC_DEC_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_dec_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2832 /* flat_atomic_dec_x2 */, AMDGPU::FLAT_ATOMIC_DEC_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_dec_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2851 /* flat_atomic_fcmpswap */, AMDGPU::FLAT_ATOMIC_FCMPSWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fcmpswap, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2851 /* flat_atomic_fcmpswap */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fcmpswap, MCK_VGPR_32, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2872 /* flat_atomic_fcmpswap_x2 */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fcmpswap_95_x2, MCK_VReg_64, MCK_VReg_128, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2872 /* flat_atomic_fcmpswap_x2 */, AMDGPU::FLAT_ATOMIC_FCMPSWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fcmpswap_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_128, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2896 /* flat_atomic_fmax */, AMDGPU::FLAT_ATOMIC_FMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmax, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2896 /* flat_atomic_fmax */, AMDGPU::FLAT_ATOMIC_FMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmax, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2913 /* flat_atomic_fmax_x2 */, AMDGPU::FLAT_ATOMIC_FMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2913 /* flat_atomic_fmax_x2 */, AMDGPU::FLAT_ATOMIC_FMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2933 /* flat_atomic_fmin */, AMDGPU::FLAT_ATOMIC_FMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmin, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2933 /* flat_atomic_fmin */, AMDGPU::FLAT_ATOMIC_FMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmin, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2950 /* flat_atomic_fmin_x2 */, AMDGPU::FLAT_ATOMIC_FMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2950 /* flat_atomic_fmin_x2 */, AMDGPU::FLAT_ATOMIC_FMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_fmin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2970 /* flat_atomic_inc */, AMDGPU::FLAT_ATOMIC_INC, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_inc, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2970 /* flat_atomic_inc */, AMDGPU::FLAT_ATOMIC_INC_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_inc, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2986 /* flat_atomic_inc_x2 */, AMDGPU::FLAT_ATOMIC_INC_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_inc_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 2986 /* flat_atomic_inc_x2 */, AMDGPU::FLAT_ATOMIC_INC_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_inc_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3005 /* flat_atomic_or */, AMDGPU::FLAT_ATOMIC_OR, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_or, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3005 /* flat_atomic_or */, AMDGPU::FLAT_ATOMIC_OR_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_or, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3020 /* flat_atomic_or_x2 */, AMDGPU::FLAT_ATOMIC_OR_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_or_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3020 /* flat_atomic_or_x2 */, AMDGPU::FLAT_ATOMIC_OR_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_or_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3038 /* flat_atomic_rsub */, AMDGPU::FLAT_ATOMIC_RSUB, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_rsub, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3038 /* flat_atomic_rsub */, AMDGPU::FLAT_ATOMIC_RSUB_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_rsub, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3055 /* flat_atomic_rsub_x2 */, AMDGPU::FLAT_ATOMIC_RSUB_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_rsub_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3055 /* flat_atomic_rsub_x2 */, AMDGPU::FLAT_ATOMIC_RSUB_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_rsub_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3075 /* flat_atomic_smax */, AMDGPU::FLAT_ATOMIC_SMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smax, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3075 /* flat_atomic_smax */, AMDGPU::FLAT_ATOMIC_SMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smax, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3092 /* flat_atomic_smax_x2 */, AMDGPU::FLAT_ATOMIC_SMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3092 /* flat_atomic_smax_x2 */, AMDGPU::FLAT_ATOMIC_SMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3112 /* flat_atomic_smin */, AMDGPU::FLAT_ATOMIC_SMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smin, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3112 /* flat_atomic_smin */, AMDGPU::FLAT_ATOMIC_SMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smin, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3129 /* flat_atomic_smin_x2 */, AMDGPU::FLAT_ATOMIC_SMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3129 /* flat_atomic_smin_x2 */, AMDGPU::FLAT_ATOMIC_SMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_smin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3149 /* flat_atomic_sub */, AMDGPU::FLAT_ATOMIC_SUB, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_sub, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3149 /* flat_atomic_sub */, AMDGPU::FLAT_ATOMIC_SUB_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_sub, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3165 /* flat_atomic_sub_x2 */, AMDGPU::FLAT_ATOMIC_SUB_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_sub_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3165 /* flat_atomic_sub_x2 */, AMDGPU::FLAT_ATOMIC_SUB_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_sub_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3184 /* flat_atomic_swap */, AMDGPU::FLAT_ATOMIC_SWAP, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_swap, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3184 /* flat_atomic_swap */, AMDGPU::FLAT_ATOMIC_SWAP_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_swap, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3201 /* flat_atomic_swap_x2 */, AMDGPU::FLAT_ATOMIC_SWAP_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_swap_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3201 /* flat_atomic_swap_x2 */, AMDGPU::FLAT_ATOMIC_SWAP_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_swap_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3221 /* flat_atomic_umax */, AMDGPU::FLAT_ATOMIC_UMAX, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umax, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3221 /* flat_atomic_umax */, AMDGPU::FLAT_ATOMIC_UMAX_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umax, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3238 /* flat_atomic_umax_x2 */, AMDGPU::FLAT_ATOMIC_UMAX_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3238 /* flat_atomic_umax_x2 */, AMDGPU::FLAT_ATOMIC_UMAX_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umax_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3258 /* flat_atomic_umin */, AMDGPU::FLAT_ATOMIC_UMIN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umin, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3258 /* flat_atomic_umin */, AMDGPU::FLAT_ATOMIC_UMIN_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umin, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3275 /* flat_atomic_umin_x2 */, AMDGPU::FLAT_ATOMIC_UMIN_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3275 /* flat_atomic_umin_x2 */, AMDGPU::FLAT_ATOMIC_UMIN_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_umin_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3295 /* flat_atomic_xor */, AMDGPU::FLAT_ATOMIC_XOR, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_xor, MCK_VReg_64, MCK_VGPR_32, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3295 /* flat_atomic_xor */, AMDGPU::FLAT_ATOMIC_XOR_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_xor, MCK_VGPR_32, MCK_VReg_64, MCK_VGPR_32, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3311 /* flat_atomic_xor_x2 */, AMDGPU::FLAT_ATOMIC_XOR_X2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_xor_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3311 /* flat_atomic_xor_x2 */, AMDGPU::FLAT_ATOMIC_XOR_X2_RTN, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_atomic_95_xor_95_x2, MCK_VReg_64, MCK_VReg_64, MCK_VReg_64, MCK_glc, MCK_SLCparseFlatAtomicOptionalOps, MCK_TFEparseFlatAtomicOptionalOps }, },
  { 3330 /* flat_load_dword */, AMDGPU::FLAT_LOAD_DWORD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3346 /* flat_load_dwordx2 */, AMDGPU::FLAT_LOAD_DWORDX2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3364 /* flat_load_dwordx3 */, AMDGPU::FLAT_LOAD_DWORDX3, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_dwordx3, MCK_VReg_96, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3382 /* flat_load_dwordx4 */, AMDGPU::FLAT_LOAD_DWORDX4, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3400 /* flat_load_sbyte */, AMDGPU::FLAT_LOAD_SBYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_sbyte, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3416 /* flat_load_sshort */, AMDGPU::FLAT_LOAD_SSHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_sshort, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3433 /* flat_load_ubyte */, AMDGPU::FLAT_LOAD_UBYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_ubyte, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3449 /* flat_load_ushort */, AMDGPU::FLAT_LOAD_USHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_load_95_ushort, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3466 /* flat_store_byte */, AMDGPU::FLAT_STORE_BYTE, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_byte, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3482 /* flat_store_dword */, AMDGPU::FLAT_STORE_DWORD, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_dword, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3499 /* flat_store_dwordx2 */, AMDGPU::FLAT_STORE_DWORDX2, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_dwordx2, MCK_VReg_64, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3518 /* flat_store_dwordx3 */, AMDGPU::FLAT_STORE_DWORDX3, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_dwordx3, MCK_VReg_96, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3537 /* flat_store_dwordx4 */, AMDGPU::FLAT_STORE_DWORDX4, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_dwordx4, MCK_VReg_128, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3556 /* flat_store_short */, AMDGPU::FLAT_STORE_SHORT, ConvertCustom_cvtFlat, Feature_isCIVI, { MCK_flat_95_store_95_short, MCK_VGPR_32, MCK_VReg_64, MCK_GLCparseFlatOptionalOps, MCK_SLCparseFlatOptionalOps, MCK_TFEparseFlatOptionalOps }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3573 /* image_gather4 */, AMDGPU::IMAGE_GATHER4_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3587 /* image_gather4_b */, AMDGPU::IMAGE_GATHER4_B_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3603 /* image_gather4_b_cl */, AMDGPU::IMAGE_GATHER4_B_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3622 /* image_gather4_b_cl_o */, AMDGPU::IMAGE_GATHER4_B_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3643 /* image_gather4_b_o */, AMDGPU::IMAGE_GATHER4_B_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3661 /* image_gather4_c */, AMDGPU::IMAGE_GATHER4_C_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3677 /* image_gather4_c_b */, AMDGPU::IMAGE_GATHER4_C_B_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3695 /* image_gather4_c_b_cl */, AMDGPU::IMAGE_GATHER4_C_B_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3716 /* image_gather4_c_b_cl_o */, AMDGPU::IMAGE_GATHER4_C_B_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3739 /* image_gather4_c_b_o */, AMDGPU::IMAGE_GATHER4_C_B_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3759 /* image_gather4_c_cl */, AMDGPU::IMAGE_GATHER4_C_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3778 /* image_gather4_c_cl_o */, AMDGPU::IMAGE_GATHER4_C_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3799 /* image_gather4_c_l */, AMDGPU::IMAGE_GATHER4_C_L_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3817 /* image_gather4_c_l_o */, AMDGPU::IMAGE_GATHER4_C_L_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3837 /* image_gather4_c_lz */, AMDGPU::IMAGE_GATHER4_C_LZ_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3856 /* image_gather4_c_lz_o */, AMDGPU::IMAGE_GATHER4_C_LZ_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3877 /* image_gather4_c_o */, AMDGPU::IMAGE_GATHER4_C_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3895 /* image_gather4_cl */, AMDGPU::IMAGE_GATHER4_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3912 /* image_gather4_cl_o */, AMDGPU::IMAGE_GATHER4_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3931 /* image_gather4_l */, AMDGPU::IMAGE_GATHER4_L_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3947 /* image_gather4_l_o */, AMDGPU::IMAGE_GATHER4_L_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3965 /* image_gather4_lz */, AMDGPU::IMAGE_GATHER4_LZ_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 3982 /* image_gather4_lz_o */, AMDGPU::IMAGE_GATHER4_LZ_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4001 /* image_gather4_o */, AMDGPU::IMAGE_GATHER4_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_gather4_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4017 /* image_get_lod */, AMDGPU::IMAGE_GET_LOD_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_get_95_lod, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4031 /* image_get_resinfo */, AMDGPU::IMAGE_GET_RESINFO_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_get_95_resinfo, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4049 /* image_load */, AMDGPU::IMAGE_LOAD_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256 }, },
  { 4060 /* image_load_mip */, AMDGPU::IMAGE_LOAD_MIP_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11, Feature_isGCN, { MCK_image_95_load_95_mip, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4075 /* image_sample */, AMDGPU::IMAGE_SAMPLE_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4088 /* image_sample_b */, AMDGPU::IMAGE_SAMPLE_B_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4103 /* image_sample_b_cl */, AMDGPU::IMAGE_SAMPLE_B_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4121 /* image_sample_b_cl_o */, AMDGPU::IMAGE_SAMPLE_B_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4141 /* image_sample_b_o */, AMDGPU::IMAGE_SAMPLE_B_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4158 /* image_sample_c */, AMDGPU::IMAGE_SAMPLE_C_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4173 /* image_sample_c_b */, AMDGPU::IMAGE_SAMPLE_C_B_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4190 /* image_sample_c_b_cl */, AMDGPU::IMAGE_SAMPLE_C_B_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4210 /* image_sample_c_b_cl_o */, AMDGPU::IMAGE_SAMPLE_C_B_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4232 /* image_sample_c_b_o */, AMDGPU::IMAGE_SAMPLE_C_B_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_b_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4251 /* image_sample_c_cd */, AMDGPU::IMAGE_SAMPLE_C_CD_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4269 /* image_sample_c_cd_cl */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4290 /* image_sample_c_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CD_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4313 /* image_sample_c_cd_o */, AMDGPU::IMAGE_SAMPLE_C_CD_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4333 /* image_sample_c_cl */, AMDGPU::IMAGE_SAMPLE_C_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4351 /* image_sample_c_cl_o */, AMDGPU::IMAGE_SAMPLE_C_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4371 /* image_sample_c_d */, AMDGPU::IMAGE_SAMPLE_C_D_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4388 /* image_sample_c_d_cl */, AMDGPU::IMAGE_SAMPLE_C_D_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4408 /* image_sample_c_d_cl_o */, AMDGPU::IMAGE_SAMPLE_C_D_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4430 /* image_sample_c_d_o */, AMDGPU::IMAGE_SAMPLE_C_D_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4449 /* image_sample_c_l */, AMDGPU::IMAGE_SAMPLE_C_L_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4466 /* image_sample_c_l_o */, AMDGPU::IMAGE_SAMPLE_C_L_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4485 /* image_sample_c_lz */, AMDGPU::IMAGE_SAMPLE_C_LZ_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4503 /* image_sample_c_lz_o */, AMDGPU::IMAGE_SAMPLE_C_LZ_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4523 /* image_sample_c_o */, AMDGPU::IMAGE_SAMPLE_C_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_c_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4540 /* image_sample_cd */, AMDGPU::IMAGE_SAMPLE_CD_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4556 /* image_sample_cd_cl */, AMDGPU::IMAGE_SAMPLE_CD_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4575 /* image_sample_cd_cl_o */, AMDGPU::IMAGE_SAMPLE_CD_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4596 /* image_sample_cd_o */, AMDGPU::IMAGE_SAMPLE_CD_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cd_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4614 /* image_sample_cl */, AMDGPU::IMAGE_SAMPLE_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4630 /* image_sample_cl_o */, AMDGPU::IMAGE_SAMPLE_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4648 /* image_sample_d */, AMDGPU::IMAGE_SAMPLE_D_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4663 /* image_sample_d_cl */, AMDGPU::IMAGE_SAMPLE_D_CL_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4681 /* image_sample_d_cl_o */, AMDGPU::IMAGE_SAMPLE_D_CL_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_cl_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4701 /* image_sample_d_o */, AMDGPU::IMAGE_SAMPLE_D_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_d_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4718 /* image_sample_l */, AMDGPU::IMAGE_SAMPLE_L_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4733 /* image_sample_l_o */, AMDGPU::IMAGE_SAMPLE_L_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_l_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4750 /* image_sample_lz */, AMDGPU::IMAGE_SAMPLE_LZ_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4766 /* image_sample_lz_o */, AMDGPU::IMAGE_SAMPLE_LZ_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_lz_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V1_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V4_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V2_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V1, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V4, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_128, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V8, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_256, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V16, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_512, MCK_SReg_256, MCK_SReg_128 }, },
  { 4784 /* image_sample_o */, AMDGPU::IMAGE_SAMPLE_O_V3_V2, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Imm1_9__Reg1_10__Reg1_11__Reg1_12, Feature_isGCN, { MCK_image_95_sample_95_o, MCK_VReg_96, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VReg_64, MCK_SReg_256, MCK_SReg_128 }, },
  { 4799 /* s_abs_i32 */, AMDGPU::S_ABS_I32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_abs_95_i32, MCK_SReg_32, MCK_SSrc32 }, },
  { 4799 /* s_abs_i32 */, AMDGPU::S_ABS_I32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_abs_95_i32, MCK_SReg_32, MCK_SSrc32 }, },
  { 4809 /* s_absdiff_i32 */, AMDGPU::S_ABSDIFF_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_absdiff_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4809 /* s_absdiff_i32 */, AMDGPU::S_ABSDIFF_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_absdiff_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4823 /* s_add_i32 */, AMDGPU::S_ADD_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_add_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4823 /* s_add_i32 */, AMDGPU::S_ADD_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_add_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4833 /* s_add_u32 */, AMDGPU::S_ADD_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_add_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4833 /* s_add_u32 */, AMDGPU::S_ADD_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_add_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4843 /* s_addc_u32 */, AMDGPU::S_ADDC_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_addc_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4843 /* s_addc_u32 */, AMDGPU::S_ADDC_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_addc_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4854 /* s_addk_i32 */, AMDGPU::S_ADDK_I32_si, Convert__Reg1_1__Tie0__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_addk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 4854 /* s_addk_i32 */, AMDGPU::S_ADDK_I32_vi, Convert__Reg1_1__Tie0__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_addk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 4865 /* s_and_b32 */, AMDGPU::S_AND_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_and_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4865 /* s_and_b32 */, AMDGPU::S_AND_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_and_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4875 /* s_and_b64 */, AMDGPU::S_AND_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_and_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4875 /* s_and_b64 */, AMDGPU::S_AND_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_and_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4885 /* s_and_saveexec_b64 */, AMDGPU::S_AND_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_and_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 4885 /* s_and_saveexec_b64 */, AMDGPU::S_AND_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_and_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 4904 /* s_andn2_b32 */, AMDGPU::S_ANDN2_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_andn2_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4904 /* s_andn2_b32 */, AMDGPU::S_ANDN2_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_andn2_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4916 /* s_andn2_b64 */, AMDGPU::S_ANDN2_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_andn2_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4916 /* s_andn2_b64 */, AMDGPU::S_ANDN2_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_andn2_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 4928 /* s_andn2_saveexec_b64 */, AMDGPU::S_ANDN2_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_andn2_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 4928 /* s_andn2_saveexec_b64 */, AMDGPU::S_ANDN2_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_andn2_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 4949 /* s_ashr_i32 */, AMDGPU::S_ASHR_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_ashr_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4949 /* s_ashr_i32 */, AMDGPU::S_ASHR_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_ashr_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 4960 /* s_ashr_i64 */, AMDGPU::S_ASHR_I64_si, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_ashr_95_i64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 4960 /* s_ashr_i64 */, AMDGPU::S_ASHR_I64_vi, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_ashr_95_i64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 4971 /* s_barrier */, AMDGPU::S_BARRIER, Convert_NoOperands, Feature_isGCN, { MCK_s_95_barrier }, },
  { 4981 /* s_bcnt0_i32_b32 */, AMDGPU::S_BCNT0_I32_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bcnt0_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 4981 /* s_bcnt0_i32_b32 */, AMDGPU::S_BCNT0_I32_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bcnt0_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 4997 /* s_bcnt0_i32_b64 */, AMDGPU::S_BCNT0_I32_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bcnt0_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 4997 /* s_bcnt0_i32_b64 */, AMDGPU::S_BCNT0_I32_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bcnt0_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5013 /* s_bcnt1_i32_b32 */, AMDGPU::S_BCNT1_I32_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bcnt1_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5013 /* s_bcnt1_i32_b32 */, AMDGPU::S_BCNT1_I32_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bcnt1_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5029 /* s_bcnt1_i32_b64 */, AMDGPU::S_BCNT1_I32_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bcnt1_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5029 /* s_bcnt1_i32_b64 */, AMDGPU::S_BCNT1_I32_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bcnt1_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5045 /* s_bfe_i32 */, AMDGPU::S_BFE_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfe_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5045 /* s_bfe_i32 */, AMDGPU::S_BFE_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfe_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5055 /* s_bfe_i64 */, AMDGPU::S_BFE_I64_si, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfe_95_i64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 5055 /* s_bfe_i64 */, AMDGPU::S_BFE_I64_vi, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfe_95_i64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 5065 /* s_bfe_u32 */, AMDGPU::S_BFE_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfe_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5065 /* s_bfe_u32 */, AMDGPU::S_BFE_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfe_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5075 /* s_bfe_u64 */, AMDGPU::S_BFE_U64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfe_95_u64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5075 /* s_bfe_u64 */, AMDGPU::S_BFE_U64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfe_95_u64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5085 /* s_bfm_b32 */, AMDGPU::S_BFM_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfm_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5085 /* s_bfm_b32 */, AMDGPU::S_BFM_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfm_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5095 /* s_bfm_b64 */, AMDGPU::S_BFM_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_bfm_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5095 /* s_bfm_b64 */, AMDGPU::S_BFM_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_bfm_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5105 /* s_bitset0_b32 */, AMDGPU::S_BITSET0_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bitset0_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5105 /* s_bitset0_b32 */, AMDGPU::S_BITSET0_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bitset0_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5119 /* s_bitset0_b64 */, AMDGPU::S_BITSET0_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bitset0_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5119 /* s_bitset0_b64 */, AMDGPU::S_BITSET0_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bitset0_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5133 /* s_bitset1_b32 */, AMDGPU::S_BITSET1_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bitset1_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5133 /* s_bitset1_b32 */, AMDGPU::S_BITSET1_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bitset1_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5147 /* s_bitset1_b64 */, AMDGPU::S_BITSET1_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_bitset1_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5147 /* s_bitset1_b64 */, AMDGPU::S_BITSET1_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_bitset1_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5161 /* s_branch */, AMDGPU::S_BRANCH, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_branch, MCK_SoppBrTarget }, },
  { 5170 /* s_brev_b32 */, AMDGPU::S_BREV_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_brev_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5170 /* s_brev_b32 */, AMDGPU::S_BREV_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_brev_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5181 /* s_brev_b64 */, AMDGPU::S_BREV_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_brev_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5181 /* s_brev_b64 */, AMDGPU::S_BREV_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_brev_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5192 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dword, MCK_SGPR_32, MCK_SReg_128, MCK_SReg_32 }, },
  { 5192 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dword, MCK_SGPR_32, MCK_SReg_128, MCK_SReg_32 }, },
  { 5192 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_buffer_95_load_95_dword, MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5192 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dword, MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5192 /* s_buffer_load_dword */, AMDGPU::S_BUFFER_LOAD_DWORD_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dword, MCK_SGPR_32, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5212 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_128, MCK_SReg_32 }, },
  { 5212 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_128, MCK_SReg_32 }, },
  { 5212 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_buffer_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5212 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5212 /* s_buffer_load_dwordx16 */, AMDGPU::S_BUFFER_LOAD_DWORDX16_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5235 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_128, MCK_SReg_32 }, },
  { 5235 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_128, MCK_SReg_32 }, },
  { 5235 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_buffer_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5235 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5235 /* s_buffer_load_dwordx2 */, AMDGPU::S_BUFFER_LOAD_DWORDX2_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5257 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_128, MCK_SReg_32 }, },
  { 5257 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_128, MCK_SReg_32 }, },
  { 5257 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_buffer_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5257 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5257 /* s_buffer_load_dwordx4 */, AMDGPU::S_BUFFER_LOAD_DWORDX4_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5279 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_128, MCK_SReg_32 }, },
  { 5279 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_128, MCK_SReg_32 }, },
  { 5279 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_buffer_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 5279 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_buffer_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5279 /* s_buffer_load_dwordx8 */, AMDGPU::S_BUFFER_LOAD_DWORDX8_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_buffer_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_128, MCK_SMRDOffsetisSMRDOffset }, },
  { 5301 /* s_cbranch_execnz */, AMDGPU::S_CBRANCH_EXECNZ, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_execnz, MCK_SoppBrTarget }, },
  { 5318 /* s_cbranch_execz */, AMDGPU::S_CBRANCH_EXECZ, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_execz, MCK_SoppBrTarget }, },
  { 5334 /* s_cbranch_g_fork */, AMDGPU::S_CBRANCH_G_FORK_si, Convert__Reg1_1__Reg1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cbranch_95_g_95_fork, MCK_SReg_64, MCK_SReg_64 }, },
  { 5334 /* s_cbranch_g_fork */, AMDGPU::S_CBRANCH_G_FORK_vi, Convert__Reg1_1__Reg1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cbranch_95_g_95_fork, MCK_SReg_64, MCK_SReg_64 }, },
  { 5351 /* s_cbranch_i_fork */, AMDGPU::S_CBRANCH_I_FORK_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cbranch_95_i_95_fork, MCK_SReg_64, MCK_Imm }, },
  { 5351 /* s_cbranch_i_fork */, AMDGPU::S_CBRANCH_I_FORK_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cbranch_95_i_95_fork, MCK_SReg_64, MCK_Imm }, },
  { 5368 /* s_cbranch_join */, AMDGPU::S_CBRANCH_JOIN_si, Convert__Reg1_1, Feature_isGCN|Feature_isSICI, { MCK_s_95_cbranch_95_join, MCK_SReg_64 }, },
  { 5368 /* s_cbranch_join */, AMDGPU::S_CBRANCH_JOIN_vi, Convert__Reg1_1, Feature_isGCN|Feature_isVI, { MCK_s_95_cbranch_95_join, MCK_SReg_64 }, },
  { 5383 /* s_cbranch_scc0 */, AMDGPU::S_CBRANCH_SCC0, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_scc0, MCK_SoppBrTarget }, },
  { 5398 /* s_cbranch_scc1 */, AMDGPU::S_CBRANCH_SCC1, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_scc1, MCK_SoppBrTarget }, },
  { 5413 /* s_cbranch_vccnz */, AMDGPU::S_CBRANCH_VCCNZ, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_vccnz, MCK_SoppBrTarget }, },
  { 5429 /* s_cbranch_vccz */, AMDGPU::S_CBRANCH_VCCZ, Convert__SoppBrTarget1_1, Feature_isGCN, { MCK_s_95_cbranch_95_vccz, MCK_SoppBrTarget }, },
  { 5444 /* s_cmov_b32 */, AMDGPU::S_CMOV_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmov_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5444 /* s_cmov_b32 */, AMDGPU::S_CMOV_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmov_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5455 /* s_cmov_b64 */, AMDGPU::S_CMOV_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmov_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5455 /* s_cmov_b64 */, AMDGPU::S_CMOV_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmov_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 5466 /* s_cmovk_i32 */, AMDGPU::S_CMOVK_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmovk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5466 /* s_cmovk_i32 */, AMDGPU::S_CMOVK_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmovk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5478 /* s_cmp_eq_i32 */, AMDGPU::S_CMP_EQ_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_eq_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5491 /* s_cmp_eq_u32 */, AMDGPU::S_CMP_EQ_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_eq_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5504 /* s_cmp_ge_i32 */, AMDGPU::S_CMP_GE_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_ge_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5517 /* s_cmp_ge_u32 */, AMDGPU::S_CMP_GE_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_ge_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5530 /* s_cmp_gt_i32 */, AMDGPU::S_CMP_GT_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_gt_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5543 /* s_cmp_gt_u32 */, AMDGPU::S_CMP_GT_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_gt_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5556 /* s_cmp_le_i32 */, AMDGPU::S_CMP_LE_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_le_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5569 /* s_cmp_le_u32 */, AMDGPU::S_CMP_LE_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_le_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5582 /* s_cmp_lg_i32 */, AMDGPU::S_CMP_LG_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_lg_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5595 /* s_cmp_lg_u32 */, AMDGPU::S_CMP_LG_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_lg_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5608 /* s_cmp_lt_i32 */, AMDGPU::S_CMP_LT_I32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_lt_95_i32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5621 /* s_cmp_lt_u32 */, AMDGPU::S_CMP_LT_U32, Convert__SSrc321_1__SSrc321_2, Feature_isGCN, { MCK_s_95_cmp_95_lt_95_u32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5634 /* s_cmpk_eq_i32 */, AMDGPU::S_CMPK_EQ_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_eq_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5634 /* s_cmpk_eq_i32 */, AMDGPU::S_CMPK_EQ_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_eq_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5648 /* s_cmpk_eq_u32 */, AMDGPU::S_CMPK_EQ_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_eq_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5648 /* s_cmpk_eq_u32 */, AMDGPU::S_CMPK_EQ_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_eq_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5662 /* s_cmpk_ge_i32 */, AMDGPU::S_CMPK_GE_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_ge_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5662 /* s_cmpk_ge_i32 */, AMDGPU::S_CMPK_GE_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_ge_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5676 /* s_cmpk_ge_u32 */, AMDGPU::S_CMPK_GE_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_ge_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5676 /* s_cmpk_ge_u32 */, AMDGPU::S_CMPK_GE_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_ge_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5690 /* s_cmpk_gt_i32 */, AMDGPU::S_CMPK_GT_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_gt_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5690 /* s_cmpk_gt_i32 */, AMDGPU::S_CMPK_GT_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_gt_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5704 /* s_cmpk_gt_u32 */, AMDGPU::S_CMPK_GT_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_gt_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5704 /* s_cmpk_gt_u32 */, AMDGPU::S_CMPK_GT_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_gt_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5718 /* s_cmpk_le_i32 */, AMDGPU::S_CMPK_LE_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_le_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5718 /* s_cmpk_le_i32 */, AMDGPU::S_CMPK_LE_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_le_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5732 /* s_cmpk_le_u32 */, AMDGPU::S_CMPK_LE_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_le_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5732 /* s_cmpk_le_u32 */, AMDGPU::S_CMPK_LE_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_le_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5746 /* s_cmpk_lg_i32 */, AMDGPU::S_CMPK_LG_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_lg_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5746 /* s_cmpk_lg_i32 */, AMDGPU::S_CMPK_LG_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_lg_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5760 /* s_cmpk_lg_u32 */, AMDGPU::S_CMPK_LG_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_lg_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5760 /* s_cmpk_lg_u32 */, AMDGPU::S_CMPK_LG_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_lg_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5774 /* s_cmpk_lt_i32 */, AMDGPU::S_CMPK_LT_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_lt_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5774 /* s_cmpk_lt_i32 */, AMDGPU::S_CMPK_LT_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_lt_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 5788 /* s_cmpk_lt_u32 */, AMDGPU::S_CMPK_LT_U32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_cmpk_95_lt_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5788 /* s_cmpk_lt_u32 */, AMDGPU::S_CMPK_LT_U32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_cmpk_95_lt_95_u32, MCK_SReg_32, MCK_Imm }, },
  { 5802 /* s_cselect_b32 */, AMDGPU::S_CSELECT_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_cselect_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5802 /* s_cselect_b32 */, AMDGPU::S_CSELECT_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_cselect_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 5816 /* s_cselect_b64 */, AMDGPU::S_CSELECT_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_cselect_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5816 /* s_cselect_b64 */, AMDGPU::S_CSELECT_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_cselect_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 5830 /* s_dcache_inv */, AMDGPU::S_DCACHE_INV_si, Convert_NoOperands, Feature_isGCN|Feature_isSICI, { MCK_s_95_dcache_95_inv }, },
  { 5830 /* s_dcache_inv */, AMDGPU::S_DCACHE_INV_vi, Convert_NoOperands, Feature_isGCN|Feature_isVI, { MCK_s_95_dcache_95_inv }, },
  { 5843 /* s_dcache_inv_vol */, AMDGPU::S_DCACHE_INV_VOL_si, Convert_NoOperands, Feature_isCIVI|Feature_isSICI, { MCK_s_95_dcache_95_inv_95_vol }, },
  { 5843 /* s_dcache_inv_vol */, AMDGPU::S_DCACHE_INV_VOL_vi, Convert_NoOperands, Feature_isCIVI|Feature_isVI, { MCK_s_95_dcache_95_inv_95_vol }, },
  { 5860 /* s_dcache_wb */, AMDGPU::S_DCACHE_WB, Convert_NoOperands, Feature_isVI|Feature_isVI, { MCK_s_95_dcache_95_wb }, },
  { 5872 /* s_dcache_wb_vol */, AMDGPU::S_DCACHE_WB_VOL, Convert_NoOperands, Feature_isVI|Feature_isVI, { MCK_s_95_dcache_95_wb_95_vol }, },
  { 5888 /* s_decperflevel */, AMDGPU::S_DECPERFLEVEL, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_decperflevel, MCK_Imm }, },
  { 5903 /* s_endpgm */, AMDGPU::S_ENDPGM, Convert_NoOperands, Feature_isGCN, { MCK_s_95_endpgm }, },
  { 5912 /* s_ff0_i32_b32 */, AMDGPU::S_FF0_I32_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_ff0_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5912 /* s_ff0_i32_b32 */, AMDGPU::S_FF0_I32_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_ff0_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5926 /* s_ff0_i32_b64 */, AMDGPU::S_FF0_I32_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_ff0_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5926 /* s_ff0_i32_b64 */, AMDGPU::S_FF0_I32_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_ff0_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5940 /* s_ff1_i32_b32 */, AMDGPU::S_FF1_I32_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_ff1_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5940 /* s_ff1_i32_b32 */, AMDGPU::S_FF1_I32_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_ff1_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5954 /* s_ff1_i32_b64 */, AMDGPU::S_FF1_I32_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_ff1_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5954 /* s_ff1_i32_b64 */, AMDGPU::S_FF1_I32_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_ff1_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5968 /* s_flbit_i32 */, AMDGPU::S_FLBIT_I32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_flbit_95_i32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5968 /* s_flbit_i32 */, AMDGPU::S_FLBIT_I32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_flbit_95_i32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5980 /* s_flbit_i32_b32 */, AMDGPU::S_FLBIT_I32_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_flbit_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5980 /* s_flbit_i32_b32 */, AMDGPU::S_FLBIT_I32_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_flbit_95_i32_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 5996 /* s_flbit_i32_b64 */, AMDGPU::S_FLBIT_I32_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_flbit_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 5996 /* s_flbit_i32_b64 */, AMDGPU::S_FLBIT_I32_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_flbit_95_i32_95_b64, MCK_SReg_32, MCK_SSrc64 }, },
  { 6012 /* s_flbit_i32_i64 */, AMDGPU::S_FLBIT_I32_I64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_flbit_95_i32_95_i64, MCK_SReg_32, MCK_SSrc64 }, },
  { 6012 /* s_flbit_i32_i64 */, AMDGPU::S_FLBIT_I32_I64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_flbit_95_i32_95_i64, MCK_SReg_32, MCK_SSrc64 }, },
  { 6028 /* s_getpc_b64 */, AMDGPU::S_GETPC_B64_si, Convert__Reg1_1, Feature_isGCN|Feature_isSICI, { MCK_s_95_getpc_95_b64, MCK_SReg_64 }, },
  { 6028 /* s_getpc_b64 */, AMDGPU::S_GETPC_B64_vi, Convert__Reg1_1, Feature_isGCN|Feature_isVI, { MCK_s_95_getpc_95_b64, MCK_SReg_64 }, },
  { 6040 /* s_getreg_b32 */, AMDGPU::S_GETREG_B32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_getreg_95_b32, MCK_SReg_32, MCK_Imm }, },
  { 6040 /* s_getreg_b32 */, AMDGPU::S_GETREG_B32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_getreg_95_b32, MCK_SReg_32, MCK_Imm }, },
  { 6053 /* s_icache_inv */, AMDGPU::S_ICACHE_INV, Convert_NoOperands, Feature_isGCN, { MCK_s_95_icache_95_inv }, },
  { 6066 /* s_incperflevel */, AMDGPU::S_INCPERFLEVEL, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_incperflevel, MCK_Imm }, },
  { 6081 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dword, MCK_SGPR_32, MCK_SReg_64, MCK_SReg_32 }, },
  { 6081 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dword, MCK_SGPR_32, MCK_SReg_64, MCK_SReg_32 }, },
  { 6081 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_load_95_dword, MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6081 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dword, MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6081 /* s_load_dword */, AMDGPU::S_LOAD_DWORD_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dword, MCK_SGPR_32, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6094 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_64, MCK_SReg_32 }, },
  { 6094 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_64, MCK_SReg_32 }, },
  { 6094 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6094 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6094 /* s_load_dwordx16 */, AMDGPU::S_LOAD_DWORDX16_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx16, MCK_SReg_512, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6110 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_64, MCK_SReg_32 }, },
  { 6110 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_64, MCK_SReg_32 }, },
  { 6110 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6110 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6110 /* s_load_dwordx2 */, AMDGPU::S_LOAD_DWORDX2_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx2, MCK_SReg_64, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6125 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_64, MCK_SReg_32 }, },
  { 6125 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_64, MCK_SReg_32 }, },
  { 6125 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6125 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6125 /* s_load_dwordx4 */, AMDGPU::S_LOAD_DWORDX4_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx4, MCK_SReg_128, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6140 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_SGPR_si, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_64, MCK_SReg_32 }, },
  { 6140 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_SGPR_vi, Convert__Reg1_1__Reg1_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_64, MCK_SReg_32 }, },
  { 6140 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_ci, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDLiteralOffset1_3, Feature_isGCN|Feature_isCIOnly, { MCK_s_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDLiteralOffset }, },
  { 6140 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_si, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6140 /* s_load_dwordx8 */, AMDGPU::S_LOAD_DWORDX8_IMM_vi, Convert__Reg1_1__Reg1_2__SMRDOffsetisSMRDOffset1_3, Feature_isGCN|Feature_isVI, { MCK_s_95_load_95_dwordx8, MCK_SReg_256, MCK_SReg_64, MCK_SMRDOffsetisSMRDOffset }, },
  { 6155 /* s_lshl_b32 */, AMDGPU::S_LSHL_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_lshl_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6155 /* s_lshl_b32 */, AMDGPU::S_LSHL_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_lshl_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6166 /* s_lshl_b64 */, AMDGPU::S_LSHL_B64_si, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_lshl_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6166 /* s_lshl_b64 */, AMDGPU::S_LSHL_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_lshl_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6177 /* s_lshr_b32 */, AMDGPU::S_LSHR_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_lshr_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6177 /* s_lshr_b32 */, AMDGPU::S_LSHR_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_lshr_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6188 /* s_lshr_b64 */, AMDGPU::S_LSHR_B64_si, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_lshr_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6188 /* s_lshr_b64 */, AMDGPU::S_LSHR_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_lshr_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc32 }, },
  { 6199 /* s_max_i32 */, AMDGPU::S_MAX_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_max_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6199 /* s_max_i32 */, AMDGPU::S_MAX_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_max_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6209 /* s_max_u32 */, AMDGPU::S_MAX_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_max_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6209 /* s_max_u32 */, AMDGPU::S_MAX_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_max_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6219 /* s_min_i32 */, AMDGPU::S_MIN_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_min_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6219 /* s_min_i32 */, AMDGPU::S_MIN_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_min_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6229 /* s_min_u32 */, AMDGPU::S_MIN_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_min_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6229 /* s_min_u32 */, AMDGPU::S_MIN_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_min_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6239 /* s_mov_b32 */, AMDGPU::S_MOV_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_mov_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6239 /* s_mov_b32 */, AMDGPU::S_MOV_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_mov_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6249 /* s_mov_b64 */, AMDGPU::S_MOV_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_mov_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6249 /* s_mov_b64 */, AMDGPU::S_MOV_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_mov_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6259 /* s_mov_fed_b32 */, AMDGPU::S_MOV_FED_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_mov_95_fed_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6259 /* s_mov_fed_b32 */, AMDGPU::S_MOV_FED_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_mov_95_fed_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6273 /* s_mov_regrd_b32 */, AMDGPU::S_MOV_REGRD_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_mov_95_regrd_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6273 /* s_mov_regrd_b32 */, AMDGPU::S_MOV_REGRD_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_mov_95_regrd_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6289 /* s_movk_i32 */, AMDGPU::S_MOVK_I32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_movk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 6289 /* s_movk_i32 */, AMDGPU::S_MOVK_I32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_movk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 6300 /* s_movreld_b32 */, AMDGPU::S_MOVRELD_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_movreld_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6300 /* s_movreld_b32 */, AMDGPU::S_MOVRELD_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_movreld_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6314 /* s_movreld_b64 */, AMDGPU::S_MOVRELD_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_movreld_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6314 /* s_movreld_b64 */, AMDGPU::S_MOVRELD_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_movreld_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6328 /* s_movrels_b32 */, AMDGPU::S_MOVRELS_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_movrels_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6328 /* s_movrels_b32 */, AMDGPU::S_MOVRELS_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_movrels_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6342 /* s_movrels_b64 */, AMDGPU::S_MOVRELS_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_movrels_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6342 /* s_movrels_b64 */, AMDGPU::S_MOVRELS_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_movrels_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6356 /* s_mul_i32 */, AMDGPU::S_MUL_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_mul_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6356 /* s_mul_i32 */, AMDGPU::S_MUL_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_mul_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6366 /* s_mulk_i32 */, AMDGPU::S_MULK_I32_si, Convert__Reg1_1__Tie0__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_mulk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 6366 /* s_mulk_i32 */, AMDGPU::S_MULK_I32_vi, Convert__Reg1_1__Tie0__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_mulk_95_i32, MCK_SReg_32, MCK_Imm }, },
  { 6377 /* s_nand_b32 */, AMDGPU::S_NAND_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_nand_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6377 /* s_nand_b32 */, AMDGPU::S_NAND_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_nand_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6388 /* s_nand_b64 */, AMDGPU::S_NAND_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_nand_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6388 /* s_nand_b64 */, AMDGPU::S_NAND_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_nand_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6399 /* s_nand_saveexec_b64 */, AMDGPU::S_NAND_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_nand_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6399 /* s_nand_saveexec_b64 */, AMDGPU::S_NAND_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_nand_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6419 /* s_nop */, AMDGPU::S_NOP, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_nop, MCK_Imm }, },
  { 6425 /* s_nor_b32 */, AMDGPU::S_NOR_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_nor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6425 /* s_nor_b32 */, AMDGPU::S_NOR_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_nor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6435 /* s_nor_b64 */, AMDGPU::S_NOR_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_nor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6435 /* s_nor_b64 */, AMDGPU::S_NOR_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_nor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6445 /* s_nor_saveexec_b64 */, AMDGPU::S_NOR_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_nor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6445 /* s_nor_saveexec_b64 */, AMDGPU::S_NOR_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_nor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6464 /* s_not_b32 */, AMDGPU::S_NOT_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_not_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6464 /* s_not_b32 */, AMDGPU::S_NOT_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_not_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6474 /* s_not_b64 */, AMDGPU::S_NOT_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_not_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6474 /* s_not_b64 */, AMDGPU::S_NOT_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_not_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6484 /* s_or_b32 */, AMDGPU::S_OR_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_or_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6484 /* s_or_b32 */, AMDGPU::S_OR_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_or_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6493 /* s_or_b64 */, AMDGPU::S_OR_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_or_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6493 /* s_or_b64 */, AMDGPU::S_OR_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_or_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6502 /* s_or_saveexec_b64 */, AMDGPU::S_OR_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_or_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6502 /* s_or_saveexec_b64 */, AMDGPU::S_OR_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_or_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6520 /* s_orn2_b32 */, AMDGPU::S_ORN2_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_orn2_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6520 /* s_orn2_b32 */, AMDGPU::S_ORN2_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_orn2_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6531 /* s_orn2_b64 */, AMDGPU::S_ORN2_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_orn2_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6531 /* s_orn2_b64 */, AMDGPU::S_ORN2_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_orn2_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6542 /* s_orn2_saveexec_b64 */, AMDGPU::S_ORN2_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_orn2_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6542 /* s_orn2_saveexec_b64 */, AMDGPU::S_ORN2_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_orn2_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6562 /* s_quadmask_b32 */, AMDGPU::S_QUADMASK_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_quadmask_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6562 /* s_quadmask_b32 */, AMDGPU::S_QUADMASK_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_quadmask_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6577 /* s_quadmask_b64 */, AMDGPU::S_QUADMASK_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_quadmask_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6577 /* s_quadmask_b64 */, AMDGPU::S_QUADMASK_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_quadmask_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6592 /* s_rfe_b64 */, AMDGPU::S_RFE_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_rfe_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6592 /* s_rfe_b64 */, AMDGPU::S_RFE_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_rfe_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6602 /* s_sendmsg */, AMDGPU::S_SENDMSG, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_sendmsg, MCK_Imm }, },
  { 6612 /* s_sendmsghalt */, AMDGPU::S_SENDMSGHALT, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_sendmsghalt, MCK_Imm }, },
  { 6626 /* s_sethalt */, AMDGPU::S_SETHALT, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_sethalt, MCK_Imm }, },
  { 6636 /* s_setpc_b64 */, AMDGPU::S_SETPC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_setpc_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6636 /* s_setpc_b64 */, AMDGPU::S_SETPC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_setpc_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6648 /* s_setprio */, AMDGPU::S_SETPRIO, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_setprio, MCK_Imm }, },
  { 6658 /* s_setreg_b32 */, AMDGPU::S_SETREG_B32_si, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_setreg_95_b32, MCK_SReg_32, MCK_Imm }, },
  { 6658 /* s_setreg_b32 */, AMDGPU::S_SETREG_B32_vi, Convert__Reg1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_setreg_95_b32, MCK_SReg_32, MCK_Imm }, },
  { 6671 /* s_setreg_imm32_b32 */, AMDGPU::S_SETREG_IMM32_B32_si, Convert__Imm1_1__Imm1_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_setreg_95_imm32_95_b32, MCK_Imm, MCK_Imm }, },
  { 6671 /* s_setreg_imm32_b32 */, AMDGPU::S_SETREG_IMM32_B32_vi, Convert__Imm1_1__Imm1_2, Feature_isGCN|Feature_isVI, { MCK_s_95_setreg_95_imm32_95_b32, MCK_Imm, MCK_Imm }, },
  { 6690 /* s_sext_i32_i16 */, AMDGPU::S_SEXT_I32_I16_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_sext_95_i32_95_i16, MCK_SReg_32, MCK_SSrc32 }, },
  { 6690 /* s_sext_i32_i16 */, AMDGPU::S_SEXT_I32_I16_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_sext_95_i32_95_i16, MCK_SReg_32, MCK_SSrc32 }, },
  { 6705 /* s_sext_i32_i8 */, AMDGPU::S_SEXT_I32_I8_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_sext_95_i32_95_i8, MCK_SReg_32, MCK_SSrc32 }, },
  { 6705 /* s_sext_i32_i8 */, AMDGPU::S_SEXT_I32_I8_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_sext_95_i32_95_i8, MCK_SReg_32, MCK_SSrc32 }, },
  { 6719 /* s_sleep */, AMDGPU::S_SLEEP, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_sleep, MCK_Imm }, },
  { 6727 /* s_sub_i32 */, AMDGPU::S_SUB_I32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_sub_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6727 /* s_sub_i32 */, AMDGPU::S_SUB_I32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_sub_95_i32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6737 /* s_sub_u32 */, AMDGPU::S_SUB_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_sub_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6737 /* s_sub_u32 */, AMDGPU::S_SUB_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_sub_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6747 /* s_subb_u32 */, AMDGPU::S_SUBB_U32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_subb_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6747 /* s_subb_u32 */, AMDGPU::S_SUBB_U32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_subb_95_u32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6758 /* s_swappc_b64 */, AMDGPU::S_SWAPPC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_swappc_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6758 /* s_swappc_b64 */, AMDGPU::S_SWAPPC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_swappc_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6771 /* s_trap */, AMDGPU::S_TRAP, Convert__Imm1_1, Feature_isGCN, { MCK_s_95_trap, MCK_Imm }, },
  { 6778 /* s_ttracedata */, AMDGPU::S_TTRACEDATA, Convert_NoOperands, Feature_isGCN, { MCK_s_95_ttracedata }, },
  { 6791 /* s_waitcnt */, AMDGPU::S_WAITCNT, Convert__SWaitCnt1_1, Feature_isGCN, { MCK_s_95_waitcnt, MCK_SWaitCnt }, },
  { 6801 /* s_wqm_b32 */, AMDGPU::S_WQM_B32_si, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_wqm_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6801 /* s_wqm_b32 */, AMDGPU::S_WQM_B32_vi, Convert__Reg1_1__SSrc321_2, Feature_isGCN|Feature_isVI, { MCK_s_95_wqm_95_b32, MCK_SReg_32, MCK_SSrc32 }, },
  { 6811 /* s_wqm_b64 */, AMDGPU::S_WQM_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_wqm_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6811 /* s_wqm_b64 */, AMDGPU::S_WQM_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_wqm_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6821 /* s_xnor_b32 */, AMDGPU::S_XNOR_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_xnor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6821 /* s_xnor_b32 */, AMDGPU::S_XNOR_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_xnor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6832 /* s_xnor_b64 */, AMDGPU::S_XNOR_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_xnor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6832 /* s_xnor_b64 */, AMDGPU::S_XNOR_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_xnor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6843 /* s_xnor_saveexec_b64 */, AMDGPU::S_XNOR_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_xnor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6843 /* s_xnor_saveexec_b64 */, AMDGPU::S_XNOR_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_xnor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6863 /* s_xor_b32 */, AMDGPU::S_XOR_B32_si, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_xor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6863 /* s_xor_b32 */, AMDGPU::S_XOR_B32_vi, Convert__Reg1_1__SSrc321_2__SSrc321_3, Feature_isGCN|Feature_isVI, { MCK_s_95_xor_95_b32, MCK_SReg_32, MCK_SSrc32, MCK_SSrc32 }, },
  { 6873 /* s_xor_b64 */, AMDGPU::S_XOR_B64_si, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isSICI, { MCK_s_95_xor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6873 /* s_xor_b64 */, AMDGPU::S_XOR_B64_vi, Convert__Reg1_1__SSrc641_2__SSrc641_3, Feature_isGCN|Feature_isVI, { MCK_s_95_xor_95_b64, MCK_SReg_64, MCK_SSrc64, MCK_SSrc64 }, },
  { 6883 /* s_xor_saveexec_b64 */, AMDGPU::S_XOR_SAVEEXEC_B64_si, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_s_95_xor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6883 /* s_xor_saveexec_b64 */, AMDGPU::S_XOR_SAVEEXEC_B64_vi, Convert__Reg1_1__SSrc641_2, Feature_isGCN|Feature_isVI, { MCK_s_95_xor_95_saveexec_95_b64, MCK_SReg_64, MCK_SSrc64 }, },
  { 6902 /* tbuffer_load_format_xyzw */, AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6902 /* tbuffer_load_format_xyzw */, AMDGPU::TBUFFER_LOAD_FORMAT_XYZW_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_load_95_format_95_xyzw, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6927 /* tbuffer_store_format_x */, AMDGPU::TBUFFER_STORE_FORMAT_X_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6927 /* tbuffer_store_format_x */, AMDGPU::TBUFFER_STORE_FORMAT_X_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_x, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6950 /* tbuffer_store_format_xy */, AMDGPU::TBUFFER_STORE_FORMAT_XY_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6950 /* tbuffer_store_format_xy */, AMDGPU::TBUFFER_STORE_FORMAT_XY_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xy, MCK_VReg_64, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6974 /* tbuffer_store_format_xyz */, AMDGPU::TBUFFER_STORE_FORMAT_XYZ_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xyz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6974 /* tbuffer_store_format_xyz */, AMDGPU::TBUFFER_STORE_FORMAT_XYZ_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xyz, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6999 /* tbuffer_store_format_xyzw */, AMDGPU::TBUFFER_STORE_FORMAT_XYZW_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 6999 /* tbuffer_store_format_xyzw */, AMDGPU::TBUFFER_STORE_FORMAT_XYZW_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4__Imm1_5__Imm1_6__Imm1_7__Imm1_8__Reg1_9__Reg1_10__Imm1_11__Imm1_12__SCSrc321_13, Feature_isGCN, { MCK_tbuffer_95_store_95_format_95_xyzw, MCK_VReg_128, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_Imm, MCK_VGPR_32, MCK_SReg_128, MCK_Imm, MCK_Imm, MCK_SCSrc32 }, },
  { 7025 /* v_add_f16 */, AMDGPU::V_ADD_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_add_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7025 /* v_add_f16 */, AMDGPU::V_ADD_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_add_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7025 /* v_add_f16 */, AMDGPU::V_ADD_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_add_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7025 /* v_add_f16 */, AMDGPU::V_ADD_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_add_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7035 /* v_add_f32 */, AMDGPU::V_ADD_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_add_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7035 /* v_add_f32 */, AMDGPU::V_ADD_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_add_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7035 /* v_add_f32 */, AMDGPU::V_ADD_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_add_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7035 /* v_add_f32 */, AMDGPU::V_ADD_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_add_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7045 /* v_add_f64 */, AMDGPU::V_ADD_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_add_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7045 /* v_add_f64 */, AMDGPU::V_ADD_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_add_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7055 /* v_add_i32 */, AMDGPU::V_ADD_I32_e32_si, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_add_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7055 /* v_add_i32 */, AMDGPU::V_ADD_I32_e32_vi, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_add_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7055 /* v_add_i32 */, AMDGPU::V_ADD_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_add_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7055 /* v_add_i32 */, AMDGPU::V_ADD_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_add_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7065 /* v_add_u16 */, AMDGPU::V_ADD_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_add_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7065 /* v_add_u16 */, AMDGPU::V_ADD_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_add_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7065 /* v_add_u16 */, AMDGPU::V_ADD_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_add_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7065 /* v_add_u16 */, AMDGPU::V_ADD_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_add_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7075 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e32_si, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_addc_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 7075 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e32_vi, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_addc_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 7075 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_addc_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 7075 /* v_addc_u32 */, AMDGPU::V_ADDC_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_addc_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 7086 /* v_alignbit_b32 */, AMDGPU::V_ALIGNBIT_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_alignbit_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7086 /* v_alignbit_b32 */, AMDGPU::V_ALIGNBIT_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_alignbit_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7101 /* v_alignbyte_b32 */, AMDGPU::V_ALIGNBYTE_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_alignbyte_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7101 /* v_alignbyte_b32 */, AMDGPU::V_ALIGNBYTE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_alignbyte_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7117 /* v_and_b32 */, AMDGPU::V_AND_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_and_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7117 /* v_and_b32 */, AMDGPU::V_AND_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_and_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7117 /* v_and_b32 */, AMDGPU::V_AND_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_and_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7117 /* v_and_b32 */, AMDGPU::V_AND_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_and_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7127 /* v_ashr_i32 */, AMDGPU::V_ASHR_I32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_ashr_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7127 /* v_ashr_i32 */, AMDGPU::V_ASHR_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_ashr_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7138 /* v_ashr_i64 */, AMDGPU::V_ASHR_I64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_ashr_95_i64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 7138 /* v_ashr_i64 */, AMDGPU::V_ASHR_I64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_ashr_95_i64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 7149 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_ashrrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7149 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_ashrrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7149 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_ashrrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7149 /* v_ashrrev_b16 */, AMDGPU::V_ASHRREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_ashrrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7163 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ashrrev_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7163 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_ashrrev_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7163 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ashrrev_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7163 /* v_ashrrev_i32 */, AMDGPU::V_ASHRREV_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ashrrev_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7177 /* v_ashrrev_i64 */, AMDGPU::V_ASHRREV_I64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_ashrrev_95_i64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 7177 /* v_ashrrev_i64 */, AMDGPU::V_ASHRREV_I64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_ashrrev_95_i64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 7191 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bcnt_95_u32_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7191 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bcnt_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7191 /* v_bcnt_u32_b32 */, AMDGPU::V_BCNT_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bcnt_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7206 /* v_bfe_i32 */, AMDGPU::V_BFE_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfe_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7206 /* v_bfe_i32 */, AMDGPU::V_BFE_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bfe_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7216 /* v_bfe_u32 */, AMDGPU::V_BFE_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfe_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7216 /* v_bfe_u32 */, AMDGPU::V_BFE_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bfe_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7226 /* v_bfi_b32 */, AMDGPU::V_BFI_B32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfi_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7226 /* v_bfi_b32 */, AMDGPU::V_BFI_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bfi_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7236 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfm_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7236 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfm_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7236 /* v_bfm_b32 */, AMDGPU::V_BFM_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bfm_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7246 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfrev_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7246 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_bfrev_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7246 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_bfrev_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7246 /* v_bfrev_b32 */, AMDGPU::V_BFREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_bfrev_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7258 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_ceil_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7258 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_ceil_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7258 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_ceil_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7258 /* v_ceil_f16 */, AMDGPU::V_CEIL_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_ceil_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 7269 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_ceil_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7269 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_ceil_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 7269 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ceil_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7269 /* v_ceil_f32 */, AMDGPU::V_CEIL_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ceil_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7280 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_ceil_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 7280 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_ceil_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 7280 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_ceil_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7280 /* v_ceil_f64 */, AMDGPU::V_CEIL_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_ceil_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7291 /* v_clrexcp */, AMDGPU::V_CLREXCP_e32_si, Convert_NoOperands, Feature_isGCN|Feature_isSICI, { MCK_v_95_clrexcp }, },
  { 7291 /* v_clrexcp */, AMDGPU::V_CLREXCP_e32_vi, Convert_NoOperands, Feature_isGCN|Feature_isVI, { MCK_v_95_clrexcp }, },
  { 7291 /* v_clrexcp */, AMDGPU::V_CLREXCP_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_clrexcp }, },
  { 7291 /* v_clrexcp */, AMDGPU::V_CLREXCP_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_clrexcp }, },
  { 7301 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7301 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7301 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7301 /* v_cmp_class_f32 */, AMDGPU::V_CMP_CLASS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7317 /* v_cmp_class_f32_e32 */, AMDGPU::V_CMP_CLASS_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7317 /* v_cmp_class_f32_e32 */, AMDGPU::V_CMP_CLASS_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7337 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f64, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7337 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f64, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7337 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7337 /* v_cmp_class_f64 */, AMDGPU::V_CMP_CLASS_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 7353 /* v_cmp_class_f64_e32 */, AMDGPU::V_CMP_CLASS_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_class_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7353 /* v_cmp_class_f64_e32 */, AMDGPU::V_CMP_CLASS_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_class_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 7373 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7373 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7373 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7373 /* v_cmp_eq_f32 */, AMDGPU::V_CMP_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7386 /* v_cmp_eq_f32_e32 */, AMDGPU::V_CMP_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7386 /* v_cmp_eq_f32_e32 */, AMDGPU::V_CMP_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7403 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7403 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7403 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7403 /* v_cmp_eq_f64 */, AMDGPU::V_CMP_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7416 /* v_cmp_eq_f64_e32 */, AMDGPU::V_CMP_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7416 /* v_cmp_eq_f64_e32 */, AMDGPU::V_CMP_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7433 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7433 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7433 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7433 /* v_cmp_eq_i32 */, AMDGPU::V_CMP_EQ_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7446 /* v_cmp_eq_i32_e32 */, AMDGPU::V_CMP_EQ_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7446 /* v_cmp_eq_i32_e32 */, AMDGPU::V_CMP_EQ_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7463 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7463 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7463 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7463 /* v_cmp_eq_i64 */, AMDGPU::V_CMP_EQ_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7476 /* v_cmp_eq_i64_e32 */, AMDGPU::V_CMP_EQ_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7476 /* v_cmp_eq_i64_e32 */, AMDGPU::V_CMP_EQ_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7493 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7493 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7493 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7493 /* v_cmp_eq_u32 */, AMDGPU::V_CMP_EQ_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7506 /* v_cmp_eq_u32_e32 */, AMDGPU::V_CMP_EQ_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7506 /* v_cmp_eq_u32_e32 */, AMDGPU::V_CMP_EQ_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7523 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7523 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7523 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7523 /* v_cmp_eq_u64 */, AMDGPU::V_CMP_EQ_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7536 /* v_cmp_eq_u64_e32 */, AMDGPU::V_CMP_EQ_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_eq_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7536 /* v_cmp_eq_u64_e32 */, AMDGPU::V_CMP_EQ_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_eq_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7553 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7553 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7553 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7553 /* v_cmp_f_f32 */, AMDGPU::V_CMP_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7565 /* v_cmp_f_f32_e32 */, AMDGPU::V_CMP_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7565 /* v_cmp_f_f32_e32 */, AMDGPU::V_CMP_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7581 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7581 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7581 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7581 /* v_cmp_f_f64 */, AMDGPU::V_CMP_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7593 /* v_cmp_f_f64_e32 */, AMDGPU::V_CMP_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7593 /* v_cmp_f_f64_e32 */, AMDGPU::V_CMP_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7609 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7609 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7609 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7609 /* v_cmp_f_i32 */, AMDGPU::V_CMP_F_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7621 /* v_cmp_f_i32_e32 */, AMDGPU::V_CMP_F_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7621 /* v_cmp_f_i32_e32 */, AMDGPU::V_CMP_F_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7637 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7637 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7637 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7637 /* v_cmp_f_i64 */, AMDGPU::V_CMP_F_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7649 /* v_cmp_f_i64_e32 */, AMDGPU::V_CMP_F_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7649 /* v_cmp_f_i64_e32 */, AMDGPU::V_CMP_F_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7665 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7665 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7665 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7665 /* v_cmp_f_u32 */, AMDGPU::V_CMP_F_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7677 /* v_cmp_f_u32_e32 */, AMDGPU::V_CMP_F_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7677 /* v_cmp_f_u32_e32 */, AMDGPU::V_CMP_F_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7693 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7693 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7693 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7693 /* v_cmp_f_u64 */, AMDGPU::V_CMP_F_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7705 /* v_cmp_f_u64_e32 */, AMDGPU::V_CMP_F_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_f_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7705 /* v_cmp_f_u64_e32 */, AMDGPU::V_CMP_F_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_f_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7721 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7721 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7721 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7721 /* v_cmp_ge_f32 */, AMDGPU::V_CMP_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7734 /* v_cmp_ge_f32_e32 */, AMDGPU::V_CMP_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7734 /* v_cmp_ge_f32_e32 */, AMDGPU::V_CMP_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7751 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7751 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7751 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7751 /* v_cmp_ge_f64 */, AMDGPU::V_CMP_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7764 /* v_cmp_ge_f64_e32 */, AMDGPU::V_CMP_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7764 /* v_cmp_ge_f64_e32 */, AMDGPU::V_CMP_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7781 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7781 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7781 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7781 /* v_cmp_ge_i32 */, AMDGPU::V_CMP_GE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7794 /* v_cmp_ge_i32_e32 */, AMDGPU::V_CMP_GE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7794 /* v_cmp_ge_i32_e32 */, AMDGPU::V_CMP_GE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7811 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7811 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7811 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7811 /* v_cmp_ge_i64 */, AMDGPU::V_CMP_GE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7824 /* v_cmp_ge_i64_e32 */, AMDGPU::V_CMP_GE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7824 /* v_cmp_ge_i64_e32 */, AMDGPU::V_CMP_GE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7841 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7841 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7841 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7841 /* v_cmp_ge_u32 */, AMDGPU::V_CMP_GE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7854 /* v_cmp_ge_u32_e32 */, AMDGPU::V_CMP_GE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7854 /* v_cmp_ge_u32_e32 */, AMDGPU::V_CMP_GE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7871 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7871 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7871 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7871 /* v_cmp_ge_u64 */, AMDGPU::V_CMP_GE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7884 /* v_cmp_ge_u64_e32 */, AMDGPU::V_CMP_GE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ge_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7884 /* v_cmp_ge_u64_e32 */, AMDGPU::V_CMP_GE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ge_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7901 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7901 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7901 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7901 /* v_cmp_gt_f32 */, AMDGPU::V_CMP_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7914 /* v_cmp_gt_f32_e32 */, AMDGPU::V_CMP_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7914 /* v_cmp_gt_f32_e32 */, AMDGPU::V_CMP_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7931 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7931 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7931 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7931 /* v_cmp_gt_f64 */, AMDGPU::V_CMP_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 7944 /* v_cmp_gt_f64_e32 */, AMDGPU::V_CMP_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7944 /* v_cmp_gt_f64_e32 */, AMDGPU::V_CMP_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7961 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7961 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7961 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7961 /* v_cmp_gt_i32 */, AMDGPU::V_CMP_GT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 7974 /* v_cmp_gt_i32_e32 */, AMDGPU::V_CMP_GT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7974 /* v_cmp_gt_i32_e32 */, AMDGPU::V_CMP_GT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 7991 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7991 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 7991 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 7991 /* v_cmp_gt_i64 */, AMDGPU::V_CMP_GT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8004 /* v_cmp_gt_i64_e32 */, AMDGPU::V_CMP_GT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8004 /* v_cmp_gt_i64_e32 */, AMDGPU::V_CMP_GT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8021 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8021 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8021 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8021 /* v_cmp_gt_u32 */, AMDGPU::V_CMP_GT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8034 /* v_cmp_gt_u32_e32 */, AMDGPU::V_CMP_GT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8034 /* v_cmp_gt_u32_e32 */, AMDGPU::V_CMP_GT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8051 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8051 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8051 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8051 /* v_cmp_gt_u64 */, AMDGPU::V_CMP_GT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8064 /* v_cmp_gt_u64_e32 */, AMDGPU::V_CMP_GT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_gt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8064 /* v_cmp_gt_u64_e32 */, AMDGPU::V_CMP_GT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_gt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8081 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8081 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8081 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8081 /* v_cmp_le_f32 */, AMDGPU::V_CMP_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8094 /* v_cmp_le_f32_e32 */, AMDGPU::V_CMP_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8094 /* v_cmp_le_f32_e32 */, AMDGPU::V_CMP_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8111 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8111 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8111 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8111 /* v_cmp_le_f64 */, AMDGPU::V_CMP_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8124 /* v_cmp_le_f64_e32 */, AMDGPU::V_CMP_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8124 /* v_cmp_le_f64_e32 */, AMDGPU::V_CMP_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8141 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8141 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8141 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8141 /* v_cmp_le_i32 */, AMDGPU::V_CMP_LE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8154 /* v_cmp_le_i32_e32 */, AMDGPU::V_CMP_LE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8154 /* v_cmp_le_i32_e32 */, AMDGPU::V_CMP_LE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8171 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8171 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8171 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8171 /* v_cmp_le_i64 */, AMDGPU::V_CMP_LE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8184 /* v_cmp_le_i64_e32 */, AMDGPU::V_CMP_LE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8184 /* v_cmp_le_i64_e32 */, AMDGPU::V_CMP_LE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8201 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8201 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8201 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8201 /* v_cmp_le_u32 */, AMDGPU::V_CMP_LE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8214 /* v_cmp_le_u32_e32 */, AMDGPU::V_CMP_LE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8214 /* v_cmp_le_u32_e32 */, AMDGPU::V_CMP_LE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8231 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8231 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8231 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8231 /* v_cmp_le_u64 */, AMDGPU::V_CMP_LE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8244 /* v_cmp_le_u64_e32 */, AMDGPU::V_CMP_LE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_le_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8244 /* v_cmp_le_u64_e32 */, AMDGPU::V_CMP_LE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_le_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8261 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8261 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8261 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8261 /* v_cmp_lg_f32 */, AMDGPU::V_CMP_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8274 /* v_cmp_lg_f32_e32 */, AMDGPU::V_CMP_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8274 /* v_cmp_lg_f32_e32 */, AMDGPU::V_CMP_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8291 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8291 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8291 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8291 /* v_cmp_lg_f64 */, AMDGPU::V_CMP_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8304 /* v_cmp_lg_f64_e32 */, AMDGPU::V_CMP_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8304 /* v_cmp_lg_f64_e32 */, AMDGPU::V_CMP_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8321 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8321 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8321 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8321 /* v_cmp_lt_f32 */, AMDGPU::V_CMP_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8334 /* v_cmp_lt_f32_e32 */, AMDGPU::V_CMP_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8334 /* v_cmp_lt_f32_e32 */, AMDGPU::V_CMP_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8351 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8351 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8351 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8351 /* v_cmp_lt_f64 */, AMDGPU::V_CMP_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8364 /* v_cmp_lt_f64_e32 */, AMDGPU::V_CMP_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8364 /* v_cmp_lt_f64_e32 */, AMDGPU::V_CMP_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8381 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8381 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8381 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8381 /* v_cmp_lt_i32 */, AMDGPU::V_CMP_LT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8394 /* v_cmp_lt_i32_e32 */, AMDGPU::V_CMP_LT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8394 /* v_cmp_lt_i32_e32 */, AMDGPU::V_CMP_LT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8411 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8411 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8411 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8411 /* v_cmp_lt_i64 */, AMDGPU::V_CMP_LT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8424 /* v_cmp_lt_i64_e32 */, AMDGPU::V_CMP_LT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8424 /* v_cmp_lt_i64_e32 */, AMDGPU::V_CMP_LT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8441 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8441 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8441 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8441 /* v_cmp_lt_u32 */, AMDGPU::V_CMP_LT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8454 /* v_cmp_lt_u32_e32 */, AMDGPU::V_CMP_LT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8454 /* v_cmp_lt_u32_e32 */, AMDGPU::V_CMP_LT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8471 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8471 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8471 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8471 /* v_cmp_lt_u64 */, AMDGPU::V_CMP_LT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8484 /* v_cmp_lt_u64_e32 */, AMDGPU::V_CMP_LT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_lt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8484 /* v_cmp_lt_u64_e32 */, AMDGPU::V_CMP_LT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_lt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8501 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8501 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8501 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8501 /* v_cmp_ne_i32 */, AMDGPU::V_CMP_NE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8514 /* v_cmp_ne_i32_e32 */, AMDGPU::V_CMP_NE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8514 /* v_cmp_ne_i32_e32 */, AMDGPU::V_CMP_NE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8531 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8531 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8531 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8531 /* v_cmp_ne_i64 */, AMDGPU::V_CMP_NE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8544 /* v_cmp_ne_i64_e32 */, AMDGPU::V_CMP_NE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8544 /* v_cmp_ne_i64_e32 */, AMDGPU::V_CMP_NE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8561 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8561 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8561 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8561 /* v_cmp_ne_u32 */, AMDGPU::V_CMP_NE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 8574 /* v_cmp_ne_u32_e32 */, AMDGPU::V_CMP_NE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8574 /* v_cmp_ne_u32_e32 */, AMDGPU::V_CMP_NE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8591 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8591 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8591 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8591 /* v_cmp_ne_u64 */, AMDGPU::V_CMP_NE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 8604 /* v_cmp_ne_u64_e32 */, AMDGPU::V_CMP_NE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ne_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8604 /* v_cmp_ne_u64_e32 */, AMDGPU::V_CMP_NE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ne_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8621 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8621 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8621 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8621 /* v_cmp_neq_f32 */, AMDGPU::V_CMP_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8635 /* v_cmp_neq_f32_e32 */, AMDGPU::V_CMP_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8635 /* v_cmp_neq_f32_e32 */, AMDGPU::V_CMP_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8653 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8653 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8653 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8653 /* v_cmp_neq_f64 */, AMDGPU::V_CMP_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8667 /* v_cmp_neq_f64_e32 */, AMDGPU::V_CMP_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8667 /* v_cmp_neq_f64_e32 */, AMDGPU::V_CMP_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8685 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8685 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8685 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8685 /* v_cmp_nge_f32 */, AMDGPU::V_CMP_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8699 /* v_cmp_nge_f32_e32 */, AMDGPU::V_CMP_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8699 /* v_cmp_nge_f32_e32 */, AMDGPU::V_CMP_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8717 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8717 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8717 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8717 /* v_cmp_nge_f64 */, AMDGPU::V_CMP_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8731 /* v_cmp_nge_f64_e32 */, AMDGPU::V_CMP_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8731 /* v_cmp_nge_f64_e32 */, AMDGPU::V_CMP_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8749 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8749 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8749 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8749 /* v_cmp_ngt_f32 */, AMDGPU::V_CMP_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8763 /* v_cmp_ngt_f32_e32 */, AMDGPU::V_CMP_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8763 /* v_cmp_ngt_f32_e32 */, AMDGPU::V_CMP_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8781 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8781 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8781 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8781 /* v_cmp_ngt_f64 */, AMDGPU::V_CMP_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8795 /* v_cmp_ngt_f64_e32 */, AMDGPU::V_CMP_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8795 /* v_cmp_ngt_f64_e32 */, AMDGPU::V_CMP_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8813 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8813 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8813 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8813 /* v_cmp_nle_f32 */, AMDGPU::V_CMP_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8827 /* v_cmp_nle_f32_e32 */, AMDGPU::V_CMP_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8827 /* v_cmp_nle_f32_e32 */, AMDGPU::V_CMP_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8845 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8845 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8845 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8845 /* v_cmp_nle_f64 */, AMDGPU::V_CMP_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8859 /* v_cmp_nle_f64_e32 */, AMDGPU::V_CMP_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8859 /* v_cmp_nle_f64_e32 */, AMDGPU::V_CMP_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8877 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8877 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8877 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8877 /* v_cmp_nlg_f32 */, AMDGPU::V_CMP_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8891 /* v_cmp_nlg_f32_e32 */, AMDGPU::V_CMP_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8891 /* v_cmp_nlg_f32_e32 */, AMDGPU::V_CMP_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8909 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8909 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8909 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8909 /* v_cmp_nlg_f64 */, AMDGPU::V_CMP_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8923 /* v_cmp_nlg_f64_e32 */, AMDGPU::V_CMP_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8923 /* v_cmp_nlg_f64_e32 */, AMDGPU::V_CMP_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8941 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8941 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8941 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8941 /* v_cmp_nlt_f32 */, AMDGPU::V_CMP_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8955 /* v_cmp_nlt_f32_e32 */, AMDGPU::V_CMP_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8955 /* v_cmp_nlt_f32_e32 */, AMDGPU::V_CMP_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 8973 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8973 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8973 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8973 /* v_cmp_nlt_f64 */, AMDGPU::V_CMP_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 8987 /* v_cmp_nlt_f64_e32 */, AMDGPU::V_CMP_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 8987 /* v_cmp_nlt_f64_e32 */, AMDGPU::V_CMP_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9005 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9005 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9005 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9005 /* v_cmp_o_f32 */, AMDGPU::V_CMP_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9017 /* v_cmp_o_f32_e32 */, AMDGPU::V_CMP_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9017 /* v_cmp_o_f32_e32 */, AMDGPU::V_CMP_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9033 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9033 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9033 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9033 /* v_cmp_o_f64 */, AMDGPU::V_CMP_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9045 /* v_cmp_o_f64_e32 */, AMDGPU::V_CMP_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9045 /* v_cmp_o_f64_e32 */, AMDGPU::V_CMP_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9061 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9061 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9061 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9061 /* v_cmp_t_i32 */, AMDGPU::V_CMP_T_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9073 /* v_cmp_t_i32_e32 */, AMDGPU::V_CMP_T_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9073 /* v_cmp_t_i32_e32 */, AMDGPU::V_CMP_T_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9089 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9089 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9089 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9089 /* v_cmp_t_i64 */, AMDGPU::V_CMP_T_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9101 /* v_cmp_t_i64_e32 */, AMDGPU::V_CMP_T_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9101 /* v_cmp_t_i64_e32 */, AMDGPU::V_CMP_T_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9117 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9117 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9117 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9117 /* v_cmp_t_u32 */, AMDGPU::V_CMP_T_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 9129 /* v_cmp_t_u32_e32 */, AMDGPU::V_CMP_T_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9129 /* v_cmp_t_u32_e32 */, AMDGPU::V_CMP_T_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9145 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9145 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9145 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9145 /* v_cmp_t_u64 */, AMDGPU::V_CMP_T_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 9157 /* v_cmp_t_u64_e32 */, AMDGPU::V_CMP_T_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_t_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9157 /* v_cmp_t_u64_e32 */, AMDGPU::V_CMP_T_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_t_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9173 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9173 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9173 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9173 /* v_cmp_tru_f32 */, AMDGPU::V_CMP_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9187 /* v_cmp_tru_f32_e32 */, AMDGPU::V_CMP_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9187 /* v_cmp_tru_f32_e32 */, AMDGPU::V_CMP_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9205 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9205 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9205 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9205 /* v_cmp_tru_f64 */, AMDGPU::V_CMP_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9219 /* v_cmp_tru_f64_e32 */, AMDGPU::V_CMP_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9219 /* v_cmp_tru_f64_e32 */, AMDGPU::V_CMP_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9237 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9237 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9237 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9237 /* v_cmp_u_f32 */, AMDGPU::V_CMP_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9249 /* v_cmp_u_f32_e32 */, AMDGPU::V_CMP_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9249 /* v_cmp_u_f32_e32 */, AMDGPU::V_CMP_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9265 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9265 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9265 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9265 /* v_cmp_u_f64 */, AMDGPU::V_CMP_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9277 /* v_cmp_u_f64_e32 */, AMDGPU::V_CMP_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmp_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9277 /* v_cmp_u_f64_e32 */, AMDGPU::V_CMP_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmp_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9293 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9293 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9293 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9293 /* v_cmps_eq_f32 */, AMDGPU::V_CMPS_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9307 /* v_cmps_eq_f32_e32 */, AMDGPU::V_CMPS_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9307 /* v_cmps_eq_f32_e32 */, AMDGPU::V_CMPS_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9325 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9325 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9325 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9325 /* v_cmps_eq_f64 */, AMDGPU::V_CMPS_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9339 /* v_cmps_eq_f64_e32 */, AMDGPU::V_CMPS_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9339 /* v_cmps_eq_f64_e32 */, AMDGPU::V_CMPS_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9357 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9357 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9357 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9357 /* v_cmps_f_f32 */, AMDGPU::V_CMPS_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9370 /* v_cmps_f_f32_e32 */, AMDGPU::V_CMPS_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9370 /* v_cmps_f_f32_e32 */, AMDGPU::V_CMPS_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9387 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9387 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9387 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9387 /* v_cmps_f_f64 */, AMDGPU::V_CMPS_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9400 /* v_cmps_f_f64_e32 */, AMDGPU::V_CMPS_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9400 /* v_cmps_f_f64_e32 */, AMDGPU::V_CMPS_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9417 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9417 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9417 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9417 /* v_cmps_ge_f32 */, AMDGPU::V_CMPS_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9431 /* v_cmps_ge_f32_e32 */, AMDGPU::V_CMPS_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9431 /* v_cmps_ge_f32_e32 */, AMDGPU::V_CMPS_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9449 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9449 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9449 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9449 /* v_cmps_ge_f64 */, AMDGPU::V_CMPS_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9463 /* v_cmps_ge_f64_e32 */, AMDGPU::V_CMPS_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9463 /* v_cmps_ge_f64_e32 */, AMDGPU::V_CMPS_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9481 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9481 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9481 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9481 /* v_cmps_gt_f32 */, AMDGPU::V_CMPS_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9495 /* v_cmps_gt_f32_e32 */, AMDGPU::V_CMPS_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9495 /* v_cmps_gt_f32_e32 */, AMDGPU::V_CMPS_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9513 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9513 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9513 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9513 /* v_cmps_gt_f64 */, AMDGPU::V_CMPS_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9527 /* v_cmps_gt_f64_e32 */, AMDGPU::V_CMPS_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9527 /* v_cmps_gt_f64_e32 */, AMDGPU::V_CMPS_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9545 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9545 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9545 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9545 /* v_cmps_le_f32 */, AMDGPU::V_CMPS_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9559 /* v_cmps_le_f32_e32 */, AMDGPU::V_CMPS_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9559 /* v_cmps_le_f32_e32 */, AMDGPU::V_CMPS_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9577 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9577 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9577 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9577 /* v_cmps_le_f64 */, AMDGPU::V_CMPS_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9591 /* v_cmps_le_f64_e32 */, AMDGPU::V_CMPS_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9591 /* v_cmps_le_f64_e32 */, AMDGPU::V_CMPS_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9609 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9609 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9609 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9609 /* v_cmps_lg_f32 */, AMDGPU::V_CMPS_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9623 /* v_cmps_lg_f32_e32 */, AMDGPU::V_CMPS_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9623 /* v_cmps_lg_f32_e32 */, AMDGPU::V_CMPS_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9641 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9641 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9641 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9641 /* v_cmps_lg_f64 */, AMDGPU::V_CMPS_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9655 /* v_cmps_lg_f64_e32 */, AMDGPU::V_CMPS_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9655 /* v_cmps_lg_f64_e32 */, AMDGPU::V_CMPS_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9673 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9673 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9673 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9673 /* v_cmps_lt_f32 */, AMDGPU::V_CMPS_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9687 /* v_cmps_lt_f32_e32 */, AMDGPU::V_CMPS_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9687 /* v_cmps_lt_f32_e32 */, AMDGPU::V_CMPS_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9705 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9705 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9705 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9705 /* v_cmps_lt_f64 */, AMDGPU::V_CMPS_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9719 /* v_cmps_lt_f64_e32 */, AMDGPU::V_CMPS_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9719 /* v_cmps_lt_f64_e32 */, AMDGPU::V_CMPS_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9737 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9737 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9737 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9737 /* v_cmps_neq_f32 */, AMDGPU::V_CMPS_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9752 /* v_cmps_neq_f32_e32 */, AMDGPU::V_CMPS_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9752 /* v_cmps_neq_f32_e32 */, AMDGPU::V_CMPS_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9771 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9771 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9771 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9771 /* v_cmps_neq_f64 */, AMDGPU::V_CMPS_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9786 /* v_cmps_neq_f64_e32 */, AMDGPU::V_CMPS_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9786 /* v_cmps_neq_f64_e32 */, AMDGPU::V_CMPS_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9805 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9805 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9805 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9805 /* v_cmps_nge_f32 */, AMDGPU::V_CMPS_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9820 /* v_cmps_nge_f32_e32 */, AMDGPU::V_CMPS_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9820 /* v_cmps_nge_f32_e32 */, AMDGPU::V_CMPS_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9839 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9839 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9839 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9839 /* v_cmps_nge_f64 */, AMDGPU::V_CMPS_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9854 /* v_cmps_nge_f64_e32 */, AMDGPU::V_CMPS_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9854 /* v_cmps_nge_f64_e32 */, AMDGPU::V_CMPS_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9873 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9873 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9873 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9873 /* v_cmps_ngt_f32 */, AMDGPU::V_CMPS_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9888 /* v_cmps_ngt_f32_e32 */, AMDGPU::V_CMPS_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9888 /* v_cmps_ngt_f32_e32 */, AMDGPU::V_CMPS_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9907 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9907 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9907 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9907 /* v_cmps_ngt_f64 */, AMDGPU::V_CMPS_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9922 /* v_cmps_ngt_f64_e32 */, AMDGPU::V_CMPS_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9922 /* v_cmps_ngt_f64_e32 */, AMDGPU::V_CMPS_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9941 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9941 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9941 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9941 /* v_cmps_nle_f32 */, AMDGPU::V_CMPS_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9956 /* v_cmps_nle_f32_e32 */, AMDGPU::V_CMPS_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9956 /* v_cmps_nle_f32_e32 */, AMDGPU::V_CMPS_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 9975 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9975 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9975 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9975 /* v_cmps_nle_f64 */, AMDGPU::V_CMPS_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 9990 /* v_cmps_nle_f64_e32 */, AMDGPU::V_CMPS_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 9990 /* v_cmps_nle_f64_e32 */, AMDGPU::V_CMPS_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10009 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10009 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10009 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10009 /* v_cmps_nlg_f32 */, AMDGPU::V_CMPS_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10024 /* v_cmps_nlg_f32_e32 */, AMDGPU::V_CMPS_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10024 /* v_cmps_nlg_f32_e32 */, AMDGPU::V_CMPS_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10043 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10043 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10043 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10043 /* v_cmps_nlg_f64 */, AMDGPU::V_CMPS_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10058 /* v_cmps_nlg_f64_e32 */, AMDGPU::V_CMPS_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10058 /* v_cmps_nlg_f64_e32 */, AMDGPU::V_CMPS_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10077 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10077 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10077 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10077 /* v_cmps_nlt_f32 */, AMDGPU::V_CMPS_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10092 /* v_cmps_nlt_f32_e32 */, AMDGPU::V_CMPS_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10092 /* v_cmps_nlt_f32_e32 */, AMDGPU::V_CMPS_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10111 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10111 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10111 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10111 /* v_cmps_nlt_f64 */, AMDGPU::V_CMPS_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10126 /* v_cmps_nlt_f64_e32 */, AMDGPU::V_CMPS_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10126 /* v_cmps_nlt_f64_e32 */, AMDGPU::V_CMPS_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10145 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10145 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10145 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10145 /* v_cmps_o_f32 */, AMDGPU::V_CMPS_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10158 /* v_cmps_o_f32_e32 */, AMDGPU::V_CMPS_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10158 /* v_cmps_o_f32_e32 */, AMDGPU::V_CMPS_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10175 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10175 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10175 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10175 /* v_cmps_o_f64 */, AMDGPU::V_CMPS_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10188 /* v_cmps_o_f64_e32 */, AMDGPU::V_CMPS_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10188 /* v_cmps_o_f64_e32 */, AMDGPU::V_CMPS_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10205 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10205 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10205 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10205 /* v_cmps_tru_f32 */, AMDGPU::V_CMPS_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10220 /* v_cmps_tru_f32_e32 */, AMDGPU::V_CMPS_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10220 /* v_cmps_tru_f32_e32 */, AMDGPU::V_CMPS_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10239 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10239 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10239 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10239 /* v_cmps_tru_f64 */, AMDGPU::V_CMPS_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10254 /* v_cmps_tru_f64_e32 */, AMDGPU::V_CMPS_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10254 /* v_cmps_tru_f64_e32 */, AMDGPU::V_CMPS_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10273 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10273 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10273 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10273 /* v_cmps_u_f32 */, AMDGPU::V_CMPS_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10286 /* v_cmps_u_f32_e32 */, AMDGPU::V_CMPS_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10286 /* v_cmps_u_f32_e32 */, AMDGPU::V_CMPS_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10303 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10303 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10303 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10303 /* v_cmps_u_f64 */, AMDGPU::V_CMPS_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10316 /* v_cmps_u_f64_e32 */, AMDGPU::V_CMPS_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmps_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10316 /* v_cmps_u_f64_e32 */, AMDGPU::V_CMPS_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmps_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10333 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10333 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10333 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10333 /* v_cmpsx_eq_f32 */, AMDGPU::V_CMPSX_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10348 /* v_cmpsx_eq_f32_e32 */, AMDGPU::V_CMPSX_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10348 /* v_cmpsx_eq_f32_e32 */, AMDGPU::V_CMPSX_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10367 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10367 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10367 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10367 /* v_cmpsx_eq_f64 */, AMDGPU::V_CMPSX_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10382 /* v_cmpsx_eq_f64_e32 */, AMDGPU::V_CMPSX_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10382 /* v_cmpsx_eq_f64_e32 */, AMDGPU::V_CMPSX_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10401 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10401 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10401 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10401 /* v_cmpsx_f_f32 */, AMDGPU::V_CMPSX_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10415 /* v_cmpsx_f_f32_e32 */, AMDGPU::V_CMPSX_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10415 /* v_cmpsx_f_f32_e32 */, AMDGPU::V_CMPSX_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10433 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10433 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10433 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10433 /* v_cmpsx_f_f64 */, AMDGPU::V_CMPSX_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10447 /* v_cmpsx_f_f64_e32 */, AMDGPU::V_CMPSX_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10447 /* v_cmpsx_f_f64_e32 */, AMDGPU::V_CMPSX_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10465 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10465 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10465 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10465 /* v_cmpsx_ge_f32 */, AMDGPU::V_CMPSX_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10480 /* v_cmpsx_ge_f32_e32 */, AMDGPU::V_CMPSX_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10480 /* v_cmpsx_ge_f32_e32 */, AMDGPU::V_CMPSX_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10499 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10499 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10499 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10499 /* v_cmpsx_ge_f64 */, AMDGPU::V_CMPSX_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10514 /* v_cmpsx_ge_f64_e32 */, AMDGPU::V_CMPSX_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10514 /* v_cmpsx_ge_f64_e32 */, AMDGPU::V_CMPSX_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10533 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10533 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10533 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10533 /* v_cmpsx_gt_f32 */, AMDGPU::V_CMPSX_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10548 /* v_cmpsx_gt_f32_e32 */, AMDGPU::V_CMPSX_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10548 /* v_cmpsx_gt_f32_e32 */, AMDGPU::V_CMPSX_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10567 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10567 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10567 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10567 /* v_cmpsx_gt_f64 */, AMDGPU::V_CMPSX_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10582 /* v_cmpsx_gt_f64_e32 */, AMDGPU::V_CMPSX_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10582 /* v_cmpsx_gt_f64_e32 */, AMDGPU::V_CMPSX_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10601 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10601 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10601 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10601 /* v_cmpsx_le_f32 */, AMDGPU::V_CMPSX_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10616 /* v_cmpsx_le_f32_e32 */, AMDGPU::V_CMPSX_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10616 /* v_cmpsx_le_f32_e32 */, AMDGPU::V_CMPSX_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10635 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10635 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10635 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10635 /* v_cmpsx_le_f64 */, AMDGPU::V_CMPSX_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10650 /* v_cmpsx_le_f64_e32 */, AMDGPU::V_CMPSX_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10650 /* v_cmpsx_le_f64_e32 */, AMDGPU::V_CMPSX_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10669 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10669 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10669 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10669 /* v_cmpsx_lg_f32 */, AMDGPU::V_CMPSX_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10684 /* v_cmpsx_lg_f32_e32 */, AMDGPU::V_CMPSX_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10684 /* v_cmpsx_lg_f32_e32 */, AMDGPU::V_CMPSX_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10703 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10703 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10703 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10703 /* v_cmpsx_lg_f64 */, AMDGPU::V_CMPSX_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10718 /* v_cmpsx_lg_f64_e32 */, AMDGPU::V_CMPSX_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10718 /* v_cmpsx_lg_f64_e32 */, AMDGPU::V_CMPSX_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10737 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10737 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10737 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10737 /* v_cmpsx_lt_f32 */, AMDGPU::V_CMPSX_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10752 /* v_cmpsx_lt_f32_e32 */, AMDGPU::V_CMPSX_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10752 /* v_cmpsx_lt_f32_e32 */, AMDGPU::V_CMPSX_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10771 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10771 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10771 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10771 /* v_cmpsx_lt_f64 */, AMDGPU::V_CMPSX_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10786 /* v_cmpsx_lt_f64_e32 */, AMDGPU::V_CMPSX_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10786 /* v_cmpsx_lt_f64_e32 */, AMDGPU::V_CMPSX_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10805 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10805 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10805 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10805 /* v_cmpsx_neq_f32 */, AMDGPU::V_CMPSX_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10821 /* v_cmpsx_neq_f32_e32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10821 /* v_cmpsx_neq_f32_e32 */, AMDGPU::V_CMPSX_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10841 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10841 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10841 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10841 /* v_cmpsx_neq_f64 */, AMDGPU::V_CMPSX_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10857 /* v_cmpsx_neq_f64_e32 */, AMDGPU::V_CMPSX_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10857 /* v_cmpsx_neq_f64_e32 */, AMDGPU::V_CMPSX_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10877 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10877 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10877 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10877 /* v_cmpsx_nge_f32 */, AMDGPU::V_CMPSX_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10893 /* v_cmpsx_nge_f32_e32 */, AMDGPU::V_CMPSX_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10893 /* v_cmpsx_nge_f32_e32 */, AMDGPU::V_CMPSX_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10913 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10913 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10913 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10913 /* v_cmpsx_nge_f64 */, AMDGPU::V_CMPSX_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10929 /* v_cmpsx_nge_f64_e32 */, AMDGPU::V_CMPSX_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10929 /* v_cmpsx_nge_f64_e32 */, AMDGPU::V_CMPSX_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10949 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10949 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10949 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10949 /* v_cmpsx_ngt_f32 */, AMDGPU::V_CMPSX_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10965 /* v_cmpsx_ngt_f32_e32 */, AMDGPU::V_CMPSX_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10965 /* v_cmpsx_ngt_f32_e32 */, AMDGPU::V_CMPSX_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 10985 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10985 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 10985 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 10985 /* v_cmpsx_ngt_f64 */, AMDGPU::V_CMPSX_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11001 /* v_cmpsx_ngt_f64_e32 */, AMDGPU::V_CMPSX_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11001 /* v_cmpsx_ngt_f64_e32 */, AMDGPU::V_CMPSX_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11021 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11021 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11021 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11021 /* v_cmpsx_nle_f32 */, AMDGPU::V_CMPSX_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11037 /* v_cmpsx_nle_f32_e32 */, AMDGPU::V_CMPSX_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11037 /* v_cmpsx_nle_f32_e32 */, AMDGPU::V_CMPSX_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11057 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11057 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11057 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11057 /* v_cmpsx_nle_f64 */, AMDGPU::V_CMPSX_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11073 /* v_cmpsx_nle_f64_e32 */, AMDGPU::V_CMPSX_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11073 /* v_cmpsx_nle_f64_e32 */, AMDGPU::V_CMPSX_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11093 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11093 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11093 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11093 /* v_cmpsx_nlg_f32 */, AMDGPU::V_CMPSX_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11109 /* v_cmpsx_nlg_f32_e32 */, AMDGPU::V_CMPSX_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11109 /* v_cmpsx_nlg_f32_e32 */, AMDGPU::V_CMPSX_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11129 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11129 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11129 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11129 /* v_cmpsx_nlg_f64 */, AMDGPU::V_CMPSX_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11145 /* v_cmpsx_nlg_f64_e32 */, AMDGPU::V_CMPSX_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11145 /* v_cmpsx_nlg_f64_e32 */, AMDGPU::V_CMPSX_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11165 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11165 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11165 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11165 /* v_cmpsx_nlt_f32 */, AMDGPU::V_CMPSX_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11181 /* v_cmpsx_nlt_f32_e32 */, AMDGPU::V_CMPSX_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11181 /* v_cmpsx_nlt_f32_e32 */, AMDGPU::V_CMPSX_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11201 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11201 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11201 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11201 /* v_cmpsx_nlt_f64 */, AMDGPU::V_CMPSX_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11217 /* v_cmpsx_nlt_f64_e32 */, AMDGPU::V_CMPSX_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11217 /* v_cmpsx_nlt_f64_e32 */, AMDGPU::V_CMPSX_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11237 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11237 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11237 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11237 /* v_cmpsx_o_f32 */, AMDGPU::V_CMPSX_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11251 /* v_cmpsx_o_f32_e32 */, AMDGPU::V_CMPSX_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11251 /* v_cmpsx_o_f32_e32 */, AMDGPU::V_CMPSX_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11269 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11269 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11269 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11269 /* v_cmpsx_o_f64 */, AMDGPU::V_CMPSX_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11283 /* v_cmpsx_o_f64_e32 */, AMDGPU::V_CMPSX_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11283 /* v_cmpsx_o_f64_e32 */, AMDGPU::V_CMPSX_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11301 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11301 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11301 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11301 /* v_cmpsx_tru_f32 */, AMDGPU::V_CMPSX_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11317 /* v_cmpsx_tru_f32_e32 */, AMDGPU::V_CMPSX_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11317 /* v_cmpsx_tru_f32_e32 */, AMDGPU::V_CMPSX_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11337 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11337 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11337 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11337 /* v_cmpsx_tru_f64 */, AMDGPU::V_CMPSX_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11353 /* v_cmpsx_tru_f64_e32 */, AMDGPU::V_CMPSX_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11353 /* v_cmpsx_tru_f64_e32 */, AMDGPU::V_CMPSX_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11373 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11373 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11373 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11373 /* v_cmpsx_u_f32 */, AMDGPU::V_CMPSX_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11387 /* v_cmpsx_u_f32_e32 */, AMDGPU::V_CMPSX_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11387 /* v_cmpsx_u_f32_e32 */, AMDGPU::V_CMPSX_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11405 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11405 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11405 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11405 /* v_cmpsx_u_f64 */, AMDGPU::V_CMPSX_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11419 /* v_cmpsx_u_f64_e32 */, AMDGPU::V_CMPSX_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_cmpsx_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11419 /* v_cmpsx_u_f64_e32 */, AMDGPU::V_CMPSX_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isSICI|Feature_isVI, { MCK_v_95_cmpsx_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11437 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11437 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11437 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11437 /* v_cmpx_class_f32 */, AMDGPU::V_CMPX_CLASS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11454 /* v_cmpx_class_f32_e32 */, AMDGPU::V_CMPX_CLASS_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11454 /* v_cmpx_class_f32_e32 */, AMDGPU::V_CMPX_CLASS_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11475 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f64, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11475 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f64, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11475 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11475 /* v_cmpx_class_f64 */, AMDGPU::V_CMPX_CLASS_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_VCSrc32 }, },
  { 11492 /* v_cmpx_class_f64_e32 */, AMDGPU::V_CMPX_CLASS_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_class_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11492 /* v_cmpx_class_f64_e32 */, AMDGPU::V_CMPX_CLASS_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_class_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VGPR_32 }, },
  { 11513 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11513 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11513 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11513 /* v_cmpx_eq_f32 */, AMDGPU::V_CMPX_EQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11527 /* v_cmpx_eq_f32_e32 */, AMDGPU::V_CMPX_EQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11527 /* v_cmpx_eq_f32_e32 */, AMDGPU::V_CMPX_EQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11545 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11545 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11545 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11545 /* v_cmpx_eq_f64 */, AMDGPU::V_CMPX_EQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11559 /* v_cmpx_eq_f64_e32 */, AMDGPU::V_CMPX_EQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11559 /* v_cmpx_eq_f64_e32 */, AMDGPU::V_CMPX_EQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11577 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11577 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11577 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11577 /* v_cmpx_eq_i32 */, AMDGPU::V_CMPX_EQ_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11591 /* v_cmpx_eq_i32_e32 */, AMDGPU::V_CMPX_EQ_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11591 /* v_cmpx_eq_i32_e32 */, AMDGPU::V_CMPX_EQ_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11609 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11609 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11609 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11609 /* v_cmpx_eq_i64 */, AMDGPU::V_CMPX_EQ_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11623 /* v_cmpx_eq_i64_e32 */, AMDGPU::V_CMPX_EQ_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11623 /* v_cmpx_eq_i64_e32 */, AMDGPU::V_CMPX_EQ_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11641 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11641 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11641 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11641 /* v_cmpx_eq_u32 */, AMDGPU::V_CMPX_EQ_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11655 /* v_cmpx_eq_u32_e32 */, AMDGPU::V_CMPX_EQ_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11655 /* v_cmpx_eq_u32_e32 */, AMDGPU::V_CMPX_EQ_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11673 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11673 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11673 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11673 /* v_cmpx_eq_u64 */, AMDGPU::V_CMPX_EQ_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11687 /* v_cmpx_eq_u64_e32 */, AMDGPU::V_CMPX_EQ_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_eq_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11687 /* v_cmpx_eq_u64_e32 */, AMDGPU::V_CMPX_EQ_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_eq_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11705 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11705 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11705 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11705 /* v_cmpx_f_f32 */, AMDGPU::V_CMPX_F_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11718 /* v_cmpx_f_f32_e32 */, AMDGPU::V_CMPX_F_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11718 /* v_cmpx_f_f32_e32 */, AMDGPU::V_CMPX_F_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11735 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11735 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11735 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11735 /* v_cmpx_f_f64 */, AMDGPU::V_CMPX_F_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11748 /* v_cmpx_f_f64_e32 */, AMDGPU::V_CMPX_F_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11748 /* v_cmpx_f_f64_e32 */, AMDGPU::V_CMPX_F_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11765 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11765 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11765 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11765 /* v_cmpx_f_i32 */, AMDGPU::V_CMPX_F_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11778 /* v_cmpx_f_i32_e32 */, AMDGPU::V_CMPX_F_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11778 /* v_cmpx_f_i32_e32 */, AMDGPU::V_CMPX_F_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11795 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11795 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11795 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11795 /* v_cmpx_f_i64 */, AMDGPU::V_CMPX_F_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11808 /* v_cmpx_f_i64_e32 */, AMDGPU::V_CMPX_F_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11808 /* v_cmpx_f_i64_e32 */, AMDGPU::V_CMPX_F_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11825 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11825 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11825 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11825 /* v_cmpx_f_u32 */, AMDGPU::V_CMPX_F_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11838 /* v_cmpx_f_u32_e32 */, AMDGPU::V_CMPX_F_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11838 /* v_cmpx_f_u32_e32 */, AMDGPU::V_CMPX_F_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11855 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11855 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11855 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11855 /* v_cmpx_f_u64 */, AMDGPU::V_CMPX_F_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11868 /* v_cmpx_f_u64_e32 */, AMDGPU::V_CMPX_F_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_f_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11868 /* v_cmpx_f_u64_e32 */, AMDGPU::V_CMPX_F_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_f_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11885 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11885 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11885 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11885 /* v_cmpx_ge_f32 */, AMDGPU::V_CMPX_GE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11899 /* v_cmpx_ge_f32_e32 */, AMDGPU::V_CMPX_GE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11899 /* v_cmpx_ge_f32_e32 */, AMDGPU::V_CMPX_GE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11917 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11917 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11917 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11917 /* v_cmpx_ge_f64 */, AMDGPU::V_CMPX_GE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 11931 /* v_cmpx_ge_f64_e32 */, AMDGPU::V_CMPX_GE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11931 /* v_cmpx_ge_f64_e32 */, AMDGPU::V_CMPX_GE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11949 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11949 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11949 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11949 /* v_cmpx_ge_i32 */, AMDGPU::V_CMPX_GE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 11963 /* v_cmpx_ge_i32_e32 */, AMDGPU::V_CMPX_GE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11963 /* v_cmpx_ge_i32_e32 */, AMDGPU::V_CMPX_GE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 11981 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11981 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11981 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11981 /* v_cmpx_ge_i64 */, AMDGPU::V_CMPX_GE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 11995 /* v_cmpx_ge_i64_e32 */, AMDGPU::V_CMPX_GE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 11995 /* v_cmpx_ge_i64_e32 */, AMDGPU::V_CMPX_GE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12013 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12013 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12013 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12013 /* v_cmpx_ge_u32 */, AMDGPU::V_CMPX_GE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12027 /* v_cmpx_ge_u32_e32 */, AMDGPU::V_CMPX_GE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12027 /* v_cmpx_ge_u32_e32 */, AMDGPU::V_CMPX_GE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12045 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12045 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12045 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12045 /* v_cmpx_ge_u64 */, AMDGPU::V_CMPX_GE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12059 /* v_cmpx_ge_u64_e32 */, AMDGPU::V_CMPX_GE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ge_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12059 /* v_cmpx_ge_u64_e32 */, AMDGPU::V_CMPX_GE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ge_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12077 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12077 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12077 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12077 /* v_cmpx_gt_f32 */, AMDGPU::V_CMPX_GT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12091 /* v_cmpx_gt_f32_e32 */, AMDGPU::V_CMPX_GT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12091 /* v_cmpx_gt_f32_e32 */, AMDGPU::V_CMPX_GT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12109 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12109 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12109 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12109 /* v_cmpx_gt_f64 */, AMDGPU::V_CMPX_GT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12123 /* v_cmpx_gt_f64_e32 */, AMDGPU::V_CMPX_GT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12123 /* v_cmpx_gt_f64_e32 */, AMDGPU::V_CMPX_GT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12141 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12141 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12141 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12141 /* v_cmpx_gt_i32 */, AMDGPU::V_CMPX_GT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12155 /* v_cmpx_gt_i32_e32 */, AMDGPU::V_CMPX_GT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12155 /* v_cmpx_gt_i32_e32 */, AMDGPU::V_CMPX_GT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12173 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12173 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12173 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12173 /* v_cmpx_gt_i64 */, AMDGPU::V_CMPX_GT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12187 /* v_cmpx_gt_i64_e32 */, AMDGPU::V_CMPX_GT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12187 /* v_cmpx_gt_i64_e32 */, AMDGPU::V_CMPX_GT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12205 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12205 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12205 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12205 /* v_cmpx_gt_u32 */, AMDGPU::V_CMPX_GT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12219 /* v_cmpx_gt_u32_e32 */, AMDGPU::V_CMPX_GT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12219 /* v_cmpx_gt_u32_e32 */, AMDGPU::V_CMPX_GT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12237 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12237 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12237 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12237 /* v_cmpx_gt_u64 */, AMDGPU::V_CMPX_GT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12251 /* v_cmpx_gt_u64_e32 */, AMDGPU::V_CMPX_GT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_gt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12251 /* v_cmpx_gt_u64_e32 */, AMDGPU::V_CMPX_GT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_gt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12269 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12269 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12269 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12269 /* v_cmpx_le_f32 */, AMDGPU::V_CMPX_LE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12283 /* v_cmpx_le_f32_e32 */, AMDGPU::V_CMPX_LE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12283 /* v_cmpx_le_f32_e32 */, AMDGPU::V_CMPX_LE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12301 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12301 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12301 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12301 /* v_cmpx_le_f64 */, AMDGPU::V_CMPX_LE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12315 /* v_cmpx_le_f64_e32 */, AMDGPU::V_CMPX_LE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12315 /* v_cmpx_le_f64_e32 */, AMDGPU::V_CMPX_LE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12333 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12333 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12333 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12333 /* v_cmpx_le_i32 */, AMDGPU::V_CMPX_LE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12347 /* v_cmpx_le_i32_e32 */, AMDGPU::V_CMPX_LE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12347 /* v_cmpx_le_i32_e32 */, AMDGPU::V_CMPX_LE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12365 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12365 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12365 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12365 /* v_cmpx_le_i64 */, AMDGPU::V_CMPX_LE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12379 /* v_cmpx_le_i64_e32 */, AMDGPU::V_CMPX_LE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12379 /* v_cmpx_le_i64_e32 */, AMDGPU::V_CMPX_LE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12397 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12397 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12397 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12397 /* v_cmpx_le_u32 */, AMDGPU::V_CMPX_LE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12411 /* v_cmpx_le_u32_e32 */, AMDGPU::V_CMPX_LE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12411 /* v_cmpx_le_u32_e32 */, AMDGPU::V_CMPX_LE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12429 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12429 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12429 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12429 /* v_cmpx_le_u64 */, AMDGPU::V_CMPX_LE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12443 /* v_cmpx_le_u64_e32 */, AMDGPU::V_CMPX_LE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_le_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12443 /* v_cmpx_le_u64_e32 */, AMDGPU::V_CMPX_LE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_le_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12461 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12461 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12461 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12461 /* v_cmpx_lg_f32 */, AMDGPU::V_CMPX_LG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12475 /* v_cmpx_lg_f32_e32 */, AMDGPU::V_CMPX_LG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12475 /* v_cmpx_lg_f32_e32 */, AMDGPU::V_CMPX_LG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12493 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12493 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12493 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12493 /* v_cmpx_lg_f64 */, AMDGPU::V_CMPX_LG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12507 /* v_cmpx_lg_f64_e32 */, AMDGPU::V_CMPX_LG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12507 /* v_cmpx_lg_f64_e32 */, AMDGPU::V_CMPX_LG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12525 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12525 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12525 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12525 /* v_cmpx_lt_f32 */, AMDGPU::V_CMPX_LT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12539 /* v_cmpx_lt_f32_e32 */, AMDGPU::V_CMPX_LT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12539 /* v_cmpx_lt_f32_e32 */, AMDGPU::V_CMPX_LT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12557 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12557 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12557 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12557 /* v_cmpx_lt_f64 */, AMDGPU::V_CMPX_LT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12571 /* v_cmpx_lt_f64_e32 */, AMDGPU::V_CMPX_LT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12571 /* v_cmpx_lt_f64_e32 */, AMDGPU::V_CMPX_LT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12589 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12589 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12589 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12589 /* v_cmpx_lt_i32 */, AMDGPU::V_CMPX_LT_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12603 /* v_cmpx_lt_i32_e32 */, AMDGPU::V_CMPX_LT_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12603 /* v_cmpx_lt_i32_e32 */, AMDGPU::V_CMPX_LT_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12621 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12621 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12621 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12621 /* v_cmpx_lt_i64 */, AMDGPU::V_CMPX_LT_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12635 /* v_cmpx_lt_i64_e32 */, AMDGPU::V_CMPX_LT_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12635 /* v_cmpx_lt_i64_e32 */, AMDGPU::V_CMPX_LT_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12653 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12653 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12653 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12653 /* v_cmpx_lt_u32 */, AMDGPU::V_CMPX_LT_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12667 /* v_cmpx_lt_u32_e32 */, AMDGPU::V_CMPX_LT_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12667 /* v_cmpx_lt_u32_e32 */, AMDGPU::V_CMPX_LT_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12685 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12685 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12685 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12685 /* v_cmpx_lt_u64 */, AMDGPU::V_CMPX_LT_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12699 /* v_cmpx_lt_u64_e32 */, AMDGPU::V_CMPX_LT_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_lt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12699 /* v_cmpx_lt_u64_e32 */, AMDGPU::V_CMPX_LT_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_lt_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12717 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12717 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12717 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12717 /* v_cmpx_ne_i32 */, AMDGPU::V_CMPX_NE_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12731 /* v_cmpx_ne_i32_e32 */, AMDGPU::V_CMPX_NE_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12731 /* v_cmpx_ne_i32_e32 */, AMDGPU::V_CMPX_NE_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12749 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12749 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12749 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12749 /* v_cmpx_ne_i64 */, AMDGPU::V_CMPX_NE_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12763 /* v_cmpx_ne_i64_e32 */, AMDGPU::V_CMPX_NE_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12763 /* v_cmpx_ne_i64_e32 */, AMDGPU::V_CMPX_NE_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12781 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12781 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12781 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12781 /* v_cmpx_ne_u32 */, AMDGPU::V_CMPX_NE_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 12795 /* v_cmpx_ne_u32_e32 */, AMDGPU::V_CMPX_NE_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12795 /* v_cmpx_ne_u32_e32 */, AMDGPU::V_CMPX_NE_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12813 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12813 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12813 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12813 /* v_cmpx_ne_u64 */, AMDGPU::V_CMPX_NE_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 12827 /* v_cmpx_ne_u64_e32 */, AMDGPU::V_CMPX_NE_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ne_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12827 /* v_cmpx_ne_u64_e32 */, AMDGPU::V_CMPX_NE_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ne_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12845 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12845 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12845 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12845 /* v_cmpx_neq_f32 */, AMDGPU::V_CMPX_NEQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12860 /* v_cmpx_neq_f32_e32 */, AMDGPU::V_CMPX_NEQ_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12860 /* v_cmpx_neq_f32_e32 */, AMDGPU::V_CMPX_NEQ_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12879 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12879 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12879 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12879 /* v_cmpx_neq_f64 */, AMDGPU::V_CMPX_NEQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12894 /* v_cmpx_neq_f64_e32 */, AMDGPU::V_CMPX_NEQ_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12894 /* v_cmpx_neq_f64_e32 */, AMDGPU::V_CMPX_NEQ_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_neq_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12913 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12913 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12913 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12913 /* v_cmpx_nge_f32 */, AMDGPU::V_CMPX_NGE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12928 /* v_cmpx_nge_f32_e32 */, AMDGPU::V_CMPX_NGE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12928 /* v_cmpx_nge_f32_e32 */, AMDGPU::V_CMPX_NGE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12947 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12947 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12947 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12947 /* v_cmpx_nge_f64 */, AMDGPU::V_CMPX_NGE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12962 /* v_cmpx_nge_f64_e32 */, AMDGPU::V_CMPX_NGE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12962 /* v_cmpx_nge_f64_e32 */, AMDGPU::V_CMPX_NGE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nge_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 12981 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12981 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12981 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12981 /* v_cmpx_ngt_f32 */, AMDGPU::V_CMPX_NGT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 12996 /* v_cmpx_ngt_f32_e32 */, AMDGPU::V_CMPX_NGT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 12996 /* v_cmpx_ngt_f32_e32 */, AMDGPU::V_CMPX_NGT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13015 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13015 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13015 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13015 /* v_cmpx_ngt_f64 */, AMDGPU::V_CMPX_NGT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13030 /* v_cmpx_ngt_f64_e32 */, AMDGPU::V_CMPX_NGT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13030 /* v_cmpx_ngt_f64_e32 */, AMDGPU::V_CMPX_NGT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_ngt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13049 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13049 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13049 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13049 /* v_cmpx_nle_f32 */, AMDGPU::V_CMPX_NLE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13064 /* v_cmpx_nle_f32_e32 */, AMDGPU::V_CMPX_NLE_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13064 /* v_cmpx_nle_f32_e32 */, AMDGPU::V_CMPX_NLE_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13083 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13083 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13083 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13083 /* v_cmpx_nle_f64 */, AMDGPU::V_CMPX_NLE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13098 /* v_cmpx_nle_f64_e32 */, AMDGPU::V_CMPX_NLE_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13098 /* v_cmpx_nle_f64_e32 */, AMDGPU::V_CMPX_NLE_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nle_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13117 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13117 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13117 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13117 /* v_cmpx_nlg_f32 */, AMDGPU::V_CMPX_NLG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13132 /* v_cmpx_nlg_f32_e32 */, AMDGPU::V_CMPX_NLG_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13132 /* v_cmpx_nlg_f32_e32 */, AMDGPU::V_CMPX_NLG_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13151 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13151 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13151 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13151 /* v_cmpx_nlg_f64 */, AMDGPU::V_CMPX_NLG_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13166 /* v_cmpx_nlg_f64_e32 */, AMDGPU::V_CMPX_NLG_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13166 /* v_cmpx_nlg_f64_e32 */, AMDGPU::V_CMPX_NLG_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlg_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13185 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13185 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13185 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13185 /* v_cmpx_nlt_f32 */, AMDGPU::V_CMPX_NLT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13200 /* v_cmpx_nlt_f32_e32 */, AMDGPU::V_CMPX_NLT_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13200 /* v_cmpx_nlt_f32_e32 */, AMDGPU::V_CMPX_NLT_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13219 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13219 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13219 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13219 /* v_cmpx_nlt_f64 */, AMDGPU::V_CMPX_NLT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13234 /* v_cmpx_nlt_f64_e32 */, AMDGPU::V_CMPX_NLT_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13234 /* v_cmpx_nlt_f64_e32 */, AMDGPU::V_CMPX_NLT_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_nlt_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13253 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13253 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13253 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13253 /* v_cmpx_o_f32 */, AMDGPU::V_CMPX_O_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13266 /* v_cmpx_o_f32_e32 */, AMDGPU::V_CMPX_O_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13266 /* v_cmpx_o_f32_e32 */, AMDGPU::V_CMPX_O_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13283 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13283 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13283 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13283 /* v_cmpx_o_f64 */, AMDGPU::V_CMPX_O_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13296 /* v_cmpx_o_f64_e32 */, AMDGPU::V_CMPX_O_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13296 /* v_cmpx_o_f64_e32 */, AMDGPU::V_CMPX_O_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_o_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13313 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13313 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13313 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13313 /* v_cmpx_t_i32 */, AMDGPU::V_CMPX_T_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13326 /* v_cmpx_t_i32_e32 */, AMDGPU::V_CMPX_T_I32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13326 /* v_cmpx_t_i32_e32 */, AMDGPU::V_CMPX_T_I32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13343 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13343 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13343 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13343 /* v_cmpx_t_i64 */, AMDGPU::V_CMPX_T_I64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13356 /* v_cmpx_t_i64_e32 */, AMDGPU::V_CMPX_T_I64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13356 /* v_cmpx_t_i64_e32 */, AMDGPU::V_CMPX_T_I64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_i64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13373 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13373 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13373 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13373 /* v_cmpx_t_u32 */, AMDGPU::V_CMPX_T_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13386 /* v_cmpx_t_u32_e32 */, AMDGPU::V_CMPX_T_U32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13386 /* v_cmpx_t_u32_e32 */, AMDGPU::V_CMPX_T_U32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13403 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13403 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13403 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13403 /* v_cmpx_t_u64 */, AMDGPU::V_CMPX_T_U64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u64, MCK_SReg_64, MCK_VCSrc64, MCK_VCSrc64 }, },
  { 13416 /* v_cmpx_t_u64_e32 */, AMDGPU::V_CMPX_T_U64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_t_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13416 /* v_cmpx_t_u64_e32 */, AMDGPU::V_CMPX_T_U64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_t_95_u64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13433 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13433 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13433 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13433 /* v_cmpx_tru_f32 */, AMDGPU::V_CMPX_TRU_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13448 /* v_cmpx_tru_f32_e32 */, AMDGPU::V_CMPX_TRU_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13448 /* v_cmpx_tru_f32_e32 */, AMDGPU::V_CMPX_TRU_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13467 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13467 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13467 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13467 /* v_cmpx_tru_f64 */, AMDGPU::V_CMPX_TRU_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13482 /* v_cmpx_tru_f64_e32 */, AMDGPU::V_CMPX_TRU_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13482 /* v_cmpx_tru_f64_e32 */, AMDGPU::V_CMPX_TRU_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_tru_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13501 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13501 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13501 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13501 /* v_cmpx_u_f32 */, AMDGPU::V_CMPX_U_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13514 /* v_cmpx_u_f32_e32 */, AMDGPU::V_CMPX_U_F32_e32_si, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13514 /* v_cmpx_u_f32_e32 */, AMDGPU::V_CMPX_U_F32_e32_vi, Convert__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f32_95_e32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13531 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13531 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f64, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13531 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13531 /* v_cmpx_u_f64 */, AMDGPU::V_CMPX_U_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13544 /* v_cmpx_u_f64_e32 */, AMDGPU::V_CMPX_U_F64_e32_si, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cmpx_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13544 /* v_cmpx_u_f64_e32 */, AMDGPU::V_CMPX_U_F64_e32_vi, Convert__VSrc641_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cmpx_95_u_95_f64_95_e32, MCK_VCC, MCK_VSrc64, MCK_VReg_64 }, },
  { 13561 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cndmask_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13561 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_cndmask_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13561 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cndmask_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_SSrc64 }, },
  { 13561 /* v_cndmask_b32 */, AMDGPU::V_CNDMASK_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cndmask_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_SSrc64 }, },
  { 13575 /* v_cos_f16 */, AMDGPU::V_COS_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_cos_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13575 /* v_cos_f16 */, AMDGPU::V_COS_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_cos_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13575 /* v_cos_f16 */, AMDGPU::V_COS_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_cos_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13575 /* v_cos_f16 */, AMDGPU::V_COS_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_cos_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13585 /* v_cos_f32 */, AMDGPU::V_COS_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cos_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13585 /* v_cos_f32 */, AMDGPU::V_COS_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cos_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13585 /* v_cos_f32 */, AMDGPU::V_COS_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cos_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13585 /* v_cos_f32 */, AMDGPU::V_COS_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cos_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13595 /* v_cubeid_f32 */, AMDGPU::V_CUBEID_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cubeid_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13595 /* v_cubeid_f32 */, AMDGPU::V_CUBEID_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cubeid_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13608 /* v_cubema_f32 */, AMDGPU::V_CUBEMA_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cubema_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13608 /* v_cubema_f32 */, AMDGPU::V_CUBEMA_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cubema_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13621 /* v_cubesc_f32 */, AMDGPU::V_CUBESC_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cubesc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13621 /* v_cubesc_f32 */, AMDGPU::V_CUBESC_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cubesc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13634 /* v_cubetc_f32 */, AMDGPU::V_CUBETC_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cubetc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13634 /* v_cubetc_f32 */, AMDGPU::V_CUBETC_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cubetc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13647 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f16_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13647 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f16_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13647 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13647 /* v_cvt_f16_f32 */, AMDGPU::V_CVT_F16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13661 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_cvt_95_f16_95_i16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13661 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_f16_95_i16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13661 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_cvt_95_f16_95_i16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13661 /* v_cvt_f16_i16 */, AMDGPU::V_CVT_F16_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_f16_95_i16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13675 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_cvt_95_f16_95_u16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13675 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_f16_95_u16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13675 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_cvt_95_f16_95_u16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13675 /* v_cvt_f16_u16 */, AMDGPU::V_CVT_F16_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_f16_95_u16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13689 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13689 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13689 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13689 /* v_cvt_f32_f16 */, AMDGPU::V_CVT_F32_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13703 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 13703 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 13703 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13703 /* v_cvt_f32_f64 */, AMDGPU::V_CVT_F32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13717 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_i32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13717 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_i32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13717 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_i32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13717 /* v_cvt_f32_i32 */, AMDGPU::V_CVT_F32_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_i32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13731 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_u32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13731 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_u32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13731 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_u32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13731 /* v_cvt_f32_u32 */, AMDGPU::V_CVT_F32_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_u32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13745 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte0, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13745 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte0, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13745 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte0, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13745 /* v_cvt_f32_ubyte0 */, AMDGPU::V_CVT_F32_UBYTE0_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte0, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13762 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte1, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13762 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte1, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13762 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte1, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13762 /* v_cvt_f32_ubyte1 */, AMDGPU::V_CVT_F32_UBYTE1_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte1, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13779 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte2, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13779 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte2, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13779 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte2, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13779 /* v_cvt_f32_ubyte2 */, AMDGPU::V_CVT_F32_UBYTE2_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte2, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13796 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte3, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13796 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte3, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13796 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f32_95_ubyte3, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13796 /* v_cvt_f32_ubyte3 */, AMDGPU::V_CVT_F32_UBYTE3_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f32_95_ubyte3, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13813 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_f32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13813 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_f32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13813 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_f32, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13813 /* v_cvt_f64_f32 */, AMDGPU::V_CVT_F64_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_f32, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13827 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_i32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13827 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_i32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13827 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_i32, MCK_VReg_64, MCK_VCSrc32 }, },
  { 13827 /* v_cvt_f64_i32 */, AMDGPU::V_CVT_F64_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_i32, MCK_VReg_64, MCK_VCSrc32 }, },
  { 13841 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_u32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13841 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_u32, MCK_VReg_64, MCK_VSrc32 }, },
  { 13841 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_f64_95_u32, MCK_VReg_64, MCK_VCSrc32 }, },
  { 13841 /* v_cvt_f64_u32 */, AMDGPU::V_CVT_F64_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_f64_95_u32, MCK_VReg_64, MCK_VCSrc32 }, },
  { 13855 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_flr_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13855 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_flr_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13855 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_flr_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13855 /* v_cvt_flr_i32_f32 */, AMDGPU::V_CVT_FLR_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_flr_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13873 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_cvt_95_i16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13873 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_i16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13873 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_cvt_95_i16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13873 /* v_cvt_i16_f16 */, AMDGPU::V_CVT_I16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_i16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13887 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13887 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13887 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13887 /* v_cvt_i32_f32 */, AMDGPU::V_CVT_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13901 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_i32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 13901 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_i32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 13901 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_i32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13901 /* v_cvt_i32_f64 */, AMDGPU::V_CVT_I32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_i32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13915 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_off_95_f32_95_i4, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13915 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_off_95_f32_95_i4, MCK_VGPR_32, MCK_VSrc32 }, },
  { 13915 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_off_95_f32_95_i4, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13915 /* v_cvt_off_f32_i4 */, AMDGPU::V_CVT_OFF_F32_I4_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_off_95_f32_95_i4, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 13932 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pk_95_i16_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13932 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pk_95_i16_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13932 /* v_cvt_pk_i16_i32 */, AMDGPU::V_CVT_PK_I16_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pk_95_i16_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13949 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pk_95_u16_95_u32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13949 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pk_95_u16_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13949 /* v_cvt_pk_u16_u32 */, AMDGPU::V_CVT_PK_U16_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pk_95_u16_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13966 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pkaccum_95_u8_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13966 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_vi, Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0, Feature_isVI, { MCK_v_95_cvt_95_pkaccum_95_u8_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13966 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pkaccum_95_u8_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13966 /* v_cvt_pkaccum_u8_f32 */, AMDGPU::V_CVT_PKACCUM_U8_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pkaccum_95_u8_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13987 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pknorm_95_i16_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 13987 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_vi, Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0, Feature_isVI, { MCK_v_95_cvt_95_pknorm_95_i16_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 13987 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pknorm_95_i16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 13987 /* v_cvt_pknorm_i16_f32 */, AMDGPU::V_CVT_PKNORM_I16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pknorm_95_i16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14008 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pknorm_95_u16_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14008 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_vi, Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0, Feature_isVI, { MCK_v_95_cvt_95_pknorm_95_u16_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14008 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pknorm_95_u16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14008 /* v_cvt_pknorm_u16_f32 */, AMDGPU::V_CVT_PKNORM_U16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pknorm_95_u16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14029 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pkrtz_95_f16_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14029 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_vi, Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0, Feature_isVI, { MCK_v_95_cvt_95_pkrtz_95_f16_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14029 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_pkrtz_95_f16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14029 /* v_cvt_pkrtz_f16_f32 */, AMDGPU::V_CVT_PKRTZ_F16_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_pkrtz_95_f16_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14049 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_rpi_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14049 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_rpi_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14049 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_rpi_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14049 /* v_cvt_rpi_i32_f32 */, AMDGPU::V_CVT_RPI_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_rpi_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14067 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_cvt_95_u16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14067 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_u16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14067 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_cvt_95_u16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14067 /* v_cvt_u16_f16 */, AMDGPU::V_CVT_U16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_cvt_95_u16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14081 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_u32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14081 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_u32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14081 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_u32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14081 /* v_cvt_u32_f32 */, AMDGPU::V_CVT_U32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_u32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14095 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_u32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 14095 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_u32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 14095 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_cvt_95_u32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14095 /* v_cvt_u32_f64 */, AMDGPU::V_CVT_U32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_cvt_95_u32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14109 /* v_div_fixup_f32 */, AMDGPU::V_DIV_FIXUP_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_fixup_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14109 /* v_div_fixup_f32 */, AMDGPU::V_DIV_FIXUP_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_fixup_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14125 /* v_div_fixup_f64 */, AMDGPU::V_DIV_FIXUP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_fixup_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14125 /* v_div_fixup_f64 */, AMDGPU::V_DIV_FIXUP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_fixup_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14141 /* v_div_fmas_f32 */, AMDGPU::V_DIV_FMAS_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_fmas_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14141 /* v_div_fmas_f32 */, AMDGPU::V_DIV_FMAS_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_fmas_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14156 /* v_div_fmas_f64 */, AMDGPU::V_DIV_FMAS_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_fmas_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14156 /* v_div_fmas_f64 */, AMDGPU::V_DIV_FMAS_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_fmas_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14171 /* v_div_scale_f32 */, AMDGPU::V_DIV_SCALE_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_scale_95_f32, MCK_VGPR_32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14171 /* v_div_scale_f32 */, AMDGPU::V_DIV_SCALE_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_scale_95_f32, MCK_VGPR_32, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14187 /* v_div_scale_f64 */, AMDGPU::V_DIV_SCALE_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_div_95_scale_95_f64, MCK_VReg_64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14187 /* v_div_scale_f64 */, AMDGPU::V_DIV_SCALE_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_div_95_scale_95_f64, MCK_VReg_64, MCK_SReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14203 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_exp_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14203 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_exp_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14203 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_exp_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14203 /* v_exp_f16 */, AMDGPU::V_EXP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_exp_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14213 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_exp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14213 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_exp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14213 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_exp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14213 /* v_exp_f32 */, AMDGPU::V_EXP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_exp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14223 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_exp_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14223 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_exp_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14223 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_exp_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14223 /* v_exp_legacy_f32 */, AMDGPU::V_EXP_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_exp_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14240 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbh_95_i32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14240 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbh_95_i32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14240 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbh_95_i32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14240 /* v_ffbh_i32 */, AMDGPU::V_FFBH_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbh_95_i32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14251 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbh_95_u32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14251 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbh_95_u32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14251 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbh_95_u32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14251 /* v_ffbh_u32 */, AMDGPU::V_FFBH_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbh_95_u32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14262 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbl_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14262 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbl_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14262 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ffbl_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14262 /* v_ffbl_b32 */, AMDGPU::V_FFBL_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ffbl_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14273 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_floor_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14273 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_floor_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14273 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_floor_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14273 /* v_floor_f16 */, AMDGPU::V_FLOOR_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_floor_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14285 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_floor_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14285 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_floor_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14285 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_floor_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14285 /* v_floor_f32 */, AMDGPU::V_FLOOR_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_floor_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14297 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_floor_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14297 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_floor_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14297 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_floor_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14297 /* v_floor_f64 */, AMDGPU::V_FLOOR_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_floor_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14309 /* v_fma_f32 */, AMDGPU::V_FMA_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_fma_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14309 /* v_fma_f32 */, AMDGPU::V_FMA_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_fma_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14319 /* v_fma_f64 */, AMDGPU::V_FMA_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_fma_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14319 /* v_fma_f64 */, AMDGPU::V_FMA_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_fma_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14329 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_fract_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14329 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_fract_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14329 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_fract_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14329 /* v_fract_f16 */, AMDGPU::V_FRACT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_fract_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14341 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_fract_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14341 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_fract_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14341 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_fract_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14341 /* v_fract_f32 */, AMDGPU::V_FRACT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_fract_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14353 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_fract_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14353 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_fract_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14353 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_fract_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14353 /* v_fract_f64 */, AMDGPU::V_FRACT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_fract_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14365 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_frexp_95_exp_95_i16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14365 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i16_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14365 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_frexp_95_exp_95_i16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14365 /* v_frexp_exp_i16_f16 */, AMDGPU::V_FREXP_EXP_I16_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i16_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14385 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_exp_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14385 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i32_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14385 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_exp_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14385 /* v_frexp_exp_i32_f32 */, AMDGPU::V_FREXP_EXP_I32_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i32_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14405 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_exp_95_i32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 14405 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i32_95_f64, MCK_VGPR_32, MCK_VSrc64 }, },
  { 14405 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_exp_95_i32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14405 /* v_frexp_exp_i32_f64 */, AMDGPU::V_FREXP_EXP_I32_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_exp_95_i32_95_f64, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14425 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_frexp_95_mant_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14425 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14425 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_frexp_95_mant_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14425 /* v_frexp_mant_f16 */, AMDGPU::V_FREXP_MANT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14442 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_mant_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14442 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14442 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_mant_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14442 /* v_frexp_mant_f32 */, AMDGPU::V_FREXP_MANT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14459 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_mant_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14459 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 14459 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_frexp_95_mant_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14459 /* v_frexp_mant_f64 */, AMDGPU::V_FREXP_MANT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_frexp_95_mant_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14476 /* v_interp_mov_f32 */, AMDGPU::V_INTERP_MOV_F32_si, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_mov_95_f32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14476 /* v_interp_mov_f32 */, AMDGPU::V_INTERP_MOV_F32_vi, Convert__Reg1_1__Imm1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_mov_95_f32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14493 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_16bank_si, Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_p1_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14493 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_16bank_vi, Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_p1_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14493 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_si, Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_p1_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14493 /* v_interp_p1_f32 */, AMDGPU::V_INTERP_P1_F32_vi, Convert__Reg1_1__Reg1_2__Imm1_3__Imm1_4, Feature_isGCN, { MCK_v_95_interp_95_p1_95_f32, MCK_VGPR_32, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14509 /* v_interp_p2_f32 */, AMDGPU::V_INTERP_P2_F32_si, Convert__Reg1_1__Tie0__Reg1_5__Imm1_6__Imm1_7, Feature_isGCN, { MCK_v_95_interp_95_p2_95_f32, MCK_VGPR_32, MCK__91_, MCK_VGPR_32, MCK__93_, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14509 /* v_interp_p2_f32 */, AMDGPU::V_INTERP_P2_F32_vi, Convert__Reg1_1__Tie0__Reg1_5__Imm1_6__Imm1_7, Feature_isGCN, { MCK_v_95_interp_95_p2_95_f32, MCK_VGPR_32, MCK__91_, MCK_VGPR_32, MCK__93_, MCK_VGPR_32, MCK_Imm, MCK_Imm, MCK__91_, MCK_M0, MCK__93_ }, },
  { 14525 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_ldexp_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14525 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_ldexp_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14525 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_ldexp_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14525 /* v_ldexp_f16 */, AMDGPU::V_LDEXP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_ldexp_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14537 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ldexp_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14537 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_vi, Convert__Reg1_1__imm_95_0__VCSrc321_2__imm_95_0__VCSrc321_3__imm_95_0__imm_95_0, Feature_isVI, { MCK_v_95_ldexp_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14537 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ldexp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14537 /* v_ldexp_f32 */, AMDGPU::V_LDEXP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ldexp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14549 /* v_ldexp_f64 */, AMDGPU::V_LDEXP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_ldexp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14549 /* v_ldexp_f64 */, AMDGPU::V_LDEXP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_ldexp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14561 /* v_log_clamp_f32 */, AMDGPU::V_LOG_CLAMP_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_log_95_clamp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14561 /* v_log_clamp_f32 */, AMDGPU::V_LOG_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_log_95_clamp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14577 /* v_log_f16 */, AMDGPU::V_LOG_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_log_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14577 /* v_log_f16 */, AMDGPU::V_LOG_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_log_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14577 /* v_log_f16 */, AMDGPU::V_LOG_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_log_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14577 /* v_log_f16 */, AMDGPU::V_LOG_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_log_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 14587 /* v_log_f32 */, AMDGPU::V_LOG_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_log_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14587 /* v_log_f32 */, AMDGPU::V_LOG_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_log_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14587 /* v_log_f32 */, AMDGPU::V_LOG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_log_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14587 /* v_log_f32 */, AMDGPU::V_LOG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_log_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14597 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_log_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14597 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_log_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 14597 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_log_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14597 /* v_log_legacy_f32 */, AMDGPU::V_LOG_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_log_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14614 /* v_lshl_b32 */, AMDGPU::V_LSHL_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshl_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14614 /* v_lshl_b32 */, AMDGPU::V_LSHL_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshl_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14625 /* v_lshl_b64 */, AMDGPU::V_LSHL_B64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshl_95_b64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14625 /* v_lshl_b64 */, AMDGPU::V_LSHL_B64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_lshl_95_b64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14636 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshlrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14636 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_lshlrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14636 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshlrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14636 /* v_lshlrev_b16 */, AMDGPU::V_LSHLREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_lshlrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14650 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_lshlrev_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14650 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_lshlrev_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14650 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_lshlrev_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14650 /* v_lshlrev_b32 */, AMDGPU::V_LSHLREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_lshlrev_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14664 /* v_lshlrev_b64 */, AMDGPU::V_LSHLREV_B64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshlrev_95_b64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14664 /* v_lshlrev_b64 */, AMDGPU::V_LSHLREV_B64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_lshlrev_95_b64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14678 /* v_lshr_b32 */, AMDGPU::V_LSHR_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshr_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14678 /* v_lshr_b32 */, AMDGPU::V_LSHR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshr_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14689 /* v_lshr_b64 */, AMDGPU::V_LSHR_B64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_lshr_95_b64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14689 /* v_lshr_b64 */, AMDGPU::V_LSHR_B64_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_lshr_95_b64, MCK_VReg_64, MCK_VCSrc64, MCK_VCSrc32 }, },
  { 14700 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshrrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14700 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_lshrrev_95_b16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14700 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshrrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14700 /* v_lshrrev_b16 */, AMDGPU::V_LSHRREV_B16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_lshrrev_95_b16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14714 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_lshrrev_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14714 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_lshrrev_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14714 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_lshrrev_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14714 /* v_lshrrev_b32 */, AMDGPU::V_LSHRREV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_lshrrev_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14728 /* v_lshrrev_b64 */, AMDGPU::V_LSHRREV_B64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_lshrrev_95_b64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14728 /* v_lshrrev_b64 */, AMDGPU::V_LSHRREV_B64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_lshrrev_95_b64, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14742 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_mac_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14742 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_mac_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14742 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_mac_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14742 /* v_mac_f16 */, AMDGPU::V_MAC_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_mac_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14752 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3__Tie0, Feature_isGCN|Feature_isSICI, { MCK_v_95_mac_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14752 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3__Tie0, Feature_isGCN|Feature_isVI, { MCK_v_95_mac_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14752 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mac_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14752 /* v_mac_f32 */, AMDGPU::V_MAC_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mac_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14762 /* v_mac_legacy_f32 */, AMDGPU::V_MAC_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_mac_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14762 /* v_mac_legacy_f32 */, AMDGPU::V_MAC_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_mac_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14779 /* v_mad_f32 */, AMDGPU::V_MAD_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mad_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14779 /* v_mad_f32 */, AMDGPU::V_MAD_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mad_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14789 /* v_mad_i32_i24 */, AMDGPU::V_MAD_I32_I24_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mad_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14789 /* v_mad_i32_i24 */, AMDGPU::V_MAD_I32_I24_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mad_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14803 /* v_mad_i64_i32 */, AMDGPU::V_MAD_I64_I32_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_mad_95_i64_95_i32, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14803 /* v_mad_i64_i32 */, AMDGPU::V_MAD_I64_I32_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_mad_95_i64_95_i32, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14817 /* v_mad_legacy_f32 */, AMDGPU::V_MAD_LEGACY_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mad_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14817 /* v_mad_legacy_f32 */, AMDGPU::V_MAD_LEGACY_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mad_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14834 /* v_mad_u32_u24 */, AMDGPU::V_MAD_U32_U24_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mad_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14834 /* v_mad_u32_u24 */, AMDGPU::V_MAD_U32_U24_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mad_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14848 /* v_mad_u64_u32 */, AMDGPU::V_MAD_U64_U32_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_mad_95_u64_95_u32, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14848 /* v_mad_u64_u32 */, AMDGPU::V_MAD_U64_U32_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_mad_95_u64_95_u32, MCK_VReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc64 }, },
  { 14862 /* v_madak_f16 */, AMDGPU::V_MADAK_F16_si, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isVI|Feature_isSICI, { MCK_v_95_madak_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14862 /* v_madak_f16 */, AMDGPU::V_MADAK_F16_vi, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isVI|Feature_isVI, { MCK_v_95_madak_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14874 /* v_madak_f32 */, AMDGPU::V_MADAK_F32_si, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_madak_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14874 /* v_madak_f32 */, AMDGPU::V_MADAK_F32_vi, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_madak_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14886 /* v_madmk_f16 */, AMDGPU::V_MADMK_F16_si, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isVI|Feature_isSICI, { MCK_v_95_madmk_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14886 /* v_madmk_f16 */, AMDGPU::V_MADMK_F16_vi, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isVI|Feature_isVI, { MCK_v_95_madmk_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14898 /* v_madmk_f32 */, AMDGPU::V_MADMK_F32_si, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_madmk_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14898 /* v_madmk_f32 */, AMDGPU::V_MADMK_F32_vi, Convert__Reg1_1__VCSrc321_2__Reg1_3__Imm1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_madmk_95_f32, MCK_VGPR_32, MCK_VCSrc32, MCK_VGPR_32, MCK_Imm }, },
  { 14910 /* v_max3_f32 */, AMDGPU::V_MAX3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14910 /* v_max3_f32 */, AMDGPU::V_MAX3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14921 /* v_max3_i32 */, AMDGPU::V_MAX3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14921 /* v_max3_i32 */, AMDGPU::V_MAX3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14932 /* v_max3_u32 */, AMDGPU::V_MAX3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14932 /* v_max3_u32 */, AMDGPU::V_MAX3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14943 /* v_max_f16 */, AMDGPU::V_MAX_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14943 /* v_max_f16 */, AMDGPU::V_MAX_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14943 /* v_max_f16 */, AMDGPU::V_MAX_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14943 /* v_max_f16 */, AMDGPU::V_MAX_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14953 /* v_max_f32 */, AMDGPU::V_MAX_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14953 /* v_max_f32 */, AMDGPU::V_MAX_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14953 /* v_max_f32 */, AMDGPU::V_MAX_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14953 /* v_max_f32 */, AMDGPU::V_MAX_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14963 /* v_max_f64 */, AMDGPU::V_MAX_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14963 /* v_max_f64 */, AMDGPU::V_MAX_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 14973 /* v_max_i16 */, AMDGPU::V_MAX_I16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_i16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14973 /* v_max_i16 */, AMDGPU::V_MAX_I16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_i16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14973 /* v_max_i16 */, AMDGPU::V_MAX_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_i16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14973 /* v_max_i16 */, AMDGPU::V_MAX_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_i16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14983 /* v_max_i32 */, AMDGPU::V_MAX_I32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14983 /* v_max_i32 */, AMDGPU::V_MAX_I32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14983 /* v_max_i32 */, AMDGPU::V_MAX_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14983 /* v_max_i32 */, AMDGPU::V_MAX_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 14993 /* v_max_legacy_f32 */, AMDGPU::V_MAX_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_max_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 14993 /* v_max_legacy_f32 */, AMDGPU::V_MAX_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_max_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15010 /* v_max_u16 */, AMDGPU::V_MAX_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15010 /* v_max_u16 */, AMDGPU::V_MAX_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15010 /* v_max_u16 */, AMDGPU::V_MAX_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_max_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15010 /* v_max_u16 */, AMDGPU::V_MAX_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_max_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15020 /* v_max_u32 */, AMDGPU::V_MAX_U32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_u32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15020 /* v_max_u32 */, AMDGPU::V_MAX_U32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_u32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15020 /* v_max_u32 */, AMDGPU::V_MAX_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_max_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15020 /* v_max_u32 */, AMDGPU::V_MAX_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_max_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15030 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mbcnt_95_hi_95_u32_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15030 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mbcnt_95_hi_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15030 /* v_mbcnt_hi_u32_b32 */, AMDGPU::V_MBCNT_HI_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mbcnt_95_hi_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15049 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mbcnt_95_lo_95_u32_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15049 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mbcnt_95_lo_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15049 /* v_mbcnt_lo_u32_b32 */, AMDGPU::V_MBCNT_LO_U32_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mbcnt_95_lo_95_u32_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15068 /* v_med3_f32 */, AMDGPU::V_MED3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_med3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15068 /* v_med3_f32 */, AMDGPU::V_MED3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_med3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15079 /* v_med3_i32 */, AMDGPU::V_MED3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_med3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15079 /* v_med3_i32 */, AMDGPU::V_MED3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_med3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15090 /* v_med3_u32 */, AMDGPU::V_MED3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_med3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15090 /* v_med3_u32 */, AMDGPU::V_MED3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_med3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15101 /* v_min3_f32 */, AMDGPU::V_MIN3_F32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15101 /* v_min3_f32 */, AMDGPU::V_MIN3_F32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min3_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15112 /* v_min3_i32 */, AMDGPU::V_MIN3_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15112 /* v_min3_i32 */, AMDGPU::V_MIN3_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min3_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15123 /* v_min3_u32 */, AMDGPU::V_MIN3_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15123 /* v_min3_u32 */, AMDGPU::V_MIN3_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min3_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15134 /* v_min_f16 */, AMDGPU::V_MIN_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15134 /* v_min_f16 */, AMDGPU::V_MIN_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15134 /* v_min_f16 */, AMDGPU::V_MIN_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15134 /* v_min_f16 */, AMDGPU::V_MIN_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15144 /* v_min_f32 */, AMDGPU::V_MIN_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15144 /* v_min_f32 */, AMDGPU::V_MIN_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15144 /* v_min_f32 */, AMDGPU::V_MIN_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15144 /* v_min_f32 */, AMDGPU::V_MIN_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15154 /* v_min_f64 */, AMDGPU::V_MIN_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15154 /* v_min_f64 */, AMDGPU::V_MIN_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15164 /* v_min_i16 */, AMDGPU::V_MIN_I16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_i16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15164 /* v_min_i16 */, AMDGPU::V_MIN_I16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_i16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15164 /* v_min_i16 */, AMDGPU::V_MIN_I16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_i16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15164 /* v_min_i16 */, AMDGPU::V_MIN_I16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_i16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15174 /* v_min_i32 */, AMDGPU::V_MIN_I32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15174 /* v_min_i32 */, AMDGPU::V_MIN_I32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_i32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15174 /* v_min_i32 */, AMDGPU::V_MIN_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15174 /* v_min_i32 */, AMDGPU::V_MIN_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15184 /* v_min_legacy_f32 */, AMDGPU::V_MIN_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isSICI|Feature_isSICI, { MCK_v_95_min_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15184 /* v_min_legacy_f32 */, AMDGPU::V_MIN_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_min_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15201 /* v_min_u16 */, AMDGPU::V_MIN_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15201 /* v_min_u16 */, AMDGPU::V_MIN_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15201 /* v_min_u16 */, AMDGPU::V_MIN_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_min_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15201 /* v_min_u16 */, AMDGPU::V_MIN_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_min_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15211 /* v_min_u32 */, AMDGPU::V_MIN_U32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_u32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15211 /* v_min_u32 */, AMDGPU::V_MIN_U32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_u32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15211 /* v_min_u32 */, AMDGPU::V_MIN_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_min_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15211 /* v_min_u32 */, AMDGPU::V_MIN_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_min_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15221 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_mov_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15221 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_mov_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15221 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mov_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15221 /* v_mov_b32 */, AMDGPU::V_MOV_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mov_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15231 /* v_mov_fed_b32 */, AMDGPU::V_MOV_FED_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_mov_95_fed_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15231 /* v_mov_fed_b32 */, AMDGPU::V_MOV_FED_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_mov_95_fed_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15245 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_movreld_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15245 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_movreld_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15245 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_movreld_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15245 /* v_movreld_b32 */, AMDGPU::V_MOVRELD_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_movreld_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15259 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_movrels_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15259 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_movrels_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15259 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_movrels_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15259 /* v_movrels_b32 */, AMDGPU::V_MOVRELS_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_movrels_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15273 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_movrelsd_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15273 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_movrelsd_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15273 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_movrelsd_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15273 /* v_movrelsd_b32 */, AMDGPU::V_MOVRELSD_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_movrelsd_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15288 /* v_mqsad_u16_u8 */, AMDGPU::V_MQSAD_U16_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_mqsad_95_u16_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15288 /* v_mqsad_u16_u8 */, AMDGPU::V_MQSAD_U16_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_mqsad_95_u16_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15303 /* v_mqsad_u32_u8 */, AMDGPU::V_MQSAD_U32_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_mqsad_95_u32_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15303 /* v_mqsad_u32_u8 */, AMDGPU::V_MQSAD_U32_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_mqsad_95_u32_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15318 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_mul_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15318 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_mul_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15318 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_mul_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15318 /* v_mul_f16 */, AMDGPU::V_MUL_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_mul_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15328 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15328 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15328 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15328 /* v_mul_f32 */, AMDGPU::V_MUL_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15338 /* v_mul_f64 */, AMDGPU::V_MUL_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15338 /* v_mul_f64 */, AMDGPU::V_MUL_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15348 /* v_mul_hi_i32 */, AMDGPU::V_MUL_HI_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15348 /* v_mul_hi_i32 */, AMDGPU::V_MUL_HI_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15361 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_i32_95_i24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15361 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_i32_95_i24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15361 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15361 /* v_mul_hi_i32_i24 */, AMDGPU::V_MUL_HI_I32_I24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15378 /* v_mul_hi_u32 */, AMDGPU::V_MUL_HI_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15378 /* v_mul_hi_u32 */, AMDGPU::V_MUL_HI_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15391 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_u32_95_u24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15391 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_u32_95_u24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15391 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_hi_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15391 /* v_mul_hi_u32_u24 */, AMDGPU::V_MUL_HI_U32_U24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_hi_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15408 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_i32_95_i24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15408 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_i32_95_i24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15408 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15408 /* v_mul_i32_i24 */, AMDGPU::V_MUL_I32_I24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_i32_95_i24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15422 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15422 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15422 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15422 /* v_mul_legacy_f32 */, AMDGPU::V_MUL_LEGACY_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15439 /* v_mul_lo_i32 */, AMDGPU::V_MUL_LO_I32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_lo_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15439 /* v_mul_lo_i32 */, AMDGPU::V_MUL_LO_I32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_lo_95_i32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15452 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_mul_95_lo_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15452 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_mul_95_lo_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15452 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_mul_95_lo_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15452 /* v_mul_lo_u16 */, AMDGPU::V_MUL_LO_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_mul_95_lo_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15465 /* v_mul_lo_u32 */, AMDGPU::V_MUL_LO_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_lo_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15465 /* v_mul_lo_u32 */, AMDGPU::V_MUL_LO_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_lo_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15478 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_u32_95_u24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15478 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_u32_95_u24, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15478 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_mul_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15478 /* v_mul_u32_u24 */, AMDGPU::V_MUL_U32_U24_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_mul_95_u32_95_u24, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15492 /* v_mullit_f32 */, AMDGPU::V_MULLIT_F32_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_mullit_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15492 /* v_mullit_f32 */, AMDGPU::V_MULLIT_F32_vi, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isVI, { MCK_v_95_mullit_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15505 /* v_nop */, AMDGPU::V_NOP_e32_si, Convert_NoOperands, Feature_isGCN|Feature_isSICI, { MCK_v_95_nop }, },
  { 15505 /* v_nop */, AMDGPU::V_NOP_e32_vi, Convert_NoOperands, Feature_isGCN|Feature_isVI, { MCK_v_95_nop }, },
  { 15505 /* v_nop */, AMDGPU::V_NOP_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_nop }, },
  { 15505 /* v_nop */, AMDGPU::V_NOP_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_nop }, },
  { 15511 /* v_not_b32 */, AMDGPU::V_NOT_B32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_not_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15511 /* v_not_b32 */, AMDGPU::V_NOT_B32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_not_95_b32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15511 /* v_not_b32 */, AMDGPU::V_NOT_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_not_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15511 /* v_not_b32 */, AMDGPU::V_NOT_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_not_95_b32, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15521 /* v_or_b32 */, AMDGPU::V_OR_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_or_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15521 /* v_or_b32 */, AMDGPU::V_OR_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_or_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15521 /* v_or_b32 */, AMDGPU::V_OR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_or_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15521 /* v_or_b32 */, AMDGPU::V_OR_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_or_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15530 /* v_qsad_pk_u16_u8 */, AMDGPU::V_QSAD_PK_U16_U8_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_qsad_95_pk_95_u16_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15530 /* v_qsad_pk_u16_u8 */, AMDGPU::V_QSAD_PK_U16_U8_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_qsad_95_pk_95_u16_95_u8, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15547 /* v_rcp_clamp_f32 */, AMDGPU::V_RCP_CLAMP_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_clamp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15547 /* v_rcp_clamp_f32 */, AMDGPU::V_RCP_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_clamp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15563 /* v_rcp_clamp_f64 */, AMDGPU::V_RCP_CLAMP_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_clamp_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15563 /* v_rcp_clamp_f64 */, AMDGPU::V_RCP_CLAMP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_clamp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15579 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_rcp_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15579 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_rcp_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15579 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_rcp_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15579 /* v_rcp_f16 */, AMDGPU::V_RCP_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_rcp_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15589 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15589 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15589 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15589 /* v_rcp_f32 */, AMDGPU::V_RCP_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15599 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15599 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15599 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15599 /* v_rcp_f64 */, AMDGPU::V_RCP_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15609 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_iflag_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15609 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_iflag_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15609 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rcp_95_iflag_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15609 /* v_rcp_iflag_f32 */, AMDGPU::V_RCP_IFLAG_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rcp_95_iflag_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15625 /* v_rcp_legacy_f32 */, AMDGPU::V_RCP_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15625 /* v_rcp_legacy_f32 */, AMDGPU::V_RCP_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rcp_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15642 /* v_readfirstlane_b32 */, AMDGPU::V_READFIRSTLANE_B32, Convert__Reg1_1__Reg1_2, Feature_isGCN, { MCK_v_95_readfirstlane_95_b32, MCK_SReg_32, MCK_VGPR_32 }, },
  { 15662 /* v_readlane_b32 */, AMDGPU::V_READLANE_B32_si, Convert__Reg1_1__Reg1_2__SCSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_readlane_95_b32, MCK_SReg_32, MCK_VGPR_32, MCK_SCSrc32 }, },
  { 15662 /* v_readlane_b32 */, AMDGPU::V_READLANE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_readlane_95_b32, MCK_SReg_32, MCK_VGPR_32, MCK_SCSrc32 }, },
  { 15677 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_rndne_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15677 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_rndne_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15677 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_rndne_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15677 /* v_rndne_f16 */, AMDGPU::V_RNDNE_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_rndne_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15689 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rndne_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15689 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rndne_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15689 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rndne_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15689 /* v_rndne_f32 */, AMDGPU::V_RNDNE_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rndne_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15701 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_rndne_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15701 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_rndne_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15701 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_rndne_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15701 /* v_rndne_f64 */, AMDGPU::V_RNDNE_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_rndne_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15713 /* v_rsq_clamp_f32 */, AMDGPU::V_RSQ_CLAMP_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_clamp_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15713 /* v_rsq_clamp_f32 */, AMDGPU::V_RSQ_CLAMP_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_clamp_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15729 /* v_rsq_clamp_f64 */, AMDGPU::V_RSQ_CLAMP_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_clamp_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15729 /* v_rsq_clamp_f64 */, AMDGPU::V_RSQ_CLAMP_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_clamp_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15745 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_rsq_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15745 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_rsq_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15745 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_rsq_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15745 /* v_rsq_f16 */, AMDGPU::V_RSQ_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_rsq_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15755 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rsq_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15755 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rsq_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15755 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rsq_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15755 /* v_rsq_f32 */, AMDGPU::V_RSQ_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rsq_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15765 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_rsq_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15765 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_rsq_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15765 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_rsq_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15765 /* v_rsq_f64 */, AMDGPU::V_RSQ_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_rsq_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15775 /* v_rsq_legacy_f32 */, AMDGPU::V_RSQ_LEGACY_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_legacy_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15775 /* v_rsq_legacy_f32 */, AMDGPU::V_RSQ_LEGACY_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isSICI|Feature_isSICI, { MCK_v_95_rsq_95_legacy_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15792 /* v_sad_u32 */, AMDGPU::V_SAD_U32_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sad_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15792 /* v_sad_u32 */, AMDGPU::V_SAD_U32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sad_95_u32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15802 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_sin_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15802 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_sin_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15802 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_sin_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15802 /* v_sin_f16 */, AMDGPU::V_SIN_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_sin_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15812 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_sin_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15812 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_sin_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15812 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sin_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15812 /* v_sin_f32 */, AMDGPU::V_SIN_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sin_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15822 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_sqrt_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15822 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_sqrt_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15822 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_sqrt_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15822 /* v_sqrt_f16 */, AMDGPU::V_SQRT_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_sqrt_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15833 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_sqrt_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15833 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_sqrt_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15833 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sqrt_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15833 /* v_sqrt_f32 */, AMDGPU::V_SQRT_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sqrt_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15844 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_sqrt_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15844 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isGCN|Feature_isVI, { MCK_v_95_sqrt_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 15844 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sqrt_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15844 /* v_sqrt_f64 */, AMDGPU::V_SQRT_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sqrt_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15855 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_sub_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15855 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_sub_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15855 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_sub_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15855 /* v_sub_f16 */, AMDGPU::V_SUB_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_sub_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15865 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sub_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15865 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_sub_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15865 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sub_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15865 /* v_sub_f32 */, AMDGPU::V_SUB_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sub_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15875 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e32_si, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_sub_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15875 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e32_vi, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_sub_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15875 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_sub_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15875 /* v_sub_i32 */, AMDGPU::V_SUB_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_sub_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15885 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_sub_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15885 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_sub_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15885 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_sub_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15885 /* v_sub_u16 */, AMDGPU::V_SUB_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_sub_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15895 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e32_si, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_subb_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 15895 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e32_vi, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_subb_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 15895 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_subb_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 15895 /* v_subb_u32 */, AMDGPU::V_SUBB_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_subb_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 15906 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e32_si, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_subbrev_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 15906 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e32_vi, Convert__Reg1_1__VCSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_subbrev_95_u32, MCK_VGPR_32, MCK_VCC, MCK_VCSrc32, MCK_VGPR_32, MCK_VCC }, },
  { 15906 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_subbrev_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 15906 /* v_subbrev_u32 */, AMDGPU::V_SUBBREV_U32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_subbrev_95_u32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32, MCK_SCSrc64 }, },
  { 15920 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_subrev_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15920 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_subrev_95_f16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15920 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_subrev_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15920 /* v_subrev_f16 */, AMDGPU::V_SUBREV_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_subrev_95_f16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15933 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_subrev_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15933 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_subrev_95_f32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15933 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_subrev_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15933 /* v_subrev_f32 */, AMDGPU::V_SUBREV_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_subrev_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15946 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e32_si, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isSICI, { MCK_v_95_subrev_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15946 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e32_vi, Convert__Reg1_1__VSrc321_3__Reg1_4, Feature_isGCN|Feature_isVI, { MCK_v_95_subrev_95_i32, MCK_VGPR_32, MCK_VCC, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15946 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_subrev_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15946 /* v_subrev_i32 */, AMDGPU::V_SUBREV_I32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_subrev_95_i32, MCK_VGPR_32, MCK_SReg_64, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15959 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isSICI, { MCK_v_95_subrev_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15959 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isVI|Feature_isVI, { MCK_v_95_subrev_95_u16, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 15959 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_subrev_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15959 /* v_subrev_u16 */, AMDGPU::V_SUBREV_U16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_subrev_95_u16, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 15972 /* v_trig_preop_f64 */, AMDGPU::V_TRIG_PREOP_F64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_trig_95_preop_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15972 /* v_trig_preop_f64 */, AMDGPU::V_TRIG_PREOP_F64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_trig_95_preop_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 15989 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_DisableInst, { MCK_v_95_trunc_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15989 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isVI|Feature_isVI, { MCK_v_95_trunc_95_f16, MCK_VGPR_32, MCK_VSrc32 }, },
  { 15989 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e64_si, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isSICI, { MCK_v_95_trunc_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 15989 /* v_trunc_f16 */, AMDGPU::V_TRUNC_F16_e64_vi, ConvertCustom_cvtVOP3, Feature_isVI|Feature_isVI, { MCK_v_95_trunc_95_f16, MCK_VGPR_32, MCK_VCSrc32 }, },
  { 16001 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e32_si, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isSICI, { MCK_v_95_trunc_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 16001 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e32_vi, Convert__Reg1_1__VSrc321_2, Feature_isGCN|Feature_isVI, { MCK_v_95_trunc_95_f32, MCK_VGPR_32, MCK_VSrc32 }, },
  { 16001 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_trunc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 16001 /* v_trunc_f32 */, AMDGPU::V_TRUNC_F32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_trunc_95_f32, MCK_VGPR_32, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 16013 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e32_si, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isSICI, { MCK_v_95_trunc_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 16013 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e32_vi, Convert__Reg1_1__VSrc641_2, Feature_isCIVI|Feature_isVI, { MCK_v_95_trunc_95_f64, MCK_VReg_64, MCK_VSrc64 }, },
  { 16013 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e64_si, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isSICI, { MCK_v_95_trunc_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 16013 /* v_trunc_f64 */, AMDGPU::V_TRUNC_F64_e64_vi, ConvertCustom_cvtVOP3, Feature_isCIVI|Feature_isVI, { MCK_v_95_trunc_95_f64, MCK_VReg_64, MCK_RegWithInputMods, MCK_Clamp, MCK_OMod }, },
  { 16025 /* v_writelane_b32 */, AMDGPU::V_WRITELANE_B32_si, Convert__Reg1_1__Reg1_2__SCSrc321_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_writelane_95_b32, MCK_VGPR_32, MCK_SReg_32, MCK_SCSrc32 }, },
  { 16025 /* v_writelane_b32 */, AMDGPU::V_WRITELANE_B32_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_writelane_95_b32, MCK_VGPR_32, MCK_SReg_32, MCK_SCSrc32 }, },
  { 16041 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e32_si, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isSICI, { MCK_v_95_xor_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 16041 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e32_vi, Convert__Reg1_1__VSrc321_2__Reg1_3, Feature_isGCN|Feature_isVI, { MCK_v_95_xor_95_b32, MCK_VGPR_32, MCK_VSrc32, MCK_VGPR_32 }, },
  { 16041 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e64_si, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isSICI, { MCK_v_95_xor_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
  { 16041 /* v_xor_b32 */, AMDGPU::V_XOR_B32_e64_vi, ConvertCustom_cvtVOP3, Feature_isGCN|Feature_isVI, { MCK_v_95_xor_95_b32, MCK_VGPR_32, MCK_VCSrc32, MCK_VCSrc32 }, },
};

bool AMDGPUAsmParser::
mnemonicIsValid(StringRef Mnemonic, unsigned VariantID) {
  // Find the appropriate table for this asm variant.
  const MatchEntry *Start, *End;
  switch (VariantID) {
  default: llvm_unreachable("invalid variant!");
  case 0: Start = std::begin(MatchTable0); End = std::end(MatchTable0); break;
  }
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*> MnemonicRange =
    std::equal_range(Start, End, Mnemonic, LessOpcode());
  return MnemonicRange.first != MnemonicRange.second;
}

unsigned AMDGPUAsmParser::
MatchInstructionImpl(const OperandVector &Operands,
                     MCInst &Inst, uint64_t &ErrorInfo,
                     bool matchingInlineAsm, unsigned VariantID) {
  // Eliminate obvious mismatches.
  if (Operands.size() > 14) {
    ErrorInfo = 14;
    return Match_InvalidOperand;
  }

  // Get the current feature set.
  uint64_t AvailableFeatures = getAvailableFeatures();

  // Get the instruction mnemonic, which is the first token.
  StringRef Mnemonic;
  if (Operands[0]->isToken())
    Mnemonic = ((AMDGPUOperand&)*Operands[0]).getToken();

  // Process all MnemonicAliases to remap the mnemonic.
  applyMnemonicAliases(Mnemonic, AvailableFeatures, VariantID);

  // Some state to try to produce better error messages.
  bool HadMatchOtherThanFeatures = false;
  bool HadMatchOtherThanPredicate = false;
  unsigned RetCode = Match_InvalidOperand;
  uint64_t MissingFeatures = ~0ULL;
  // Set ErrorInfo to the operand that mismatches if it is
  // wrong for all instances of the instruction.
  ErrorInfo = ~0ULL;
  // Find the appropriate table for this asm variant.
  const MatchEntry *Start, *End;
  switch (VariantID) {
  default: llvm_unreachable("invalid variant!");
  case 0: Start = std::begin(MatchTable0); End = std::end(MatchTable0); break;
  }
  // Search the table.
  std::pair<const MatchEntry*, const MatchEntry*>MnemonicRange(Start, End);
  unsigned SIndex = Mnemonic.empty() ? 0 : 1;
  if (!Mnemonic.empty())
    MnemonicRange = std::equal_range(Start, End, Mnemonic.lower(), LessOpcode());

  // Return a more specific error code if no mnemonics match.
  if (MnemonicRange.first == MnemonicRange.second)
    return Match_MnemonicFail;

  for (const MatchEntry *it = MnemonicRange.first, *ie = MnemonicRange.second;
       it != ie; ++it) {
    bool OperandsValid = true;
    for (unsigned i = SIndex; i != 14; ++i) {
      auto Formal = static_cast<MatchClassKind>(it->Classes[i]);
      if (i >= Operands.size()) {
        OperandsValid = (Formal == InvalidMatchClass);
        if (!OperandsValid) ErrorInfo = i;
        break;
      }
      MCParsedAsmOperand &Actual = *Operands[i];
      unsigned Diag = validateOperandClass(Actual, Formal);
      if (Diag == Match_Success)
        continue;
      // If the generic handler indicates an invalid operand
      // failure, check for a special case.
      if (Diag == Match_InvalidOperand) {
        Diag = validateTargetOperandClass(Actual, Formal);
        if (Diag == Match_Success)
          continue;
      }
      // If this operand is broken for all of the instances of this
      // mnemonic, keep track of it so we can report loc info.
      // If we already had a match that only failed due to a
      // target predicate, that diagnostic is preferred.
      if (!HadMatchOtherThanPredicate &&
          (it == MnemonicRange.first || ErrorInfo <= i)) {
        ErrorInfo = i;
        // InvalidOperand is the default. Prefer specificity.
        if (Diag != Match_InvalidOperand)
          RetCode = Diag;
      }
      // Otherwise, just reject this instance of the mnemonic.
      OperandsValid = false;
      break;
    }

    if (!OperandsValid) continue;
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      HadMatchOtherThanFeatures = true;
      uint64_t NewMissingFeatures = it->RequiredFeatures & ~AvailableFeatures;
      if (countPopulation(NewMissingFeatures) <=
          countPopulation(MissingFeatures))
        MissingFeatures = NewMissingFeatures;
      continue;
    }

    Inst.clear();

    if (matchingInlineAsm) {
      Inst.setOpcode(it->Opcode);
      convertToMapAndConstraints(it->ConvertFn, Operands);
      return Match_Success;
    }

    // We have selected a definite instruction, convert the parsed
    // operands into the appropriate MCInst.
    convertToMCInst(it->ConvertFn, Inst, it->Opcode, Operands);

    // We have a potential match. Check the target predicate to
    // handle any context sensitive constraints.
    unsigned MatchResult;
    if ((MatchResult = checkTargetMatchPredicate(Inst)) != Match_Success) {
      Inst.clear();
      RetCode = MatchResult;
      HadMatchOtherThanPredicate = true;
      continue;
    }

    return Match_Success;
  }

  // Okay, we had no match.  Try to return a useful error code.
  if (HadMatchOtherThanPredicate || !HadMatchOtherThanFeatures)
    return RetCode;

  // Missing feature matches return which features were missing
  ErrorInfo = MissingFeatures;
  return Match_MissingFeature;
}

namespace {
  struct OperandMatchEntry {
    uint8_t RequiredFeatures;
    uint16_t Mnemonic;
    uint16_t Class;
    uint16_t OperandMask;

    StringRef getMnemonic() const {
      return StringRef(MnemonicTable + Mnemonic + 1,
                       MnemonicTable[Mnemonic]);
    }
  };

  // Predicate for searching for an opcode.
  struct LessOpcodeOperand {
    bool operator()(const OperandMatchEntry &LHS, StringRef RHS) {
      return LHS.getMnemonic()  < RHS;
    }
    bool operator()(StringRef LHS, const OperandMatchEntry &RHS) {
      return LHS < RHS.getMnemonic();
    }
    bool operator()(const OperandMatchEntry &LHS, const OperandMatchEntry &RHS) {
      return LHS.getMnemonic() < RHS.getMnemonic();
    }
  };
} // end anonymous namespace.

static const OperandMatchEntry OperandMatchTable[2428] = {
  /* Operand List Mask, Mnemonic, Operand Class, Features */
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 154 /* buffer_atomic_add */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 172 /* buffer_atomic_and */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 190 /* buffer_atomic_or */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 207 /* buffer_atomic_smax */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 226 /* buffer_atomic_smin */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 245 /* buffer_atomic_sub */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 263 /* buffer_atomic_swap */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 282 /* buffer_atomic_umax */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 301 /* buffer_atomic_umin */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 320 /* buffer_atomic_xor */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 338 /* buffer_load_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 356 /* buffer_load_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 376 /* buffer_load_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 396 /* buffer_load_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 417 /* buffer_load_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 439 /* buffer_load_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 462 /* buffer_load_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 486 /* buffer_load_sbyte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 504 /* buffer_load_sshort */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 523 /* buffer_load_ubyte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 541 /* buffer_load_ushort */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 560 /* buffer_store_byte */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 578 /* buffer_store_dword */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 597 /* buffer_store_dwordx2 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 618 /* buffer_store_dwordx4 */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 639 /* buffer_store_format_x */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 661 /* buffer_store_format_xy */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 684 /* buffer_store_format_xyz */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 708 /* buffer_store_format_xyzw */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 16 /* 4 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 64 /* 6 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_GLCparseMubufOptionalOps, 256 /* 8 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_MubufOffset, 128 /* 7 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_SLCparseMubufOptionalOps, 512 /* 9 */ },
  { Feature_isGCN, 733 /* buffer_store_short */, MCK_TFEparseMubufOptionalOps, 1024 /* 10 */ },
  { Feature_isGCN, 804 /* ds_add_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 804 /* ds_add_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 804 /* ds_add_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 804 /* ds_add_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 819 /* ds_add_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 819 /* ds_add_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 819 /* ds_add_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 819 /* ds_add_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 834 /* ds_add_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 834 /* ds_add_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 834 /* ds_add_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 834 /* ds_add_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 850 /* ds_add_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 850 /* ds_add_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 850 /* ds_add_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 850 /* ds_add_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 866 /* ds_add_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 866 /* ds_add_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 866 /* ds_add_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 866 /* ds_add_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 877 /* ds_add_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 877 /* ds_add_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 877 /* ds_add_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 877 /* ds_add_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 888 /* ds_and_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 888 /* ds_and_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 888 /* ds_and_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 888 /* ds_and_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 899 /* ds_and_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 899 /* ds_and_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 899 /* ds_and_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 899 /* ds_and_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 910 /* ds_and_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 910 /* ds_and_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 910 /* ds_and_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 910 /* ds_and_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 925 /* ds_and_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 925 /* ds_and_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 925 /* ds_and_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 925 /* ds_and_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 940 /* ds_and_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 940 /* ds_and_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 940 /* ds_and_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 940 /* ds_and_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 956 /* ds_and_src_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 956 /* ds_and_src_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 956 /* ds_and_src_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 956 /* ds_and_src_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 971 /* ds_append */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 971 /* ds_append */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 971 /* ds_append */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 971 /* ds_append */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 981 /* ds_cmpst_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 981 /* ds_cmpst_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 981 /* ds_cmpst_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 981 /* ds_cmpst_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 994 /* ds_cmpst_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 994 /* ds_cmpst_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 994 /* ds_cmpst_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 994 /* ds_cmpst_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1007 /* ds_cmpst_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1007 /* ds_cmpst_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1007 /* ds_cmpst_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1007 /* ds_cmpst_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1020 /* ds_cmpst_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1020 /* ds_cmpst_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1020 /* ds_cmpst_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1020 /* ds_cmpst_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1033 /* ds_cmpst_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1033 /* ds_cmpst_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1033 /* ds_cmpst_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1033 /* ds_cmpst_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1050 /* ds_cmpst_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1050 /* ds_cmpst_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1050 /* ds_cmpst_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1050 /* ds_cmpst_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1067 /* ds_cmpst_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1067 /* ds_cmpst_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1067 /* ds_cmpst_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1067 /* ds_cmpst_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1084 /* ds_cmpst_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1084 /* ds_cmpst_rtn_f64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1084 /* ds_cmpst_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1084 /* ds_cmpst_rtn_f64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1101 /* ds_consume */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1101 /* ds_consume */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1101 /* ds_consume */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1101 /* ds_consume */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1112 /* ds_dec_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1112 /* ds_dec_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1112 /* ds_dec_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1112 /* ds_dec_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1127 /* ds_dec_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1127 /* ds_dec_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1127 /* ds_dec_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1127 /* ds_dec_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1142 /* ds_dec_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1142 /* ds_dec_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1142 /* ds_dec_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1142 /* ds_dec_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1158 /* ds_dec_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1158 /* ds_dec_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1158 /* ds_dec_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1158 /* ds_dec_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1174 /* ds_dec_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1174 /* ds_dec_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1174 /* ds_dec_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1174 /* ds_dec_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1185 /* ds_dec_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1185 /* ds_dec_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1185 /* ds_dec_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1185 /* ds_dec_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1266 /* ds_inc_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1266 /* ds_inc_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1266 /* ds_inc_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1266 /* ds_inc_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1281 /* ds_inc_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1281 /* ds_inc_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1281 /* ds_inc_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1281 /* ds_inc_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1296 /* ds_inc_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1296 /* ds_inc_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1296 /* ds_inc_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1296 /* ds_inc_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1312 /* ds_inc_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1312 /* ds_inc_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1312 /* ds_inc_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1312 /* ds_inc_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1328 /* ds_inc_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1328 /* ds_inc_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1328 /* ds_inc_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1328 /* ds_inc_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1339 /* ds_inc_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1339 /* ds_inc_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1339 /* ds_inc_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1339 /* ds_inc_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1350 /* ds_max_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1350 /* ds_max_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1350 /* ds_max_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1350 /* ds_max_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1361 /* ds_max_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1361 /* ds_max_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1361 /* ds_max_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1361 /* ds_max_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1372 /* ds_max_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1372 /* ds_max_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1372 /* ds_max_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1372 /* ds_max_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1383 /* ds_max_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1383 /* ds_max_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1383 /* ds_max_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1383 /* ds_max_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1394 /* ds_max_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1394 /* ds_max_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1394 /* ds_max_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1394 /* ds_max_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1409 /* ds_max_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1409 /* ds_max_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1409 /* ds_max_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1409 /* ds_max_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1424 /* ds_max_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1424 /* ds_max_rtn_i32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1424 /* ds_max_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1424 /* ds_max_rtn_i32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1439 /* ds_max_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1439 /* ds_max_rtn_i64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1439 /* ds_max_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1439 /* ds_max_rtn_i64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1454 /* ds_max_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1454 /* ds_max_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1454 /* ds_max_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1454 /* ds_max_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1469 /* ds_max_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1469 /* ds_max_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1469 /* ds_max_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1469 /* ds_max_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1484 /* ds_max_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1484 /* ds_max_src2_f32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1484 /* ds_max_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1484 /* ds_max_src2_f32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1500 /* ds_max_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1500 /* ds_max_src2_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1500 /* ds_max_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1500 /* ds_max_src2_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1516 /* ds_max_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1516 /* ds_max_src2_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1516 /* ds_max_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1516 /* ds_max_src2_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1532 /* ds_max_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1532 /* ds_max_src2_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1532 /* ds_max_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1532 /* ds_max_src2_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1548 /* ds_max_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1548 /* ds_max_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1548 /* ds_max_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1548 /* ds_max_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1564 /* ds_max_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1564 /* ds_max_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1564 /* ds_max_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1564 /* ds_max_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1580 /* ds_max_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1580 /* ds_max_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1580 /* ds_max_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1580 /* ds_max_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1591 /* ds_max_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1591 /* ds_max_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1591 /* ds_max_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1591 /* ds_max_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1602 /* ds_min_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1602 /* ds_min_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1602 /* ds_min_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1602 /* ds_min_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1613 /* ds_min_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1613 /* ds_min_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1613 /* ds_min_f64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1613 /* ds_min_f64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1624 /* ds_min_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1624 /* ds_min_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1624 /* ds_min_i32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1624 /* ds_min_i32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1635 /* ds_min_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1635 /* ds_min_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1635 /* ds_min_i64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1635 /* ds_min_i64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1646 /* ds_min_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1646 /* ds_min_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1646 /* ds_min_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1646 /* ds_min_rtn_f32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1661 /* ds_min_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1661 /* ds_min_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1661 /* ds_min_rtn_f64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1661 /* ds_min_rtn_f64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1676 /* ds_min_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1676 /* ds_min_rtn_i32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1676 /* ds_min_rtn_i32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1676 /* ds_min_rtn_i32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1691 /* ds_min_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1691 /* ds_min_rtn_i64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1691 /* ds_min_rtn_i64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1691 /* ds_min_rtn_i64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1706 /* ds_min_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1706 /* ds_min_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1706 /* ds_min_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1706 /* ds_min_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1721 /* ds_min_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1721 /* ds_min_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1721 /* ds_min_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1721 /* ds_min_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1736 /* ds_min_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1736 /* ds_min_src2_f32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1736 /* ds_min_src2_f32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1736 /* ds_min_src2_f32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1752 /* ds_min_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1752 /* ds_min_src2_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1752 /* ds_min_src2_f64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1752 /* ds_min_src2_f64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1768 /* ds_min_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1768 /* ds_min_src2_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1768 /* ds_min_src2_i32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1768 /* ds_min_src2_i32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1784 /* ds_min_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1784 /* ds_min_src2_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1784 /* ds_min_src2_i64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1784 /* ds_min_src2_i64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1800 /* ds_min_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1800 /* ds_min_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1800 /* ds_min_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1800 /* ds_min_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1816 /* ds_min_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1816 /* ds_min_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1816 /* ds_min_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1816 /* ds_min_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1832 /* ds_min_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1832 /* ds_min_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1832 /* ds_min_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1832 /* ds_min_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1843 /* ds_min_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1843 /* ds_min_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1843 /* ds_min_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1843 /* ds_min_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1854 /* ds_mskor_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1854 /* ds_mskor_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1854 /* ds_mskor_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1854 /* ds_mskor_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1867 /* ds_mskor_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1867 /* ds_mskor_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1867 /* ds_mskor_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1867 /* ds_mskor_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1880 /* ds_mskor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1880 /* ds_mskor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1880 /* ds_mskor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1880 /* ds_mskor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1897 /* ds_mskor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1897 /* ds_mskor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1897 /* ds_mskor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1897 /* ds_mskor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 1914 /* ds_or_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1914 /* ds_or_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1914 /* ds_or_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1914 /* ds_or_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1924 /* ds_or_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1924 /* ds_or_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1924 /* ds_or_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1924 /* ds_or_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1934 /* ds_or_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1934 /* ds_or_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1934 /* ds_or_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1934 /* ds_or_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1948 /* ds_or_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1948 /* ds_or_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1948 /* ds_or_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 1948 /* ds_or_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 1962 /* ds_or_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1962 /* ds_or_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1962 /* ds_or_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1962 /* ds_or_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1977 /* ds_or_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1977 /* ds_or_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1977 /* ds_or_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 1977 /* ds_or_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 1992 /* ds_ordered_count */, MCK_DSOffsetparseDSOffsetOptional, 8 /* 3 */ },
  { Feature_isGCN, 1992 /* ds_ordered_count */, MCK_DSOffsetparseDSOffsetOptional, 8 /* 3 */ },
  { Feature_isGCN, 2009 /* ds_read2_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2009 /* ds_read2_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2009 /* ds_read2_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2009 /* ds_read2_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2022 /* ds_read2_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2022 /* ds_read2_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2022 /* ds_read2_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2022 /* ds_read2_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2035 /* ds_read2st64_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2035 /* ds_read2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2035 /* ds_read2st64_b32 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2035 /* ds_read2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2052 /* ds_read2st64_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2052 /* ds_read2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2052 /* ds_read2st64_b64 */, MCK_DSOffset1, 24 /* 3, 4 */ },
  { Feature_isGCN, 2052 /* ds_read2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2069 /* ds_read_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2069 /* ds_read_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2069 /* ds_read_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2069 /* ds_read_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2081 /* ds_read_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2081 /* ds_read_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2081 /* ds_read_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2081 /* ds_read_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2093 /* ds_read_i16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2093 /* ds_read_i16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2093 /* ds_read_i16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2093 /* ds_read_i16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2105 /* ds_read_i8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2105 /* ds_read_i8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2105 /* ds_read_i8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2105 /* ds_read_i8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2116 /* ds_read_u16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2116 /* ds_read_u16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2116 /* ds_read_u16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2116 /* ds_read_u16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2128 /* ds_read_u8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2128 /* ds_read_u8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2128 /* ds_read_u8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2128 /* ds_read_u8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2139 /* ds_rsub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2139 /* ds_rsub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2139 /* ds_rsub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2139 /* ds_rsub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2155 /* ds_rsub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2155 /* ds_rsub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2155 /* ds_rsub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2155 /* ds_rsub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2171 /* ds_rsub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2171 /* ds_rsub_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2171 /* ds_rsub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2171 /* ds_rsub_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2188 /* ds_rsub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2188 /* ds_rsub_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2188 /* ds_rsub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2188 /* ds_rsub_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2205 /* ds_rsub_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2205 /* ds_rsub_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2205 /* ds_rsub_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2205 /* ds_rsub_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2217 /* ds_rsub_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2217 /* ds_rsub_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2217 /* ds_rsub_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2217 /* ds_rsub_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2229 /* ds_sub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2229 /* ds_sub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2229 /* ds_sub_rtn_u32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2229 /* ds_sub_rtn_u32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2244 /* ds_sub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2244 /* ds_sub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2244 /* ds_sub_rtn_u64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2244 /* ds_sub_rtn_u64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2259 /* ds_sub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2259 /* ds_sub_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2259 /* ds_sub_src2_u32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2259 /* ds_sub_src2_u32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2275 /* ds_sub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2275 /* ds_sub_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2275 /* ds_sub_src2_u64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2275 /* ds_sub_src2_u64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2291 /* ds_sub_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2291 /* ds_sub_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2291 /* ds_sub_u32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2291 /* ds_sub_u32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2302 /* ds_sub_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2302 /* ds_sub_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2302 /* ds_sub_u64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2302 /* ds_sub_u64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2313 /* ds_swizzle_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2313 /* ds_swizzle_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2313 /* ds_swizzle_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2313 /* ds_swizzle_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2328 /* ds_wrap_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2328 /* ds_wrap_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2328 /* ds_wrap_rtn_f32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2328 /* ds_wrap_rtn_f32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2344 /* ds_write2_b32 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2344 /* ds_write2_b32 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2344 /* ds_write2_b32 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2344 /* ds_write2_b32 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2358 /* ds_write2_b64 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2358 /* ds_write2_b64 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2358 /* ds_write2_b64 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2358 /* ds_write2_b64 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2372 /* ds_write2st64_b32 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2372 /* ds_write2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2372 /* ds_write2st64_b32 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2372 /* ds_write2st64_b32 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2390 /* ds_write2st64_b64 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2390 /* ds_write2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2390 /* ds_write2st64_b64 */, MCK_DSOffset1, 48 /* 4, 5 */ },
  { Feature_isGCN, 2390 /* ds_write2st64_b64 */, MCK_GDSparseDSOff01OptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2408 /* ds_write_b16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2408 /* ds_write_b16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2408 /* ds_write_b16 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2408 /* ds_write_b16 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2421 /* ds_write_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2421 /* ds_write_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2421 /* ds_write_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2421 /* ds_write_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2434 /* ds_write_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2434 /* ds_write_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2434 /* ds_write_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2434 /* ds_write_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2447 /* ds_write_b8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2447 /* ds_write_b8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2447 /* ds_write_b8 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2447 /* ds_write_b8 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2459 /* ds_write_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2459 /* ds_write_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2459 /* ds_write_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2459 /* ds_write_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2477 /* ds_write_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2477 /* ds_write_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2477 /* ds_write_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2477 /* ds_write_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2495 /* ds_wrxchg2_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2495 /* ds_wrxchg2_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2495 /* ds_wrxchg2_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2495 /* ds_wrxchg2_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2514 /* ds_wrxchg2_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2514 /* ds_wrxchg2_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2514 /* ds_wrxchg2_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2514 /* ds_wrxchg2_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2533 /* ds_wrxchg2st64_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2533 /* ds_wrxchg2st64_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2533 /* ds_wrxchg2st64_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2533 /* ds_wrxchg2st64_rtn_b32 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2556 /* ds_wrxchg2st64_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2556 /* ds_wrxchg2st64_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2556 /* ds_wrxchg2st64_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2556 /* ds_wrxchg2st64_rtn_b64 */, MCK_GDSparseDSOptionalOps, 64 /* 6 */ },
  { Feature_isGCN, 2579 /* ds_wrxchg_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2579 /* ds_wrxchg_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2579 /* ds_wrxchg_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2579 /* ds_wrxchg_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2597 /* ds_wrxchg_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2597 /* ds_wrxchg_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2597 /* ds_wrxchg_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2597 /* ds_wrxchg_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2615 /* ds_xor_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2615 /* ds_xor_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2615 /* ds_xor_b32 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2615 /* ds_xor_b32 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2626 /* ds_xor_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2626 /* ds_xor_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2626 /* ds_xor_b64 */, MCK_DSOffsetparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2626 /* ds_xor_b64 */, MCK_GDSparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2637 /* ds_xor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2637 /* ds_xor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2637 /* ds_xor_rtn_b32 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2637 /* ds_xor_rtn_b32 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2652 /* ds_xor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2652 /* ds_xor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2652 /* ds_xor_rtn_b64 */, MCK_DSOffsetparseDSOptionalOps, 16 /* 4 */ },
  { Feature_isGCN, 2652 /* ds_xor_rtn_b64 */, MCK_GDSparseDSOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 2667 /* ds_xor_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2667 /* ds_xor_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2667 /* ds_xor_src2_b32 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2667 /* ds_xor_src2_b32 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2683 /* ds_xor_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2683 /* ds_xor_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isGCN, 2683 /* ds_xor_src2_b64 */, MCK_DSOffsetparseDSOptionalOps, 4 /* 2 */ },
  { Feature_isGCN, 2683 /* ds_xor_src2_b64 */, MCK_GDSparseDSOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2703 /* flat_atomic_add */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2703 /* flat_atomic_add */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2703 /* flat_atomic_add */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2703 /* flat_atomic_add */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2719 /* flat_atomic_add_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2719 /* flat_atomic_add_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2719 /* flat_atomic_add_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2719 /* flat_atomic_add_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2738 /* flat_atomic_and */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2738 /* flat_atomic_and */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2738 /* flat_atomic_and */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2738 /* flat_atomic_and */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2754 /* flat_atomic_and_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2754 /* flat_atomic_and_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2754 /* flat_atomic_and_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2754 /* flat_atomic_and_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2773 /* flat_atomic_cmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2773 /* flat_atomic_cmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2773 /* flat_atomic_cmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2773 /* flat_atomic_cmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2793 /* flat_atomic_cmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2793 /* flat_atomic_cmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2793 /* flat_atomic_cmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2793 /* flat_atomic_cmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2816 /* flat_atomic_dec */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2816 /* flat_atomic_dec */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2816 /* flat_atomic_dec */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2816 /* flat_atomic_dec */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2832 /* flat_atomic_dec_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2832 /* flat_atomic_dec_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2832 /* flat_atomic_dec_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2832 /* flat_atomic_dec_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2851 /* flat_atomic_fcmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2851 /* flat_atomic_fcmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2851 /* flat_atomic_fcmpswap */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2851 /* flat_atomic_fcmpswap */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2872 /* flat_atomic_fcmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2872 /* flat_atomic_fcmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2872 /* flat_atomic_fcmpswap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2872 /* flat_atomic_fcmpswap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2896 /* flat_atomic_fmax */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2896 /* flat_atomic_fmax */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2896 /* flat_atomic_fmax */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2896 /* flat_atomic_fmax */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2913 /* flat_atomic_fmax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2913 /* flat_atomic_fmax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2913 /* flat_atomic_fmax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2913 /* flat_atomic_fmax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2933 /* flat_atomic_fmin */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2933 /* flat_atomic_fmin */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2933 /* flat_atomic_fmin */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2933 /* flat_atomic_fmin */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2950 /* flat_atomic_fmin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2950 /* flat_atomic_fmin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2950 /* flat_atomic_fmin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2950 /* flat_atomic_fmin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2970 /* flat_atomic_inc */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2970 /* flat_atomic_inc */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2970 /* flat_atomic_inc */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2970 /* flat_atomic_inc */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_inc_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_inc_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_inc_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 2986 /* flat_atomic_inc_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3005 /* flat_atomic_or */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3005 /* flat_atomic_or */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3005 /* flat_atomic_or */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3005 /* flat_atomic_or */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3020 /* flat_atomic_or_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3020 /* flat_atomic_or_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3020 /* flat_atomic_or_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3020 /* flat_atomic_or_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3038 /* flat_atomic_rsub */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3038 /* flat_atomic_rsub */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3038 /* flat_atomic_rsub */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3038 /* flat_atomic_rsub */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3055 /* flat_atomic_rsub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3055 /* flat_atomic_rsub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3055 /* flat_atomic_rsub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3055 /* flat_atomic_rsub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3075 /* flat_atomic_smax */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3075 /* flat_atomic_smax */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3075 /* flat_atomic_smax */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3075 /* flat_atomic_smax */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3092 /* flat_atomic_smax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3092 /* flat_atomic_smax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3092 /* flat_atomic_smax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3092 /* flat_atomic_smax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3112 /* flat_atomic_smin */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3112 /* flat_atomic_smin */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3112 /* flat_atomic_smin */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3112 /* flat_atomic_smin */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3129 /* flat_atomic_smin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3129 /* flat_atomic_smin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3129 /* flat_atomic_smin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3129 /* flat_atomic_smin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_sub */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_sub */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_sub */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3149 /* flat_atomic_sub */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3165 /* flat_atomic_sub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3165 /* flat_atomic_sub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3165 /* flat_atomic_sub_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3165 /* flat_atomic_sub_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3184 /* flat_atomic_swap */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3184 /* flat_atomic_swap */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3184 /* flat_atomic_swap */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3184 /* flat_atomic_swap */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3201 /* flat_atomic_swap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3201 /* flat_atomic_swap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3201 /* flat_atomic_swap_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3201 /* flat_atomic_swap_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3221 /* flat_atomic_umax */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3221 /* flat_atomic_umax */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3221 /* flat_atomic_umax */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3221 /* flat_atomic_umax */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3238 /* flat_atomic_umax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3238 /* flat_atomic_umax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3238 /* flat_atomic_umax_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3238 /* flat_atomic_umax_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3258 /* flat_atomic_umin */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3258 /* flat_atomic_umin */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3258 /* flat_atomic_umin */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3258 /* flat_atomic_umin */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3275 /* flat_atomic_umin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3275 /* flat_atomic_umin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3275 /* flat_atomic_umin_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3275 /* flat_atomic_umin_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3295 /* flat_atomic_xor */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3295 /* flat_atomic_xor */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3295 /* flat_atomic_xor */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3295 /* flat_atomic_xor */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3311 /* flat_atomic_xor_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3311 /* flat_atomic_xor_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3311 /* flat_atomic_xor_x2 */, MCK_SLCparseFlatAtomicOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3311 /* flat_atomic_xor_x2 */, MCK_TFEparseFlatAtomicOptionalOps, 64 /* 6 */ },
  { Feature_isCIVI, 3330 /* flat_load_dword */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3330 /* flat_load_dword */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3330 /* flat_load_dword */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3346 /* flat_load_dwordx2 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3346 /* flat_load_dwordx2 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3346 /* flat_load_dwordx2 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3364 /* flat_load_dwordx3 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3364 /* flat_load_dwordx3 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3364 /* flat_load_dwordx3 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3382 /* flat_load_dwordx4 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3382 /* flat_load_dwordx4 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3382 /* flat_load_dwordx4 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3400 /* flat_load_sbyte */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3400 /* flat_load_sbyte */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3400 /* flat_load_sbyte */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3416 /* flat_load_sshort */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3416 /* flat_load_sshort */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3416 /* flat_load_sshort */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3433 /* flat_load_ubyte */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3433 /* flat_load_ubyte */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3433 /* flat_load_ubyte */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3449 /* flat_load_ushort */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3449 /* flat_load_ushort */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3449 /* flat_load_ushort */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3466 /* flat_store_byte */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3466 /* flat_store_byte */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3466 /* flat_store_byte */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3482 /* flat_store_dword */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3482 /* flat_store_dword */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3482 /* flat_store_dword */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3499 /* flat_store_dwordx2 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3499 /* flat_store_dwordx2 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3499 /* flat_store_dwordx2 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3518 /* flat_store_dwordx3 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3518 /* flat_store_dwordx3 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3518 /* flat_store_dwordx3 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3537 /* flat_store_dwordx4 */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3537 /* flat_store_dwordx4 */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3537 /* flat_store_dwordx4 */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isCIVI, 3556 /* flat_store_short */, MCK_GLCparseFlatOptionalOps, 8 /* 3 */ },
  { Feature_isCIVI, 3556 /* flat_store_short */, MCK_SLCparseFlatOptionalOps, 16 /* 4 */ },
  { Feature_isCIVI, 3556 /* flat_store_short */, MCK_TFEparseFlatOptionalOps, 32 /* 5 */ },
  { Feature_isGCN, 5161 /* s_branch */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5301 /* s_cbranch_execnz */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5318 /* s_cbranch_execz */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5383 /* s_cbranch_scc0 */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5398 /* s_cbranch_scc1 */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5413 /* s_cbranch_vccnz */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 5429 /* s_cbranch_vccz */, MCK_SoppBrTarget, 2 /* 1 */ },
  { Feature_isGCN, 6791 /* s_waitcnt */, MCK_SWaitCnt, 2 /* 1 */ },
  { Feature_isGCN|Feature_isSICI, 7035 /* v_add_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7035 /* v_add_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7035 /* v_add_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7035 /* v_add_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7045 /* v_add_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7045 /* v_add_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7045 /* v_add_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7045 /* v_add_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7269 /* v_ceil_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 7269 /* v_ceil_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7269 /* v_ceil_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 7269 /* v_ceil_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 7280 /* v_ceil_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 7280 /* v_ceil_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 7280 /* v_ceil_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 7280 /* v_ceil_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7373 /* v_cmp_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7373 /* v_cmp_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7373 /* v_cmp_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7373 /* v_cmp_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7403 /* v_cmp_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7403 /* v_cmp_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7403 /* v_cmp_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7403 /* v_cmp_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7553 /* v_cmp_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7553 /* v_cmp_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7553 /* v_cmp_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7553 /* v_cmp_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7581 /* v_cmp_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7581 /* v_cmp_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7581 /* v_cmp_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7581 /* v_cmp_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7721 /* v_cmp_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7721 /* v_cmp_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7721 /* v_cmp_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7721 /* v_cmp_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7751 /* v_cmp_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7751 /* v_cmp_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7751 /* v_cmp_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7751 /* v_cmp_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7901 /* v_cmp_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7901 /* v_cmp_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7901 /* v_cmp_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7901 /* v_cmp_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 7931 /* v_cmp_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 7931 /* v_cmp_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 7931 /* v_cmp_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 7931 /* v_cmp_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8081 /* v_cmp_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8081 /* v_cmp_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8081 /* v_cmp_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8081 /* v_cmp_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8111 /* v_cmp_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8111 /* v_cmp_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8111 /* v_cmp_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8111 /* v_cmp_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8261 /* v_cmp_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8261 /* v_cmp_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8261 /* v_cmp_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8261 /* v_cmp_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8291 /* v_cmp_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8291 /* v_cmp_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8291 /* v_cmp_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8291 /* v_cmp_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8321 /* v_cmp_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8321 /* v_cmp_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8321 /* v_cmp_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8321 /* v_cmp_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8351 /* v_cmp_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8351 /* v_cmp_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8351 /* v_cmp_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8351 /* v_cmp_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8621 /* v_cmp_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8621 /* v_cmp_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8621 /* v_cmp_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8621 /* v_cmp_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8653 /* v_cmp_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8653 /* v_cmp_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8653 /* v_cmp_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8653 /* v_cmp_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8685 /* v_cmp_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8685 /* v_cmp_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8685 /* v_cmp_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8685 /* v_cmp_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8717 /* v_cmp_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8717 /* v_cmp_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8717 /* v_cmp_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8717 /* v_cmp_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8749 /* v_cmp_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8749 /* v_cmp_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8749 /* v_cmp_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8749 /* v_cmp_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8781 /* v_cmp_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8781 /* v_cmp_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8781 /* v_cmp_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8781 /* v_cmp_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8813 /* v_cmp_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8813 /* v_cmp_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8813 /* v_cmp_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8813 /* v_cmp_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8845 /* v_cmp_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8845 /* v_cmp_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8845 /* v_cmp_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8845 /* v_cmp_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8877 /* v_cmp_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8877 /* v_cmp_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8877 /* v_cmp_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8877 /* v_cmp_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8909 /* v_cmp_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8909 /* v_cmp_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8909 /* v_cmp_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8909 /* v_cmp_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8941 /* v_cmp_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8941 /* v_cmp_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8941 /* v_cmp_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8941 /* v_cmp_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 8973 /* v_cmp_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 8973 /* v_cmp_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 8973 /* v_cmp_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 8973 /* v_cmp_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9005 /* v_cmp_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9005 /* v_cmp_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9005 /* v_cmp_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9005 /* v_cmp_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9033 /* v_cmp_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9033 /* v_cmp_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9033 /* v_cmp_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9033 /* v_cmp_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9173 /* v_cmp_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9173 /* v_cmp_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9173 /* v_cmp_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9173 /* v_cmp_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9205 /* v_cmp_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9205 /* v_cmp_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9205 /* v_cmp_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9205 /* v_cmp_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9237 /* v_cmp_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9237 /* v_cmp_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9237 /* v_cmp_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9237 /* v_cmp_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 9265 /* v_cmp_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 9265 /* v_cmp_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 9265 /* v_cmp_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 9265 /* v_cmp_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9293 /* v_cmps_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9293 /* v_cmps_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9293 /* v_cmps_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9293 /* v_cmps_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9325 /* v_cmps_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9325 /* v_cmps_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9325 /* v_cmps_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9325 /* v_cmps_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9357 /* v_cmps_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9357 /* v_cmps_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9357 /* v_cmps_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9357 /* v_cmps_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9387 /* v_cmps_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9387 /* v_cmps_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9387 /* v_cmps_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9387 /* v_cmps_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9417 /* v_cmps_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9417 /* v_cmps_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9417 /* v_cmps_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9417 /* v_cmps_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9449 /* v_cmps_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9449 /* v_cmps_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9449 /* v_cmps_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9449 /* v_cmps_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9481 /* v_cmps_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9481 /* v_cmps_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9481 /* v_cmps_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9481 /* v_cmps_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9513 /* v_cmps_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9513 /* v_cmps_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9513 /* v_cmps_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9513 /* v_cmps_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9545 /* v_cmps_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9545 /* v_cmps_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9545 /* v_cmps_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9545 /* v_cmps_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9577 /* v_cmps_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9577 /* v_cmps_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9577 /* v_cmps_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9577 /* v_cmps_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9609 /* v_cmps_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9609 /* v_cmps_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9609 /* v_cmps_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9609 /* v_cmps_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9641 /* v_cmps_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9641 /* v_cmps_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9641 /* v_cmps_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9641 /* v_cmps_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9673 /* v_cmps_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9673 /* v_cmps_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9673 /* v_cmps_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9673 /* v_cmps_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9705 /* v_cmps_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9705 /* v_cmps_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9705 /* v_cmps_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9705 /* v_cmps_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9737 /* v_cmps_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9737 /* v_cmps_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9737 /* v_cmps_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9737 /* v_cmps_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9771 /* v_cmps_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9771 /* v_cmps_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9771 /* v_cmps_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9771 /* v_cmps_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9805 /* v_cmps_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9805 /* v_cmps_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9805 /* v_cmps_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9805 /* v_cmps_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9839 /* v_cmps_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9839 /* v_cmps_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9839 /* v_cmps_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9839 /* v_cmps_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9873 /* v_cmps_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9873 /* v_cmps_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9873 /* v_cmps_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9873 /* v_cmps_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9907 /* v_cmps_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9907 /* v_cmps_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9907 /* v_cmps_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9907 /* v_cmps_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9941 /* v_cmps_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9941 /* v_cmps_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9941 /* v_cmps_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9941 /* v_cmps_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 9975 /* v_cmps_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 9975 /* v_cmps_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 9975 /* v_cmps_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 9975 /* v_cmps_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10009 /* v_cmps_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10009 /* v_cmps_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10009 /* v_cmps_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10009 /* v_cmps_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10043 /* v_cmps_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10043 /* v_cmps_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10043 /* v_cmps_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10043 /* v_cmps_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10077 /* v_cmps_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10077 /* v_cmps_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10077 /* v_cmps_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10077 /* v_cmps_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10111 /* v_cmps_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10111 /* v_cmps_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10111 /* v_cmps_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10111 /* v_cmps_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10145 /* v_cmps_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10145 /* v_cmps_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10145 /* v_cmps_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10145 /* v_cmps_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10175 /* v_cmps_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10175 /* v_cmps_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10175 /* v_cmps_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10175 /* v_cmps_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10205 /* v_cmps_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10205 /* v_cmps_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10205 /* v_cmps_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10205 /* v_cmps_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10239 /* v_cmps_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10239 /* v_cmps_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10239 /* v_cmps_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10239 /* v_cmps_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10273 /* v_cmps_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10273 /* v_cmps_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10273 /* v_cmps_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10273 /* v_cmps_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10303 /* v_cmps_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10303 /* v_cmps_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10303 /* v_cmps_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10303 /* v_cmps_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10333 /* v_cmpsx_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10333 /* v_cmpsx_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10333 /* v_cmpsx_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10333 /* v_cmpsx_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10367 /* v_cmpsx_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10367 /* v_cmpsx_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10367 /* v_cmpsx_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10367 /* v_cmpsx_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10401 /* v_cmpsx_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10401 /* v_cmpsx_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10401 /* v_cmpsx_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10401 /* v_cmpsx_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10433 /* v_cmpsx_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10433 /* v_cmpsx_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10433 /* v_cmpsx_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10433 /* v_cmpsx_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10465 /* v_cmpsx_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10465 /* v_cmpsx_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10465 /* v_cmpsx_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10465 /* v_cmpsx_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10499 /* v_cmpsx_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10499 /* v_cmpsx_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10499 /* v_cmpsx_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10499 /* v_cmpsx_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10533 /* v_cmpsx_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10533 /* v_cmpsx_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10533 /* v_cmpsx_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10533 /* v_cmpsx_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10567 /* v_cmpsx_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10567 /* v_cmpsx_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10567 /* v_cmpsx_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10567 /* v_cmpsx_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10601 /* v_cmpsx_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10601 /* v_cmpsx_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10601 /* v_cmpsx_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10601 /* v_cmpsx_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10635 /* v_cmpsx_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10635 /* v_cmpsx_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10635 /* v_cmpsx_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10635 /* v_cmpsx_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10669 /* v_cmpsx_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10669 /* v_cmpsx_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10669 /* v_cmpsx_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10669 /* v_cmpsx_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10703 /* v_cmpsx_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10703 /* v_cmpsx_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10703 /* v_cmpsx_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10703 /* v_cmpsx_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10737 /* v_cmpsx_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10737 /* v_cmpsx_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10737 /* v_cmpsx_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10737 /* v_cmpsx_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10771 /* v_cmpsx_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10771 /* v_cmpsx_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10771 /* v_cmpsx_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10771 /* v_cmpsx_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10805 /* v_cmpsx_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10805 /* v_cmpsx_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10805 /* v_cmpsx_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10805 /* v_cmpsx_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10841 /* v_cmpsx_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10841 /* v_cmpsx_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10841 /* v_cmpsx_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10841 /* v_cmpsx_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10877 /* v_cmpsx_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10877 /* v_cmpsx_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10877 /* v_cmpsx_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10877 /* v_cmpsx_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10913 /* v_cmpsx_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10913 /* v_cmpsx_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10913 /* v_cmpsx_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10913 /* v_cmpsx_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10949 /* v_cmpsx_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10949 /* v_cmpsx_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10949 /* v_cmpsx_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10949 /* v_cmpsx_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 10985 /* v_cmpsx_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 10985 /* v_cmpsx_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 10985 /* v_cmpsx_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 10985 /* v_cmpsx_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11021 /* v_cmpsx_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11021 /* v_cmpsx_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11021 /* v_cmpsx_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11021 /* v_cmpsx_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11057 /* v_cmpsx_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11057 /* v_cmpsx_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11057 /* v_cmpsx_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11057 /* v_cmpsx_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11093 /* v_cmpsx_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11093 /* v_cmpsx_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11093 /* v_cmpsx_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11093 /* v_cmpsx_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11129 /* v_cmpsx_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11129 /* v_cmpsx_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11129 /* v_cmpsx_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11129 /* v_cmpsx_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11165 /* v_cmpsx_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11165 /* v_cmpsx_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11165 /* v_cmpsx_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11165 /* v_cmpsx_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11201 /* v_cmpsx_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11201 /* v_cmpsx_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11201 /* v_cmpsx_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11201 /* v_cmpsx_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11237 /* v_cmpsx_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11237 /* v_cmpsx_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11237 /* v_cmpsx_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11237 /* v_cmpsx_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11269 /* v_cmpsx_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11269 /* v_cmpsx_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11269 /* v_cmpsx_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11269 /* v_cmpsx_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11301 /* v_cmpsx_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11301 /* v_cmpsx_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11301 /* v_cmpsx_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11301 /* v_cmpsx_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11337 /* v_cmpsx_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11337 /* v_cmpsx_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11337 /* v_cmpsx_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11337 /* v_cmpsx_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11373 /* v_cmpsx_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11373 /* v_cmpsx_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11373 /* v_cmpsx_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11373 /* v_cmpsx_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 11405 /* v_cmpsx_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 11405 /* v_cmpsx_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 11405 /* v_cmpsx_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isVI, 11405 /* v_cmpsx_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11513 /* v_cmpx_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11513 /* v_cmpx_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11513 /* v_cmpx_eq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11513 /* v_cmpx_eq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11545 /* v_cmpx_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11545 /* v_cmpx_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11545 /* v_cmpx_eq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11545 /* v_cmpx_eq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11705 /* v_cmpx_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11705 /* v_cmpx_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11705 /* v_cmpx_f_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11705 /* v_cmpx_f_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11735 /* v_cmpx_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11735 /* v_cmpx_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11735 /* v_cmpx_f_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11735 /* v_cmpx_f_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11885 /* v_cmpx_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11885 /* v_cmpx_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11885 /* v_cmpx_ge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11885 /* v_cmpx_ge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 11917 /* v_cmpx_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 11917 /* v_cmpx_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 11917 /* v_cmpx_ge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 11917 /* v_cmpx_ge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12077 /* v_cmpx_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12077 /* v_cmpx_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12077 /* v_cmpx_gt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12077 /* v_cmpx_gt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12109 /* v_cmpx_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12109 /* v_cmpx_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12109 /* v_cmpx_gt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12109 /* v_cmpx_gt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12269 /* v_cmpx_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12269 /* v_cmpx_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12269 /* v_cmpx_le_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12269 /* v_cmpx_le_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12301 /* v_cmpx_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12301 /* v_cmpx_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12301 /* v_cmpx_le_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12301 /* v_cmpx_le_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12461 /* v_cmpx_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12461 /* v_cmpx_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12461 /* v_cmpx_lg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12461 /* v_cmpx_lg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12493 /* v_cmpx_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12493 /* v_cmpx_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12493 /* v_cmpx_lg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12493 /* v_cmpx_lg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12525 /* v_cmpx_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12525 /* v_cmpx_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12525 /* v_cmpx_lt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12525 /* v_cmpx_lt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12557 /* v_cmpx_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12557 /* v_cmpx_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12557 /* v_cmpx_lt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12557 /* v_cmpx_lt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12845 /* v_cmpx_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12845 /* v_cmpx_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12845 /* v_cmpx_neq_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12845 /* v_cmpx_neq_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12879 /* v_cmpx_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12879 /* v_cmpx_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12879 /* v_cmpx_neq_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12879 /* v_cmpx_neq_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12913 /* v_cmpx_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12913 /* v_cmpx_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12913 /* v_cmpx_nge_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12913 /* v_cmpx_nge_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12947 /* v_cmpx_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12947 /* v_cmpx_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12947 /* v_cmpx_nge_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12947 /* v_cmpx_nge_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 12981 /* v_cmpx_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 12981 /* v_cmpx_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 12981 /* v_cmpx_ngt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 12981 /* v_cmpx_ngt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13015 /* v_cmpx_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13015 /* v_cmpx_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13015 /* v_cmpx_ngt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13015 /* v_cmpx_ngt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13049 /* v_cmpx_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13049 /* v_cmpx_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13049 /* v_cmpx_nle_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13049 /* v_cmpx_nle_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13083 /* v_cmpx_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13083 /* v_cmpx_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13083 /* v_cmpx_nle_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13083 /* v_cmpx_nle_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13117 /* v_cmpx_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13117 /* v_cmpx_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13117 /* v_cmpx_nlg_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13117 /* v_cmpx_nlg_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13151 /* v_cmpx_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13151 /* v_cmpx_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13151 /* v_cmpx_nlg_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13151 /* v_cmpx_nlg_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13185 /* v_cmpx_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13185 /* v_cmpx_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13185 /* v_cmpx_nlt_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13185 /* v_cmpx_nlt_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13219 /* v_cmpx_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13219 /* v_cmpx_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13219 /* v_cmpx_nlt_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13219 /* v_cmpx_nlt_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13253 /* v_cmpx_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13253 /* v_cmpx_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13253 /* v_cmpx_o_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13253 /* v_cmpx_o_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13283 /* v_cmpx_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13283 /* v_cmpx_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13283 /* v_cmpx_o_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13283 /* v_cmpx_o_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13433 /* v_cmpx_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13433 /* v_cmpx_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13433 /* v_cmpx_tru_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13433 /* v_cmpx_tru_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13467 /* v_cmpx_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13467 /* v_cmpx_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13467 /* v_cmpx_tru_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13467 /* v_cmpx_tru_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13501 /* v_cmpx_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13501 /* v_cmpx_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13501 /* v_cmpx_u_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13501 /* v_cmpx_u_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13531 /* v_cmpx_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13531 /* v_cmpx_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13531 /* v_cmpx_u_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13531 /* v_cmpx_u_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13585 /* v_cos_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13585 /* v_cos_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13585 /* v_cos_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13585 /* v_cos_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13595 /* v_cubeid_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13595 /* v_cubeid_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 13595 /* v_cubeid_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13595 /* v_cubeid_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 13608 /* v_cubema_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13608 /* v_cubema_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 13608 /* v_cubema_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13608 /* v_cubema_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 13621 /* v_cubesc_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13621 /* v_cubesc_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 13621 /* v_cubesc_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13621 /* v_cubesc_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 13634 /* v_cubetc_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13634 /* v_cubetc_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 13634 /* v_cubetc_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13634 /* v_cubetc_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 13647 /* v_cvt_f16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13647 /* v_cvt_f16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13647 /* v_cvt_f16_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13647 /* v_cvt_f16_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13703 /* v_cvt_f32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13703 /* v_cvt_f32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13703 /* v_cvt_f32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13703 /* v_cvt_f32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13813 /* v_cvt_f64_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13813 /* v_cvt_f64_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13813 /* v_cvt_f64_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13813 /* v_cvt_f64_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13855 /* v_cvt_flr_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13855 /* v_cvt_flr_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13855 /* v_cvt_flr_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13855 /* v_cvt_flr_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13887 /* v_cvt_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13887 /* v_cvt_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13887 /* v_cvt_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13887 /* v_cvt_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13901 /* v_cvt_i32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 13901 /* v_cvt_i32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13901 /* v_cvt_i32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 13901 /* v_cvt_i32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13966 /* v_cvt_pkaccum_u8_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13966 /* v_cvt_pkaccum_u8_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13966 /* v_cvt_pkaccum_u8_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13966 /* v_cvt_pkaccum_u8_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 13987 /* v_cvt_pknorm_i16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 13987 /* v_cvt_pknorm_i16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 13987 /* v_cvt_pknorm_i16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 13987 /* v_cvt_pknorm_i16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14008 /* v_cvt_pknorm_u16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14008 /* v_cvt_pknorm_u16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14008 /* v_cvt_pknorm_u16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14008 /* v_cvt_pknorm_u16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14029 /* v_cvt_pkrtz_f16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14029 /* v_cvt_pkrtz_f16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14029 /* v_cvt_pkrtz_f16_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14029 /* v_cvt_pkrtz_f16_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14049 /* v_cvt_rpi_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14049 /* v_cvt_rpi_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14049 /* v_cvt_rpi_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14049 /* v_cvt_rpi_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14081 /* v_cvt_u32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14081 /* v_cvt_u32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14081 /* v_cvt_u32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14081 /* v_cvt_u32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14095 /* v_cvt_u32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14095 /* v_cvt_u32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14095 /* v_cvt_u32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14095 /* v_cvt_u32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14109 /* v_div_fixup_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14109 /* v_div_fixup_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14109 /* v_div_fixup_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14109 /* v_div_fixup_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14125 /* v_div_fixup_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14125 /* v_div_fixup_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14125 /* v_div_fixup_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14125 /* v_div_fixup_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14141 /* v_div_fmas_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14141 /* v_div_fmas_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14141 /* v_div_fmas_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14141 /* v_div_fmas_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14156 /* v_div_fmas_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14156 /* v_div_fmas_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14156 /* v_div_fmas_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14156 /* v_div_fmas_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14171 /* v_div_scale_f32 */, MCK_Clamp, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14171 /* v_div_scale_f32 */, MCK_OMod, 128 /* 7 */ },
  { Feature_isGCN|Feature_isVI, 14171 /* v_div_scale_f32 */, MCK_Clamp, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14171 /* v_div_scale_f32 */, MCK_OMod, 128 /* 7 */ },
  { Feature_isGCN|Feature_isSICI, 14187 /* v_div_scale_f64 */, MCK_Clamp, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14187 /* v_div_scale_f64 */, MCK_OMod, 128 /* 7 */ },
  { Feature_isGCN|Feature_isVI, 14187 /* v_div_scale_f64 */, MCK_Clamp, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14187 /* v_div_scale_f64 */, MCK_OMod, 128 /* 7 */ },
  { Feature_isGCN|Feature_isSICI, 14213 /* v_exp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14213 /* v_exp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14213 /* v_exp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14213 /* v_exp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 14223 /* v_exp_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14223 /* v_exp_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 14223 /* v_exp_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14223 /* v_exp_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14285 /* v_floor_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14285 /* v_floor_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14285 /* v_floor_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14285 /* v_floor_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 14297 /* v_floor_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14297 /* v_floor_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 14297 /* v_floor_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14297 /* v_floor_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14309 /* v_fma_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14309 /* v_fma_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14309 /* v_fma_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14309 /* v_fma_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14319 /* v_fma_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14319 /* v_fma_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14319 /* v_fma_f64 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14319 /* v_fma_f64 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14341 /* v_fract_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14341 /* v_fract_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14341 /* v_fract_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14341 /* v_fract_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14353 /* v_fract_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14353 /* v_fract_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14353 /* v_fract_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14353 /* v_fract_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14385 /* v_frexp_exp_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14385 /* v_frexp_exp_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14385 /* v_frexp_exp_i32_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14385 /* v_frexp_exp_i32_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14405 /* v_frexp_exp_i32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14405 /* v_frexp_exp_i32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14405 /* v_frexp_exp_i32_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14405 /* v_frexp_exp_i32_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14442 /* v_frexp_mant_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14442 /* v_frexp_mant_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14442 /* v_frexp_mant_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14442 /* v_frexp_mant_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14459 /* v_frexp_mant_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14459 /* v_frexp_mant_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14459 /* v_frexp_mant_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14459 /* v_frexp_mant_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14537 /* v_ldexp_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14537 /* v_ldexp_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14537 /* v_ldexp_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14537 /* v_ldexp_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14549 /* v_ldexp_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14549 /* v_ldexp_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14549 /* v_ldexp_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14549 /* v_ldexp_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 14561 /* v_log_clamp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 14561 /* v_log_clamp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14587 /* v_log_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 14587 /* v_log_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14587 /* v_log_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 14587 /* v_log_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 14597 /* v_log_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 14597 /* v_log_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 14597 /* v_log_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 14597 /* v_log_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14752 /* v_mac_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14752 /* v_mac_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14752 /* v_mac_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14752 /* v_mac_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 14762 /* v_mac_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 14762 /* v_mac_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14779 /* v_mad_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14779 /* v_mad_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14779 /* v_mad_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14779 /* v_mad_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14817 /* v_mad_legacy_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14817 /* v_mad_legacy_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14817 /* v_mad_legacy_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14817 /* v_mad_legacy_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14910 /* v_max3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14910 /* v_max3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 14910 /* v_max3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14910 /* v_max3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 14953 /* v_max_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14953 /* v_max_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14953 /* v_max_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14953 /* v_max_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 14963 /* v_max_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 14963 /* v_max_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 14963 /* v_max_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 14963 /* v_max_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 14993 /* v_max_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 14993 /* v_max_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15068 /* v_med3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15068 /* v_med3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 15068 /* v_med3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15068 /* v_med3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 15101 /* v_min3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15101 /* v_min3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isVI, 15101 /* v_min3_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15101 /* v_min3_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isGCN|Feature_isSICI, 15144 /* v_min_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15144 /* v_min_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15144 /* v_min_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15144 /* v_min_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15154 /* v_min_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15154 /* v_min_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15154 /* v_min_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15154 /* v_min_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 15184 /* v_min_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15184 /* v_min_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15328 /* v_mul_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15328 /* v_mul_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15328 /* v_mul_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15328 /* v_mul_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15338 /* v_mul_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15338 /* v_mul_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15338 /* v_mul_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15338 /* v_mul_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15422 /* v_mul_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15422 /* v_mul_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15422 /* v_mul_legacy_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15422 /* v_mul_legacy_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 15492 /* v_mullit_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isSICI|Feature_isSICI, 15492 /* v_mullit_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isSICI|Feature_isVI, 15492 /* v_mullit_f32 */, MCK_Clamp, 32 /* 5 */ },
  { Feature_isSICI|Feature_isVI, 15492 /* v_mullit_f32 */, MCK_OMod, 64 /* 6 */ },
  { Feature_isSICI|Feature_isSICI, 15547 /* v_rcp_clamp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15547 /* v_rcp_clamp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15563 /* v_rcp_clamp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15563 /* v_rcp_clamp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15589 /* v_rcp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15589 /* v_rcp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15589 /* v_rcp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15589 /* v_rcp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15599 /* v_rcp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15599 /* v_rcp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15599 /* v_rcp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15599 /* v_rcp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15609 /* v_rcp_iflag_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15609 /* v_rcp_iflag_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15609 /* v_rcp_iflag_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15609 /* v_rcp_iflag_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15625 /* v_rcp_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15625 /* v_rcp_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15689 /* v_rndne_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15689 /* v_rndne_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15689 /* v_rndne_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15689 /* v_rndne_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 15701 /* v_rndne_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 15701 /* v_rndne_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 15701 /* v_rndne_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 15701 /* v_rndne_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15713 /* v_rsq_clamp_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15713 /* v_rsq_clamp_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15729 /* v_rsq_clamp_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15729 /* v_rsq_clamp_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15755 /* v_rsq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15755 /* v_rsq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15755 /* v_rsq_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15755 /* v_rsq_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15765 /* v_rsq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15765 /* v_rsq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15765 /* v_rsq_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15765 /* v_rsq_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isSICI|Feature_isSICI, 15775 /* v_rsq_legacy_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isSICI|Feature_isSICI, 15775 /* v_rsq_legacy_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15812 /* v_sin_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15812 /* v_sin_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15812 /* v_sin_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15812 /* v_sin_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15833 /* v_sqrt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15833 /* v_sqrt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15833 /* v_sqrt_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15833 /* v_sqrt_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15844 /* v_sqrt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 15844 /* v_sqrt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15844 /* v_sqrt_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 15844 /* v_sqrt_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15865 /* v_sub_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15865 /* v_sub_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15865 /* v_sub_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15865 /* v_sub_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15933 /* v_subrev_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15933 /* v_subrev_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15933 /* v_subrev_f32 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15933 /* v_subrev_f32 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 15972 /* v_trig_preop_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isSICI, 15972 /* v_trig_preop_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isVI, 15972 /* v_trig_preop_f64 */, MCK_Clamp, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 15972 /* v_trig_preop_f64 */, MCK_OMod, 32 /* 5 */ },
  { Feature_isGCN|Feature_isSICI, 16001 /* v_trunc_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isSICI, 16001 /* v_trunc_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isGCN|Feature_isVI, 16001 /* v_trunc_f32 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isGCN|Feature_isVI, 16001 /* v_trunc_f32 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isSICI, 16013 /* v_trunc_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isSICI, 16013 /* v_trunc_f64 */, MCK_OMod, 16 /* 4 */ },
  { Feature_isCIVI|Feature_isVI, 16013 /* v_trunc_f64 */, MCK_Clamp, 8 /* 3 */ },
  { Feature_isCIVI|Feature_isVI, 16013 /* v_trunc_f64 */, MCK_OMod, 16 /* 4 */ },
};

AMDGPUAsmParser::OperandMatchResultTy AMDGPUAsmParser::
tryCustomParseOperand(OperandVector &Operands,
                      unsigned MCK) {

  switch(MCK) {
  case MCK_Clamp:
    return parseVOP3OptionalOps(Operands);
  case MCK_DSOffset1:
    return parseDSOff01OptionalOps(Operands);
  case MCK_DSOffsetparseDSOffsetOptional:
    return parseDSOffsetOptional(Operands);
  case MCK_DSOffsetparseDSOptionalOps:
    return parseDSOptionalOps(Operands);
  case MCK_GDSparseDSOff01OptionalOps:
    return parseDSOff01OptionalOps(Operands);
  case MCK_GDSparseDSOptionalOps:
    return parseDSOptionalOps(Operands);
  case MCK_GLCparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_GLCparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  case MCK_MubufOffset:
    return parseMubufOptionalOps(Operands);
  case MCK_OMod:
    return parseVOP3OptionalOps(Operands);
  case MCK_SLCparseFlatAtomicOptionalOps:
    return parseFlatAtomicOptionalOps(Operands);
  case MCK_SLCparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_SLCparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  case MCK_SWaitCnt:
    return parseSWaitCntOps(Operands);
  case MCK_SoppBrTarget:
    return parseSOppBrTarget(Operands);
  case MCK_TFEparseFlatAtomicOptionalOps:
    return parseFlatAtomicOptionalOps(Operands);
  case MCK_TFEparseFlatOptionalOps:
    return parseFlatOptionalOps(Operands);
  case MCK_TFEparseMubufOptionalOps:
    return parseMubufOptionalOps(Operands);
  default:
    return MatchOperand_NoMatch;
  }
  return MatchOperand_NoMatch;
}

AMDGPUAsmParser::OperandMatchResultTy AMDGPUAsmParser::
MatchOperandParserImpl(OperandVector &Operands,
                       StringRef Mnemonic) {
  // Get the current feature set.
  uint64_t AvailableFeatures = getAvailableFeatures();

  // Get the next operand index.
  unsigned NextOpNum = Operands.size();
  // Search the table.
  std::pair<const OperandMatchEntry*, const OperandMatchEntry*> MnemonicRange
       (OperandMatchTable, OperandMatchTable+2428);
  if(!Mnemonic.empty())
    MnemonicRange = std::equal_range(OperandMatchTable, OperandMatchTable+2428, Mnemonic,
                     LessOpcodeOperand());

  if (MnemonicRange.first == MnemonicRange.second)
    return MatchOperand_NoMatch;

  for (const OperandMatchEntry *it = MnemonicRange.first,
       *ie = MnemonicRange.second; it != ie; ++it) {
    // equal_range guarantees that instruction mnemonic matches.
    assert(Mnemonic == it->getMnemonic());

    // check if the available features match
    if ((AvailableFeatures & it->RequiredFeatures) != it->RequiredFeatures) {
      continue;
    }

    // check if the operand in question has a custom parser.
    if (!(it->OperandMask & (1 << NextOpNum)))
      continue;

    // call custom parse method to handle the operand
    OperandMatchResultTy Result = tryCustomParseOperand(Operands, it->Class);
    if (Result != MatchOperand_NoMatch)
      return Result;
  }

  // Okay, we had no match.
  return MatchOperand_NoMatch;
}

#endif // GET_MATCHER_IMPLEMENTATION

