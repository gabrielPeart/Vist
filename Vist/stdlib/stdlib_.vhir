
type %String = { %Builtin.OpaquePointer, %Builtin.Int64, %Int }
type %Int = { %Builtin.Int64 }
type %Int32 = { %Builtin.Int32 }
type %Double = { %Builtin.Double }
type %Bool = { %Builtin.Bool }
type %Range = { %Int, %Int }

func @vist-Uprint_tb : &thin (%Builtin.Bool) -> %Builtin.Void

func @Double_tD : &thin (%Double) -> %Double {
$entry(%val: %Double):
  %self = alloc %Double  	// users: %value, %2
  %value = struct_element %self: %*D, #value  	// user: %1
  %0 = struct_extract %val: %Double, #value  	// user: %1
  store %0 in %value: %*Builtin.Double 
  %2 = load %self: %*D  	// user: %3
  return %2
}

func @-T-O_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_or %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @Int_ti64 : &thin (%Builtin.Int64) -> %Int {
$entry(%$0: %Builtin.Int64):
  %self = alloc %Int  	// users: %value, %1
  %value = struct_element %self: %*I, #value  	// user: %0
  store %$0 in %value: %*Builtin.Int64 
  %1 = load %self: %*I  	// user: %2
  return %1
}

func @-D_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_div %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @-P_tDD : &thin (%Double, %Double) -> %Double {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_add %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Double_tf64 (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @String_topi64I : &thin (%Builtin.OpaquePointer, %Builtin.Int64, %Int) -> %String {
$entry(%$0: %Builtin.OpaquePointer, %$1: %Builtin.Int64, %$2: %Int):
  %self = alloc %String  	// users: %base, %length, %codeUnitSize, %3
  %base = struct_element %self: %*String, #base  	// user: %0
  %length = struct_element %self: %*String, #length  	// user: %1
  %codeUnitSize = struct_element %self: %*String, #codeUnitSize  	// user: %2
  store %$0 in %base: %*Builtin.OpaquePointer 
  store %$1 in %length: %*Builtin.Int64 
  store %$2 in %codeUnitSize: %*I 
  %3 = load %self: %*String  	// user: %4
  return %3
}

func @-L-E_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_cmp_lte %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @-O-O_tBB : &thin (%Bool, %Bool) -> %Bool {
$entry(%a: %Bool, %b: %Bool):
  %0 = struct_extract %a: %Bool, #value  	// user: %2
  %1 = struct_extract %b: %Bool, #value  	// user: %2
  %2 = builtin b_or %0: %Builtin.Bool, %1: %Builtin.Bool  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @-G_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_cmp_gt %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @Double_tf64 : &thin (%Builtin.Double) -> %Double {
$entry(%$0: %Builtin.Double):
  %self = alloc %Double  	// users: %value, %1
  %value = struct_element %self: %*D, #value  	// user: %0
  store %$0 in %value: %*Builtin.Double 
  %1 = load %self: %*D  	// user: %2
  return %1
}

func @-G_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_cmp_gt %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @print_tI : &thin (%Int) -> %Builtin.Void {
$entry(%a: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %1
  %1 = call @vist-Uprint_ti64 (%0: %Builtin.Int64) 
  return ()
}

func @-C_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_rem %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @-T-N_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_and %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @-D-D-D_tII : &thin (%Int, %Int) -> %Range {
$entry(%a: %Int, %b: %Int):
  %0 = call @Range_tII (%a: %Int, %b: %Int)  	// user: %1
  return %0
}

func @Bool_tB : &thin (%Bool) -> %Bool {
$entry(%val: %Bool):
  %self = alloc %Bool  	// users: %value, %2
  %value = struct_element %self: %*B, #value  	// user: %1
  %0 = struct_extract %val: %Bool, #value  	// user: %1
  store %0 in %value: %*Builtin.Bool 
  %2 = load %self: %*B  	// user: %3
  return %2
}

func @fatalError_t : &thin () -> %Builtin.Void {
$entry:
  %0 = builtin trap  
  return ()
}

func @Int32_tI32 : &thin (%Int32) -> %Int32 {
$entry(%val: %Int32):
  %self = alloc %Int32  	// users: %value, %2
  %value = struct_element %self: %*I32, #value  	// user: %1
  %0 = struct_extract %val: %Int32, #value  	// user: %1
  store %0 in %value: %*Builtin.Int32 
  %2 = load %self: %*I32  	// user: %3
  return %2
}

func @Int32_ti32 : &thin (%Builtin.Int32) -> %Int32 {
$entry(%$0: %Builtin.Int32):
  %self = alloc %Int32  	// users: %value, %1
  %value = struct_element %self: %*I32, #value  	// user: %0
  store %$0 in %value: %*Builtin.Int32 
  %1 = load %self: %*I32  	// user: %2
  return %1
}

func @-L_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_cmp_lt %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @vist-Uprint_ti64 : &thin (%Builtin.Int64) -> %Builtin.Void

func @Range_tII : &thin (%Int, %Int) -> %Range {
$entry(%$0: %Int, %$1: %Int):
  %self = alloc %Range  	// users: %start, %end, %2
  %start = struct_element %self: %*R, #start  	// user: %0
  %end = struct_element %self: %*R, #end  	// user: %1
  store %$0 in %start: %*I 
  store %$1 in %end: %*I 
  %2 = load %self: %*R  	// user: %3
  return %2
}

func @-E-E_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_eq %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @-G-E_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_cmp_gte %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @print_tI32 : &thin (%Int32) -> %Builtin.Void {
$entry(%a: %Int32):
  %0 = struct_extract %a: %Int32, #value  	// user: %1
  %1 = call @vist-Uprint_ti32 (%0: %Builtin.Int32) 
  return ()
}

func @-G-G_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_shr %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @vist-Uprint_ti32 : &thin (%Builtin.Int32) -> %Builtin.Void

func @vist-Uprint_tf64 : &thin (%Builtin.Double) -> %Builtin.Void

func @-P_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_add %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %v
  variable_decl %v = %2: (%Builtin.Int64, %Builtin.Bool)  	// users: %3, %5
  %3 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 1  	// user: %4
  cond_fail %3: %Builtin.Bool
  %5 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 0  	// user: %6
  %6 = call @Int_ti64 (%5: %Builtin.Int64)  	// user: %7
  return %6
}

func @-L-L_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_shl %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @vist-Uprint_top : &thin (%Builtin.OpaquePointer) -> %Builtin.Void

func @-G-E_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_cmp_gte %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @-C_tDD : &thin (%Double, %Double) -> %Double {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_rem %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Double_tf64 (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @-L-E_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_cmp_lte %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @Bool_tb : &thin (%Builtin.Bool) -> %Bool {
$entry(%$0: %Builtin.Bool):
  %self = alloc %Bool  	// users: %value, %1
  %value = struct_element %self: %*B, #value  	// user: %0
  store %$0 in %value: %*Builtin.Bool 
  %1 = load %self: %*B  	// user: %2
  return %1
}

func @Bool_t : &thin () -> %Bool {
$entry:
  %self = alloc %Bool  	// users: %value, %4
  %value = struct_element %self: %*B, #value  	// user: %3
  %0 = bool_literal false  	// user: %1
  %1 = struct %B (%0: %Builtin.Bool)  	// user: %b
  variable_decl %b = %1: %Bool  	// user: %2
  %2 = struct_extract %b: %Bool, #value  	// user: %3
  store %2 in %value: %*Builtin.Bool 
  %4 = load %self: %*B  	// user: %5
  return %4
}

func @-E-E_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_eq %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @-L_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_cmp_lt %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @print_tString : &thin (%String) -> %Builtin.Void {
$entry(%a: %String):
  %0 = struct_extract %a: %String, #base  	// user: %1
  %1 = call @vist-Uprint_top (%0: %Builtin.OpaquePointer) 
  return ()
}

func @Range_tR : &thin (%Range) -> %Range {
$entry(%val: %Range):
  %self = alloc %Range  	// users: %start, %end, %4
  %start = struct_element %self: %*R, #start  	// user: %1
  %end = struct_element %self: %*R, #end  	// user: %3
  %0 = struct_extract %val: %Range, #start  	// user: %1
  store %0 in %start: %*I 
  %2 = struct_extract %val: %Range, #end  	// user: %3
  store %2 in %end: %*I 
  %4 = load %self: %*R  	// user: %5
  return %4
}

func @-M_tDD : &thin (%Double, %Double) -> %Double {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_sub %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Double_tf64 (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @print_tD : &thin (%Double) -> %Builtin.Void {
$entry(%a: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %1
  %1 = call @vist-Uprint_tf64 (%0: %Builtin.Double) 
  return ()
}

func @-N-N_tBB : &thin (%Bool, %Bool) -> %Bool {
$entry(%a: %Bool, %b: %Bool):
  %0 = struct_extract %a: %Bool, #value  	// user: %2
  %1 = struct_extract %b: %Bool, #value  	// user: %2
  %2 = builtin b_and %0: %Builtin.Bool, %1: %Builtin.Bool  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @String_topi64 : &thin (%Builtin.OpaquePointer, %Builtin.Int64) -> %String {
$entry(%ptr: %Builtin.OpaquePointer, %count: %Builtin.Int64):
  %self = alloc %String  	// users: %base, %length, %codeUnitSize, %4
  %base = struct_element %self: %*String, #base  	// user: %2
  %length = struct_element %self: %*String, #length  	// user: %3
  %codeUnitSize = struct_element %self: %*String, #codeUnitSize 
  %0 = builtin heap_alloc %count: %Builtin.Int64  	// user: %buffer
  variable_decl %buffer = %0: %Builtin.OpaquePointer  	// users: %1, %2
  %1 = builtin mem_copy %buffer: %Builtin.OpaquePointer, %ptr: %Builtin.OpaquePointer, %count: %Builtin.Int64 
  store %buffer in %base: %*Builtin.OpaquePointer 
  store %count in %length: %*Builtin.Int64 
  %4 = load %self: %*String  	// user: %5
  return %4
}

func @-T-R_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_xor %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Int_ti64 (%2: %Builtin.Int64)  	// user: %4
  return %3
}

func @-A_tDD : &thin (%Double, %Double) -> %Double {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_mul %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Double_tf64 (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @-B-E_tII : &thin (%Int, %Int) -> %Bool {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_neq %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}

func @-M_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_sub %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %v
  variable_decl %v = %2: (%Builtin.Int64, %Builtin.Bool)  	// users: %3, %5
  %3 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 1  	// user: %4
  cond_fail %3: %Builtin.Bool
  %5 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 0  	// user: %6
  %6 = call @Int_ti64 (%5: %Builtin.Int64)  	// user: %7
  return %6
}

func @-A_tII : &thin (%Int, %Int) -> %Int {
$entry(%a: %Int, %b: %Int):
  %0 = struct_extract %a: %Int, #value  	// user: %2
  %1 = struct_extract %b: %Int, #value  	// user: %2
  %2 = builtin i_mul %0: %Builtin.Int64, %1: %Builtin.Int64  	// user: %v
  variable_decl %v = %2: (%Builtin.Int64, %Builtin.Bool)  	// users: %3, %5
  %3 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 1  	// user: %4
  cond_fail %3: %Builtin.Bool
  %5 = tuple_extract %v: (%Builtin.Int64, %Builtin.Bool), 0  	// user: %6
  %6 = call @Int_ti64 (%5: %Builtin.Int64)  	// user: %7
  return %6
}

func @Int_t : &thin () -> %Int {
$entry:
  %self = alloc %Int  	// users: %value, %4
  %value = struct_element %self: %*I, #value  	// user: %3
  %0 = int_literal 0  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %v
  variable_decl %v = %1: %Int  	// user: %2
  %2 = struct_extract %v: %Int, #value  	// user: %3
  store %2 in %value: %*Builtin.Int64 
  %4 = load %self: %*I  	// user: %5
  return %4
}

func @-B-E_tDD : &thin (%Double, %Double) -> %Bool {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_neq %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @Int_tI : &thin (%Int) -> %Int {
$entry(%val: %Int):
  %self = alloc %Int  	// users: %value, %2
  %value = struct_element %self: %*I, #value  	// user: %1
  %0 = struct_extract %val: %Int, #value  	// user: %1
  store %0 in %value: %*Builtin.Int64 
  %2 = load %self: %*I  	// user: %3
  return %2
}

func @print_tB : &thin (%Bool) -> %Builtin.Void {
$entry(%a: %Bool):
  %0 = struct_extract %a: %Bool, #value  	// user: %1
  %1 = call @vist-Uprint_tb (%0: %Builtin.Bool) 
  return ()
}

func @-D-D-L_tII : &thin (%Int, %Int) -> %Range {
$entry(%a: %Int, %b: %Int):
  %0 = int_literal 1  	// user: %1
  %1 = struct %I (%0: %Builtin.Int64)  	// user: %2
  %2 = call @-M_tII (%b: %Int, %1: %Int)  	// user: %3
  %3 = call @Range_tII (%a: %Int, %2: %Int)  	// user: %4
  return %3
}

func @-D_tDD : &thin (%Double, %Double) -> %Double {
$entry(%a: %Double, %b: %Double):
  %0 = struct_extract %a: %Double, #value  	// user: %2
  %1 = struct_extract %b: %Double, #value  	// user: %2
  %2 = builtin f_div %0: %Builtin.Double, %1: %Builtin.Double  	// user: %3
  %3 = call @Double_tf64 (%2: %Builtin.Double)  	// user: %4
  return %3
}

func @-Uexpect_tBB : &thin (%Bool, %Bool) -> %Bool {
$entry(%val: %Bool, %assume: %Bool):
  %0 = struct_extract %val: %Bool, #value  	// user: %2
  %1 = struct_extract %assume: %Bool, #value  	// user: %2
  %2 = builtin expect %0: %Builtin.Bool, %1: %Builtin.Bool  	// user: %3
  %3 = call @Bool_tb (%2: %Builtin.Bool)  	// user: %4
  return %3
}