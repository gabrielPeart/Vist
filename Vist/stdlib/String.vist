


type UTF8CodeUnit {
    let unit: Builtin.Int8
    
    init Int = (u) {
        unit = Builtin.trunc_int_8 u.value
    }
}

type UTF16CodeUnit {
    let unit: Builtin.Int16
    
    init Int = (u) {
        unit = Builtin.trunc_int_16 u.value
    }
}

type String {
    var base: Builtin.OpaquePointer, length: Int, _capacityAndEncoding: Int
    
    init Builtin.OpaquePointer Builtin.Int Builtin.Bool = (ptr count isUTF8Encoded) {
        // allocate the string buffer and copy in from the string ptr we are given
        base = Builtin.heap_alloc count
        Builtin.mem_copy base ptr count
        
        let c = Int count
        length = c - 1
        // store the capacity in the most significant 63 bits of _capacityAndEncoding
        let masked = c << 1
        
        // if it is UTF-8 we store true in the least significant bit of _capacityAndEncoding
        if Bool isUTF8Encoded do
             _capacityAndEncoding = masked ~| 1
        else do
            _capacityAndEncoding = masked
    }

    //@private init UTF8CodeUnit = (unit) {
    //    let b = Builtin.heap_alloc 2 // alloc 2 bytes
    //    let s = String
    //}
    
    /// Whether the string has UTF-8 encoding. if true it is a contiguous block of char*
    func isUTF8Encoded:: -> Bool = do
        return _capacityAndEncoding ~& 1 == 1
    
    /// The size of the allocated string buffer
    func bufferCapacity:: -> Int = do
        return _capacityAndEncoding >> 1
    
    /// Return a pointer to the code unit `index` from `base`
    /// temporary substitute until I have StringCore subscripting
    func codeUnitAtIndex:: Int -> Builtin.OpaquePointer = (index) do
        return base + index
    
    /// A genrator -- yields each code unit
    func generate:: -> UTF8CodeUnit = {
        var i = 0
        // FIXME: we go to the end of the buffer, even if it's not full
        let bufferSize = (self.bufferCapacity ()) - 1
        while i < bufferSize {
            yield UTF8CodeUnit (Builtin.opaque_load (self.codeUnitAtIndex i))
            i = i + 1
        }
    }
}


@inline func _print :: String = (str) {
    if str.isUTF8Encoded () {
        // if its all UTF-8 we can just fwrite the buffer
        vist_cshim_write str.base str.length.value
        return ()
    } else {
        // otherwise we step through, char by char, and putchar it
        for c in str do
            vist_cshim_putchar c.unit
        return ()
    }
}


@public @noinline
func print :: String = (str) {
    _print str
    _print "\n"
}


concept Printable {
    func description :: -> String
}

func print :: Printable = (val) {
    _print (val.description ())
    _print "\n"
}



