


type UTF8CodeUnit {
    let unit: Builtin.Int8
    
    init Int = (u) do
        unit = Builtin.trunc_int_8 u.value
}

type UTF16CodeUnit {
    let unit: Builtin.Int16
    
    init Int = (u) do
        unit = Builtin.trunc_int_16 u.value
}

ref type _StringCore {
    var base: Builtin.OpaquePointer, capacityAndEncoding: Int

    /// Whether the string has UTF-8 encoding. if true it is a contiguous block of char*
    func isUTF8Encoded:: -> Bool = do
        return capacityAndEncoding ~& 1 == 1

    func elementWidth:: -> Int = do 
        if isUTF8Encoded () do return 8 else do return 16    

    /// The size of the allocated string buffer
    func bufferCapacity:: -> Int = do
        return capacityAndEncoding >> 1

    init Builtin.OpaquePointer Builtin.Int Builtin.Bool = (ptr count isUTF8) {
        base = Builtin.heap_alloc count
        Builtin.mem_copy base ptr count

        // store the capacity in the most significant 63 bits of capacityAndEncoding
        // if it is UTF-8 we store true in the least significant bit of capacityAndEncoding
        capacityAndEncoding = ((Int count) << 1) ~| (Bool isUTF8)
    }
    init _StringCore Builtin.OpaquePointer Int = (core ptr cap) {
        base = ptr
        capacityAndEncoding = (cap << 1) ~| (core.isUTF8Encoded ())
    }

    init _StringCore = {
        base = $0.base
        capacityAndEncoding = $0.capacityAndEncoding
    }

    deinit = do
        if Bool (Builtin.is_uniquely_referenced self) do
            Builtin.heap_free base
    
    @mutating func setBufferCapacity :: Int = do 
        capacityAndEncoding = ($0 << 1) ~| (capacityAndEncoding ~& 1)

    @mutating func growBuffer :: Int -> Builtin.OpaquePointer = (size) {
        let capacity = bufferCapacity ()
        if capacity < size {
            let new = Builtin.heap_alloc size.value
            Builtin.mem_copy new base capacity.value
            Builtin.heap_free base
            base = new
            setBufferCapacity size
        }
        return base
    }
}

type String {

    var _core: _StringCore

    init Builtin.OpaquePointer Builtin.Int Builtin.Bool = do
        _core = _StringCore $0 $1 $2

    /// Return a pointer to the code unit `index` from `base`
    /// temporary substitute until I have StringCore subscripting
    func codeUnitAtIndex:: Int -> Builtin.OpaquePointer = (index) do
        return _core.base + index
    
    /// A genrator -- yields each code unit
    func generate:: -> UTF8CodeUnit = {
        var i = 0
        // FIXME: we go to the end of the buffer, even if it's not full
        let bufferSize = (_core.bufferCapacity ()) - 1
        while i < bufferSize {
            yield UTF8CodeUnit (Builtin.opaque_load (codeUnitAtIndex i))
            i = i + 1
        }
    }

    func length :: -> Int = do
        return Int (vist_cshim_strlen _core.base)

    @mutating func append :: String = (other) {
        // check if the core is singly referenced before mutating
		let otherCore = other._core
        if Bool (Builtin.is_uniquely_referenced _core) {

            let l1 = length ()
            let c1 = _core.bufferCapacity ()
            let c2 = otherCore.bufferCapacity ()
            // mutate the core in place, after resizing it
            _core.growBuffer c1 + c2 - 1
            if (_core.isUTF8Encoded ()) && (otherCore.isUTF8Encoded ()) {
                Builtin.mem_copy (_core.base + l1) otherCore.base c2.value
            } else {
                fatalError "TODO tbh 1111"
            }
            let l = length ()

        } else {

            // copy out
            let l1 = length ()
            let l2 = other.length ()
            let c1 = _core.bufferCapacity ()
            let newCapacity = c1 + (otherCore.bufferCapacity ()) - 1
            let newBase = Builtin.heap_alloc newCapacity.value
			
            if (_core.isUTF8Encoded ()) && (otherCore.isUTF8Encoded ()) {
                Builtin.mem_copy newBase _core.base l1.value
                Builtin.mem_copy (newBase + l1) otherCore.base l2.value
            } else {
                fatalError "TODO mixed utf8/16 appending"
            }
			
            _core = _StringCore _core newBase newCapacity
			
            let l = length()
        }
    }
}


@inline func _print :: String = (str) {
    if str._core.isUTF8Encoded () {
        // if its all UTF-8 we can just fwrite the buffer
        let len = str.length ()
        vist_cshim_write str._core.base len.value
	return ()
    } else {
        // otherwise we step through, char by char, and putchar it
        for c in str do
            vist_cshim_putchar c.unit
	return ()
    }
}


@public @noinline
func print :: String = (str) {
    _print str
    _print "\n"
}


concept Printable {
    func description :: -> String
}

func print :: Printable = (val) {
    _print (val.description ())
    _print "\n"
}



