
type Int {
    var value: LLVM.Int64
    init Int
    init LLVM.Int
}

type Bool {
    var value: LLVM.Bool
    init Bool
    init LLVM.Bool
}

type Double {
    var value: LLVM.Double
    init Double
    init LLVM.Double
}


func print: LLVM.Int
func print: LLVM.Float
func print: LLVM.Double
func print: LLVM.Bool



func LLVM.i_add: LLVM.Int64 LLVM.Int64 -> LLVM.Int64
func LLVM.i_sub: LLVM.Int64 LLVM.Int64 -> LLVM.Int64
func LLVM.i_mul: LLVM.Int64 LLVM.Int64 -> LLVM.Int64
func LLVM.i_div: LLVM.Int64 LLVM.Int64 -> LLVM.Int64
func LLVM.i_rem: LLVM.Int64 LLVM.Int64 -> LLVM.Int64

func LLVM.i_cmp_lt: LLVM.Int64 LLVM.Int64 -> LLVM.Bool
func LLVM.i_cmp_lte: LLVM.Int64 LLVM.Int64 -> LLVM.Bool
func LLVM.i_cmp_gt: LLVM.Int64 LLVM.Int64 -> LLVM.Bool
func LLVM.i_cmp_gte: LLVM.Int64 LLVM.Int64 -> LLVM.Bool
func LLVM.i_eq: LLVM.Int64 LLVM.Int64 -> LLVM.Bool
func LLVM.i_neq: LLVM.Int64 LLVM.Int64 -> LLVM.Bool


func LLVM.b_and: LLVM.Bool LLVM.Bool -> LLVM.Bool
func LLVM.b_or: LLVM.Bool LLVM.Bool -> LLVM.Bool


func LLVM.f_add: LLVM.Double LLVM.Double -> LLVM.Double
func LLVM.f_mul: LLVM.Double LLVM.Double -> LLVM.Double


@inline @operator(80) func + : Double Double -> Double

@inline @operator(80) func + : Int Int -> Int
@inline @operator(80) func - : Int Int -> Int
@inline @operator(100) func * : Int Int -> Int
@inline @operator(100) func / : Int Int -> Int
@inline @operator(90) func % : Int Int -> Int
@inline @operator(30) func < : Int Int -> Bool
@inline @operator(30) func <= : Int Int -> Bool
@inline @operator(30) func > : Int Int -> Bool
@inline @operator(30) func >= : Int Int -> Bool
@inline @operator(20) func == : Int Int -> Bool
@inline @operator(20) func != : Int Int -> Bool

@inline @operator(15) func && : Bool Bool -> Bool
@inline @operator(10) func || : Bool Bool -> Bool







