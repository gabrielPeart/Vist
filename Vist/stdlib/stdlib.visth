




type Int {
    var value: LLVM.Int64
    init Int
    init LLVM.Int
}

type Bool {
    var value: LLVM.Bool
    init Bool
    init LLVM.Bool
}

type Double {
    var value: LLVM.Double
    init Double
    init LLVM.Double
}




@inline func print: Int
@inline func print: Bool
@inline func print: Double
@noreturn func assert: Bool
@noreturn func fatalError: ()



@inline @operator(80) func + : Double Double -> Double

@inline @operator(80) func + : Int Int -> Int
@inline @operator(80) func - : Int Int -> Int
@inline @operator(100) func * : Int Int -> Int
@inline @operator(100) func / : Int Int -> Int
@inline @operator(90) func % : Int Int -> Int
@inline @operator(30) func < : Int Int -> Bool
@inline @operator(30) func <= : Int Int -> Bool
@inline @operator(30) func > : Int Int -> Bool
@inline @operator(30) func >= : Int Int -> Bool
@inline @operator(20) func == : Int Int -> Bool
@inline @operator(20) func != : Int Int -> Bool

@inline @operator(15) func && : Bool Bool -> Bool
@inline @operator(10) func || : Bool Bool -> Bool







