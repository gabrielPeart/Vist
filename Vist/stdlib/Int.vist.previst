






func int64ToString :: Int -> String = (number) {

    let size = 21

    let buffer = Builtin.stack_alloc size.value

    var bufferSize = 1
    var val = number
    var ptr = buffer + size


    let isNegative = number < 0
    if (isNegative) do
        val = 0 - val



    while val != 0 || (number == 0 && bufferSize == 1) {
        ptr = ptr - 1

        let v = val % 10 + 48
        let char = Builtin.trunc_int_8 v.value

        Builtin.opaque_store ptr char

        val = val / 10
        bufferSize = bufferSize + 1
    }

    if (isNegative) {
        ptr = ptr - 1
        let minus = 45
        let char = Builtin.trunc_int_8 minus.value

        Builtin.opaque_store ptr char
        bufferSize = bufferSize + 1
    }

    let isUTF8 = true
    let s = String ptr bufferSize.value isUTF8.value
    return s
}

type Int {
    var value: Builtin.Int64

    init () = {
        let v = 0
        value = v.value
    }
    init Int = (val) do value = val.value

    func description :: -> String = do
        return int64ToString self

}
type Int32 {
    var value: Builtin.Int32
    init Int32 = (val) do value = val.value
}


@public @noinline
func print :: Int = (a) {
    _print (a.description ())
    _print "\n"
}
